
Dump of file FileDownloader_VS2008_MB_MT_d.lib

File Type: LIBRARY

?GetCurrentFullPath@Path@@SAPADPAD@Z (public: static char * __cdecl Path::GetCurrentFullPath(char *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 56                 push        esi
  00000004: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  00000008: 75 05              jne         0000000F
  0000000A: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000000D: EB 1D              jmp         0000002C
  0000000F: 8B F4              mov         esi,esp
  00000011: 68 04 01 00 00     push        104h
  00000016: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000019: 50                 push        eax
  0000001A: 6A 00              push        0
  0000001C: FF 15 00 00 00 00  call        dword ptr [?GetCurrentFullPath@Path@@SAPADPAD@Z]
  00000022: 3B F4              cmp         esi,esp
  00000024: E8 00 00 00 00     call        00000029
  00000029: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000002C: 5E                 pop         esi
  0000002D: 3B EC              cmp         ebp,esp
  0000002F: E8 00 00 00 00     call        00000034
  00000034: 5D                 pop         ebp
  00000035: C3                 ret
  00000036: CC                 int         3
  00000037: CC                 int         3
  00000038: CC                 int         3
  00000039: CC                 int         3
  0000003A: CC                 int         3
  0000003B: CC                 int         3
  0000003C: CC                 int         3
  0000003D: CC                 int         3
  0000003E: CC                 int         3
  0000003F: CC                 int         3
?GetCurrentDirectoryA@Path@@SAPADPAD@Z (public: static char * __cdecl Path::GetCurrentDirectoryA(char *)):
  00000040: 55                 push        ebp
  00000041: 8B EC              mov         ebp,esp
  00000043: 51                 push        ecx
  00000044: 56                 push        esi
  00000045: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000004C: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  00000050: 75 05              jne         00000057
  00000052: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000055: EB 45              jmp         0000009C
  00000057: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
            00
  0000005E: 8B F4              mov         esi,esp
  00000060: 68 04 01 00 00     push        104h
  00000065: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000068: 50                 push        eax
  00000069: 6A 00              push        0
  0000006B: FF 15 00 00 00 00  call        dword ptr [?GetCurrentFullPath@Path@@SAPADPAD@Z]
  00000071: 3B F4              cmp         esi,esp
  00000073: E8 00 00 00 00     call        00000078
  00000078: 6A 5C              push        5Ch
  0000007A: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000007D: 51                 push        ecx
  0000007E: E8 00 00 00 00     call        00000083
  00000083: 83 C4 08           add         esp,8
  00000086: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000089: 83 7D FC 00        cmp         dword ptr [ebp-4],0
  0000008D: 74 0B              je          0000009A
  0000008F: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000092: C6 02 00           mov         byte ptr [edx],0
  00000095: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000098: EB 02              jmp         0000009C
  0000009A: 33 C0              xor         eax,eax
  0000009C: 5E                 pop         esi
  0000009D: 83 C4 04           add         esp,4
  000000A0: 3B EC              cmp         ebp,esp
  000000A2: E8 00 00 00 00     call        000000A7
  000000A7: 8B E5              mov         esp,ebp
  000000A9: 5D                 pop         ebp
  000000AA: C3                 ret
  000000AB: CC                 int         3
  000000AC: CC                 int         3
  000000AD: CC                 int         3
  000000AE: CC                 int         3
  000000AF: CC                 int         3
?GetCurrentFileName@Path@@SAPADPAD@Z (public: static char * __cdecl Path::GetCurrentFileName(char *)):
  000000B0: 55                 push        ebp
  000000B1: 8B EC              mov         ebp,esp
  000000B3: 51                 push        ecx
  000000B4: 56                 push        esi
  000000B5: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  000000BC: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  000000C0: 75 05              jne         000000C7
  000000C2: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000000C5: EB 2D              jmp         000000F4
  000000C7: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
            00
  000000CE: 8B F4              mov         esi,esp
  000000D0: 68 04 01 00 00     push        104h
  000000D5: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000000D8: 50                 push        eax
  000000D9: 6A 00              push        0
  000000DB: FF 15 00 00 00 00  call        dword ptr [?GetCurrentFullPath@Path@@SAPADPAD@Z]
  000000E1: 3B F4              cmp         esi,esp
  000000E3: E8 00 00 00 00     call        000000E8
  000000E8: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  000000EB: 51                 push        ecx
  000000EC: E8 00 00 00 00     call        000000F1
  000000F1: 83 C4 04           add         esp,4
  000000F4: 5E                 pop         esi
  000000F5: 83 C4 04           add         esp,4
  000000F8: 3B EC              cmp         ebp,esp
  000000FA: E8 00 00 00 00     call        000000FF
  000000FF: 8B E5              mov         esp,ebp
  00000101: 5D                 pop         ebp
  00000102: C3                 ret
  00000103: CC                 int         3
  00000104: CC                 int         3
  00000105: CC                 int         3
  00000106: CC                 int         3
  00000107: CC                 int         3
  00000108: CC                 int         3
  00000109: CC                 int         3
  0000010A: CC                 int         3
  0000010B: CC                 int         3
  0000010C: CC                 int         3
  0000010D: CC                 int         3
  0000010E: CC                 int         3
  0000010F: CC                 int         3
?SetDirString@Path@@SAPADPAD@Z (public: static char * __cdecl Path::SetDirString(char *)):
  00000110: 55                 push        ebp
  00000111: 8B EC              mov         ebp,esp
  00000113: 83 EC 0C           sub         esp,0Ch
  00000116: C7 45 F4 CC CC CC  mov         dword ptr [ebp-0Ch],0CCCCCCCCh
            CC
  0000011D: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  00000124: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000012B: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  0000012F: 75 05              jne         00000136
  00000131: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000134: EB 57              jmp         0000018D
  00000136: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000139: 0F BE 08           movsx       ecx,byte ptr [eax]
  0000013C: 85 C9              test        ecx,ecx
  0000013E: 75 0F              jne         0000014F
  00000140: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000143: C6 02 5C           mov         byte ptr [edx],5Ch
  00000146: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000149: C6 40 01 00        mov         byte ptr [eax+1],0
  0000014D: EB 3B              jmp         0000018A
  0000014F: C7 45 F8 00 00 00  mov         dword ptr [ebp-8],offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
            00
  00000156: 8D 4D F8           lea         ecx,[ebp-8]
  00000159: 51                 push        ecx
  0000015A: 68 04 01 00 00     push        104h
  0000015F: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000162: 52                 push        edx
  00000163: E8 00 00 00 00     call        00000168
  00000168: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000016B: 03 45 F8           add         eax,dword ptr [ebp-8]
  0000016E: 0F BE 48 FF        movsx       ecx,byte ptr [eax-1]
  00000172: 83 F9 5C           cmp         ecx,5Ch
  00000175: 74 13              je          0000018A
  00000177: 8B 55 08           mov         edx,dword ptr [ebp+8]
  0000017A: 03 55 F8           add         edx,dword ptr [ebp-8]
  0000017D: C6 02 5C           mov         byte ptr [edx],5Ch
  00000180: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000183: 03 45 F8           add         eax,dword ptr [ebp-8]
  00000186: C6 40 01 00        mov         byte ptr [eax+1],0
  0000018A: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000018D: 52                 push        edx
  0000018E: 8B CD              mov         ecx,ebp
  00000190: 50                 push        eax
  00000191: 8D 15 00 00 00 00  lea         edx,[?GetCurrentFullPath@Path@@SAPADPAD@Z]
  00000197: E8 00 00 00 00     call        0000019C
  0000019C: 58                 pop         eax
  0000019D: 5A                 pop         edx
  0000019E: 83 C4 0C           add         esp,0Ch
  000001A1: 3B EC              cmp         ebp,esp
  000001A3: E8 00 00 00 00     call        000001A8
  000001A8: 8B E5              mov         esp,ebp
  000001AA: 5D                 pop         ebp
  000001AB: C3                 ret
$LN9:
  000001AC: 01 00              add         dword ptr [eax],eax
  000001AE: 00 00              add         byte ptr [eax],al
  000001B0: 00 00              add         byte ptr [eax],al
  000001B2: 00 00              add         byte ptr [eax],al
$LN8:
  000001B4: F8                 clc
  000001B5: FF
  000001B6: FF
  000001B7: FF 04 00           inc         dword ptr [eax+eax]
  000001BA: 00 00              add         byte ptr [eax],al
  000001BC: 00 00              add         byte ptr [eax],al
  000001BE: 00 00              add         byte ptr [eax],al
$LN7:
  000001C0: 6C                 ins         byte ptr [edi],dx
  000001C1: 65 6E              outs        dx,byte ptr gs:[esi]
  000001C3: 00 CC              add         ah,cl
  000001C5: CC                 int         3
  000001C6: CC                 int         3
  000001C7: CC                 int         3
  000001C8: CC                 int         3
  000001C9: CC                 int         3
  000001CA: CC                 int         3
  000001CB: CC                 int         3
  000001CC: CC                 int         3
  000001CD: CC                 int         3
  000001CE: CC                 int         3
  000001CF: CC                 int         3
?StringLengthWorkerA@@YGJPBDIPAI@Z (long __stdcall StringLengthWorkerA(char const *,unsigned int,unsigned int *)):
  000001D0: 55                 push        ebp
  000001D1: 8B EC              mov         ebp,esp
  000001D3: 83 EC 08           sub         esp,8
  000001D6: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  000001DD: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  000001E4: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
            00
  000001EB: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  000001EE: 89 45 F8           mov         dword ptr [ebp-8],eax
  000001F1: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  000001F5: 74 1E              je          00000215
  000001F7: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  000001FA: 0F BE 11           movsx       edx,byte ptr [ecx]
  000001FD: 85 D2              test        edx,edx
  000001FF: 74 14              je          00000215
  00000201: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000204: 83 C0 01           add         eax,1
  00000207: 89 45 08           mov         dword ptr [ebp+8],eax
  0000020A: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  0000020D: 83 E9 01           sub         ecx,1
  00000210: 89 4D 0C           mov         dword ptr [ebp+0Ch],ecx
  00000213: EB DC              jmp         000001F1
  00000215: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  00000219: 75 07              jne         00000222
  0000021B: C7 45 FC 57 00 07  mov         dword ptr [ebp-4],80070057h
            80
  00000222: 83 7D 10 00        cmp         dword ptr [ebp+10h],0
  00000226: 74 1C              je          00000244
  00000228: 83 7D FC 00        cmp         dword ptr [ebp-4],0
  0000022C: 7C 0D              jl          0000023B
  0000022E: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  00000231: 2B 55 0C           sub         edx,dword ptr [ebp+0Ch]
  00000234: 8B 45 10           mov         eax,dword ptr [ebp+10h]
  00000237: 89 10              mov         dword ptr [eax],edx
  00000239: EB 09              jmp         00000244
  0000023B: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  0000023E: C7 01 00 00 00 00  mov         dword ptr [ecx],offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
  00000244: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000247: 8B E5              mov         esp,ebp
  00000249: 5D                 pop         ebp
  0000024A: C2 0C 00           ret         0Ch
  0000024D: CC                 int         3
  0000024E: CC                 int         3
  0000024F: CC                 int         3
?ClearDirString@Path@@SAPADPAD@Z (public: static char * __cdecl Path::ClearDirString(char *)):
  00000250: 55                 push        ebp
  00000251: 8B EC              mov         ebp,esp
  00000253: 83 EC 0C           sub         esp,0Ch
  00000256: C7 45 F4 CC CC CC  mov         dword ptr [ebp-0Ch],0CCCCCCCCh
            CC
  0000025D: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  00000264: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000026B: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  0000026F: 74 0A              je          0000027B
  00000271: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000274: 0F BE 08           movsx       ecx,byte ptr [eax]
  00000277: 85 C9              test        ecx,ecx
  00000279: 75 08              jne         00000283
  0000027B: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000027E: E9 B6 00 00 00     jmp         00000339
  00000283: C7 45 F8 00 00 00  mov         dword ptr [ebp-8],offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
            00
  0000028A: 8D 55 F8           lea         edx,[ebp-8]
  0000028D: 52                 push        edx
  0000028E: 68 04 01 00 00     push        104h
  00000293: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000296: 50                 push        eax
  00000297: E8 00 00 00 00     call        0000029C
  0000029C: 83 7D F8 01        cmp         dword ptr [ebp-8],1
  000002A0: 72 37              jb          000002D9
  000002A2: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  000002A5: 03 4D F8           add         ecx,dword ptr [ebp-8]
  000002A8: 0F BE 51 FF        movsx       edx,byte ptr [ecx-1]
  000002AC: 83 FA 5C           cmp         edx,5Ch
  000002AF: 74 1E              je          000002CF
  000002B1: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000002B4: 03 45 F8           add         eax,dword ptr [ebp-8]
  000002B7: 0F BE 48 FF        movsx       ecx,byte ptr [eax-1]
  000002BB: 83 F9 2F           cmp         ecx,2Fh
  000002BE: 74 0F              je          000002CF
  000002C0: 8B 55 08           mov         edx,dword ptr [ebp+8]
  000002C3: 03 55 F8           add         edx,dword ptr [ebp-8]
  000002C6: 0F BE 42 FF        movsx       eax,byte ptr [edx-1]
  000002CA: 83 F8 22           cmp         eax,22h
  000002CD: 75 0A              jne         000002D9
  000002CF: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  000002D2: 03 4D F8           add         ecx,dword ptr [ebp-8]
  000002D5: C6 41 FF 00        mov         byte ptr [ecx-1],0
  000002D9: 83 7D F8 02        cmp         dword ptr [ebp-8],2
  000002DD: 72 37              jb          00000316
  000002DF: 8B 55 08           mov         edx,dword ptr [ebp+8]
  000002E2: 03 55 F8           add         edx,dword ptr [ebp-8]
  000002E5: 0F BE 42 FE        movsx       eax,byte ptr [edx-2]
  000002E9: 83 F8 5C           cmp         eax,5Ch
  000002EC: 74 1E              je          0000030C
  000002EE: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  000002F1: 03 4D F8           add         ecx,dword ptr [ebp-8]
  000002F4: 0F BE 51 FE        movsx       edx,byte ptr [ecx-2]
  000002F8: 83 FA 2F           cmp         edx,2Fh
  000002FB: 74 0F              je          0000030C
  000002FD: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000300: 03 45 F8           add         eax,dword ptr [ebp-8]
  00000303: 0F BE 48 FE        movsx       ecx,byte ptr [eax-2]
  00000307: 83 F9 22           cmp         ecx,22h
  0000030A: 75 0A              jne         00000316
  0000030C: 8B 55 08           mov         edx,dword ptr [ebp+8]
  0000030F: 03 55 F8           add         edx,dword ptr [ebp-8]
  00000312: C6 42 FE 00        mov         byte ptr [edx-2],0
  00000316: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000319: 0F BE 08           movsx       ecx,byte ptr [eax]
  0000031C: 83 F9 22           cmp         ecx,22h
  0000031F: 75 15              jne         00000336
  00000321: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000324: 83 C2 01           add         edx,1
  00000327: 52                 push        edx
  00000328: 68 04 01 00 00     push        104h
  0000032D: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000330: 50                 push        eax
  00000331: E8 00 00 00 00     call        00000336
  00000336: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000339: 52                 push        edx
  0000033A: 8B CD              mov         ecx,ebp
  0000033C: 50                 push        eax
  0000033D: 8D 15 00 00 00 00  lea         edx,[?GetCurrentFullPath@Path@@SAPADPAD@Z]
  00000343: E8 00 00 00 00     call        00000348
  00000348: 58                 pop         eax
  00000349: 5A                 pop         edx
  0000034A: 83 C4 0C           add         esp,0Ch
  0000034D: 3B EC              cmp         ebp,esp
  0000034F: E8 00 00 00 00     call        00000354
  00000354: 8B E5              mov         esp,ebp
  00000356: 5D                 pop         ebp
  00000357: C3                 ret
$LN14:
  00000358: 01 00              add         dword ptr [eax],eax
  0000035A: 00 00              add         byte ptr [eax],al
  0000035C: 00 00              add         byte ptr [eax],al
  0000035E: 00 00              add         byte ptr [eax],al
$LN13:
  00000360: F8                 clc
  00000361: FF
  00000362: FF
  00000363: FF 04 00           inc         dword ptr [eax+eax]
  00000366: 00 00              add         byte ptr [eax],al
  00000368: 00 00              add         byte ptr [eax],al
  0000036A: 00 00              add         byte ptr [eax],al
$LN12:
  0000036C: 6C                 ins         byte ptr [edi],dx
  0000036D: 65 6E              outs        dx,byte ptr gs:[esi]
  0000036F: 00 55 8B           add         byte ptr [ebp-75h],dl
  00000372: EC                 in          al,dx
  00000373: 51                 push        ecx
  00000374: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000037B: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
            00
  00000382: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  00000386: 74 08              je          00000390
  00000388: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  0000038B: 3B 45 14           cmp         eax,dword ptr [ebp+14h]
  0000038E: 76 07              jbe         00000397
  00000390: C7 45 FC 57 00 07  mov         dword ptr [ebp-4],80070057h
            80
  00000397: 83 7D 10 00        cmp         dword ptr [ebp+10h],0
  0000039B: 74 25              je          000003C2
  0000039D: 83 7D FC 00        cmp         dword ptr [ebp-4],0
  000003A1: 7C 16              jl          000003B9
  000003A3: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  000003A6: 51                 push        ecx
  000003A7: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  000003AA: 52                 push        edx
  000003AB: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000003AE: 50                 push        eax
  000003AF: E8 00 00 00 00     call        000003B4
  000003B4: 89 45 FC           mov         dword ptr [ebp-4],eax
  000003B7: EB 09              jmp         000003C2
  000003B9: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  000003BC: C7 01 00 00 00 00  mov         dword ptr [ecx],offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
  000003C2: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000003C5: 83 C4 04           add         esp,4
  000003C8: 3B EC              cmp         ebp,esp
  000003CA: E8 00 00 00 00     call        000003CF
  000003CF: 8B E5              mov         esp,ebp
  000003D1: 5D                 pop         ebp
  000003D2: C2 10 00           ret         10h
  000003D5: CC                 int         3
  000003D6: CC                 int         3
  000003D7: CC                 int         3
  000003D8: CC                 int         3
  000003D9: CC                 int         3
  000003DA: CC                 int         3
  000003DB: CC                 int         3
  000003DC: CC                 int         3
  000003DD: CC                 int         3
  000003DE: CC                 int         3
  000003DF: CC                 int         3
?StringCopyWorkerA@@YGJPADIPAIPBDI@Z (long __stdcall StringCopyWorkerA(char *,unsigned int,unsigned int *,char const *,unsigned int)):
  000003E0: 55                 push        ebp
  000003E1: 8B EC              mov         ebp,esp
  000003E3: 83 EC 08           sub         esp,8
  000003E6: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  000003ED: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  000003F4: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
            00
  000003FB: C7 45 F8 00 00 00  mov         dword ptr [ebp-8],offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
            00
  00000402: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  00000406: 74 49              je          00000451
  00000408: 83 7D 18 00        cmp         dword ptr [ebp+18h],0
  0000040C: 74 43              je          00000451
  0000040E: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  00000411: 0F BE 08           movsx       ecx,byte ptr [eax]
  00000414: 85 C9              test        ecx,ecx
  00000416: 74 39              je          00000451
  00000418: 8B 55 08           mov         edx,dword ptr [ebp+8]
  0000041B: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  0000041E: 8A 08              mov         cl,byte ptr [eax]
  00000420: 88 0A              mov         byte ptr [edx],cl
  00000422: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000425: 83 C2 01           add         edx,1
  00000428: 89 55 08           mov         dword ptr [ebp+8],edx
  0000042B: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  0000042E: 83 C0 01           add         eax,1
  00000431: 89 45 14           mov         dword ptr [ebp+14h],eax
  00000434: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000437: 83 E9 01           sub         ecx,1
  0000043A: 89 4D 0C           mov         dword ptr [ebp+0Ch],ecx
  0000043D: 8B 55 18           mov         edx,dword ptr [ebp+18h]
  00000440: 83 EA 01           sub         edx,1
  00000443: 89 55 18           mov         dword ptr [ebp+18h],edx
  00000446: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  00000449: 83 C0 01           add         eax,1
  0000044C: 89 45 F8           mov         dword ptr [ebp-8],eax
  0000044F: EB B1              jmp         00000402
  00000451: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  00000455: 75 19              jne         00000470
  00000457: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000045A: 83 E9 01           sub         ecx,1
  0000045D: 89 4D 08           mov         dword ptr [ebp+8],ecx
  00000460: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  00000463: 83 EA 01           sub         edx,1
  00000466: 89 55 F8           mov         dword ptr [ebp-8],edx
  00000469: C7 45 FC 7A 00 07  mov         dword ptr [ebp-4],8007007Ah
            80
  00000470: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000473: C6 00 00           mov         byte ptr [eax],0
  00000476: 83 7D 10 00        cmp         dword ptr [ebp+10h],0
  0000047A: 74 08              je          00000484
  0000047C: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  0000047F: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  00000482: 89 11              mov         dword ptr [ecx],edx
  00000484: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000487: 8B E5              mov         esp,ebp
  00000489: 5D                 pop         ebp
  0000048A: C2 14 00           ret         14h
  0000048D: CC                 int         3
  0000048E: CC                 int         3
  0000048F: CC                 int         3
?GetDirectory@Path@@SAPADPAD@Z (public: static char * __cdecl Path::GetDirectory(char *)):
  00000490: 55                 push        ebp
  00000491: 8B EC              mov         ebp,esp
  00000493: 51                 push        ecx
  00000494: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000049B: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  0000049F: 74 0A              je          000004AB
  000004A1: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000004A4: 0F BE 08           movsx       ecx,byte ptr [eax]
  000004A7: 85 C9              test        ecx,ecx
  000004A9: 75 05              jne         000004B0
  000004AB: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000004AE: EB 4C              jmp         000004FC
  000004B0: 6A 5C              push        5Ch
  000004B2: 8B 55 08           mov         edx,dword ptr [ebp+8]
  000004B5: 52                 push        edx
  000004B6: E8 00 00 00 00     call        000004BB
  000004BB: 83 C4 08           add         esp,8
  000004BE: 89 45 FC           mov         dword ptr [ebp-4],eax
  000004C1: 83 7D FC 00        cmp         dword ptr [ebp-4],0
  000004C5: 75 11              jne         000004D8
  000004C7: 6A 2F              push        2Fh
  000004C9: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000004CC: 50                 push        eax
  000004CD: E8 00 00 00 00     call        000004D2
  000004D2: 83 C4 08           add         esp,8
  000004D5: 89 45 FC           mov         dword ptr [ebp-4],eax
  000004D8: 83 7D FC 00        cmp         dword ptr [ebp-4],0
  000004DC: 74 08              je          000004E6
  000004DE: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000004E1: C6 01 00           mov         byte ptr [ecx],0
  000004E4: EB 13              jmp         000004F9
  000004E6: 68 00 00 00 00     push        offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
  000004EB: 68 04 01 00 00     push        104h
  000004F0: 8B 55 08           mov         edx,dword ptr [ebp+8]
  000004F3: 52                 push        edx
  000004F4: E8 00 00 00 00     call        000004F9
  000004F9: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000004FC: 83 C4 04           add         esp,4
  000004FF: 3B EC              cmp         ebp,esp
  00000501: E8 00 00 00 00     call        00000506
  00000506: 8B E5              mov         esp,ebp
  00000508: 5D                 pop         ebp
  00000509: C3                 ret
  0000050A: CC                 int         3
  0000050B: CC                 int         3
  0000050C: CC                 int         3
  0000050D: CC                 int         3
  0000050E: CC                 int         3
  0000050F: CC                 int         3
?GetFileName@Path@@SAPADPAD@Z (public: static char * __cdecl Path::GetFileName(char *)):
  00000510: 55                 push        ebp
  00000511: 8B EC              mov         ebp,esp
  00000513: 51                 push        ecx
  00000514: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000051B: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  0000051F: 74 0A              je          0000052B
  00000521: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000524: 0F BE 08           movsx       ecx,byte ptr [eax]
  00000527: 85 C9              test        ecx,ecx
  00000529: 75 05              jne         00000530
  0000052B: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000052E: EB 46              jmp         00000576
  00000530: 6A 5C              push        5Ch
  00000532: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000535: 52                 push        edx
  00000536: E8 00 00 00 00     call        0000053B
  0000053B: 83 C4 08           add         esp,8
  0000053E: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000541: 83 7D FC 00        cmp         dword ptr [ebp-4],0
  00000545: 75 11              jne         00000558
  00000547: 6A 2F              push        2Fh
  00000549: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000054C: 50                 push        eax
  0000054D: E8 00 00 00 00     call        00000552
  00000552: 83 C4 08           add         esp,8
  00000555: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000558: 83 7D FC 00        cmp         dword ptr [ebp-4],0
  0000055C: 74 15              je          00000573
  0000055E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000561: 83 C1 01           add         ecx,1
  00000564: 51                 push        ecx
  00000565: 68 04 01 00 00     push        104h
  0000056A: 8B 55 08           mov         edx,dword ptr [ebp+8]
  0000056D: 52                 push        edx
  0000056E: E8 00 00 00 00     call        00000573
  00000573: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000576: 83 C4 04           add         esp,4
  00000579: 3B EC              cmp         ebp,esp
  0000057B: E8 00 00 00 00     call        00000580
  00000580: 8B E5              mov         esp,ebp
  00000582: 5D                 pop         ebp
  00000583: C3                 ret
  00000584: CC                 int         3
  00000585: CC                 int         3
  00000586: CC                 int         3
  00000587: CC                 int         3
  00000588: CC                 int         3
  00000589: CC                 int         3
  0000058A: CC                 int         3
  0000058B: CC                 int         3
  0000058C: CC                 int         3
  0000058D: CC                 int         3
  0000058E: CC                 int         3
  0000058F: CC                 int         3
?ChangeSlashToBackSlash@Path@@SAPADPAD@Z (public: static char * __cdecl Path::ChangeSlashToBackSlash(char *)):
  00000590: 55                 push        ebp
  00000591: 8B EC              mov         ebp,esp
  00000593: 83 EC 10           sub         esp,10h
  00000596: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000059B: 89 45 F0           mov         dword ptr [ebp-10h],eax
  0000059E: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  000005A1: 89 45 F8           mov         dword ptr [ebp-8],eax
  000005A4: 89 45 FC           mov         dword ptr [ebp-4],eax
  000005A7: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  000005AB: 74 0A              je          000005B7
  000005AD: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000005B0: 0F BE 08           movsx       ecx,byte ptr [eax]
  000005B3: 85 C9              test        ecx,ecx
  000005B5: 75 05              jne         000005BC
  000005B7: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000005BA: EB 4F              jmp         0000060B
  000005BC: C7 45 F8 00 00 00  mov         dword ptr [ebp-8],offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
            00
  000005C3: 8D 55 F8           lea         edx,[ebp-8]
  000005C6: 52                 push        edx
  000005C7: 68 04 01 00 00     push        104h
  000005CC: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000005CF: 50                 push        eax
  000005D0: E8 00 00 00 00     call        000005D5
  000005D5: C7 45 F0 00 00 00  mov         dword ptr [ebp-10h],offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
            00
  000005DC: EB 09              jmp         000005E7
  000005DE: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  000005E1: 83 C1 01           add         ecx,1
  000005E4: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  000005E7: 8B 55 F0           mov         edx,dword ptr [ebp-10h]
  000005EA: 3B 55 F8           cmp         edx,dword ptr [ebp-8]
  000005ED: 73 19              jae         00000608
  000005EF: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000005F2: 03 45 F0           add         eax,dword ptr [ebp-10h]
  000005F5: 0F BE 08           movsx       ecx,byte ptr [eax]
  000005F8: 83 F9 2F           cmp         ecx,2Fh
  000005FB: 75 09              jne         00000606
  000005FD: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000600: 03 55 F0           add         edx,dword ptr [ebp-10h]
  00000603: C6 02 5C           mov         byte ptr [edx],5Ch
  00000606: EB D6              jmp         000005DE
  00000608: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000060B: 52                 push        edx
  0000060C: 8B CD              mov         ecx,ebp
  0000060E: 50                 push        eax
  0000060F: 8D 15 00 00 00 00  lea         edx,[?GetCurrentFullPath@Path@@SAPADPAD@Z]
  00000615: E8 00 00 00 00     call        0000061A
  0000061A: 58                 pop         eax
  0000061B: 5A                 pop         edx
  0000061C: 83 C4 10           add         esp,10h
  0000061F: 3B EC              cmp         ebp,esp
  00000621: E8 00 00 00 00     call        00000626
  00000626: 8B E5              mov         esp,ebp
  00000628: 5D                 pop         ebp
  00000629: C3                 ret
  0000062A: 8B FF              mov         edi,edi
$LN11:
  0000062C: 01 00              add         dword ptr [eax],eax
  0000062E: 00 00              add         byte ptr [eax],al
  00000630: 00 00              add         byte ptr [eax],al
  00000632: 00 00              add         byte ptr [eax],al
$LN10:
  00000634: F8                 clc
  00000635: FF
  00000636: FF
  00000637: FF 04 00           inc         dword ptr [eax+eax]
  0000063A: 00 00              add         byte ptr [eax],al
  0000063C: 00 00              add         byte ptr [eax],al
  0000063E: 00 00              add         byte ptr [eax],al
$LN9:
  00000640: 6C                 ins         byte ptr [edi],dx
  00000641: 65 6E              outs        dx,byte ptr gs:[esi]
  00000643: 00 CC              add         ah,cl
  00000645: CC                 int         3
  00000646: CC                 int         3
  00000647: CC                 int         3
  00000648: CC                 int         3
  00000649: CC                 int         3
  0000064A: CC                 int         3
  0000064B: CC                 int         3
  0000064C: CC                 int         3
  0000064D: CC                 int         3
  0000064E: CC                 int         3
  0000064F: CC                 int         3
?ChangeBackSlashToSlash@Path@@SAPADPAD@Z (public: static char * __cdecl Path::ChangeBackSlashToSlash(char *)):
  00000650: 55                 push        ebp
  00000651: 8B EC              mov         ebp,esp
  00000653: 83 EC 10           sub         esp,10h
  00000656: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000065B: 89 45 F0           mov         dword ptr [ebp-10h],eax
  0000065E: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000661: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000664: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000667: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  0000066B: 74 0A              je          00000677
  0000066D: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000670: 0F BE 08           movsx       ecx,byte ptr [eax]
  00000673: 85 C9              test        ecx,ecx
  00000675: 75 05              jne         0000067C
  00000677: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000067A: EB 4F              jmp         000006CB
  0000067C: C7 45 F8 00 00 00  mov         dword ptr [ebp-8],offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
            00
  00000683: 8D 55 F8           lea         edx,[ebp-8]
  00000686: 52                 push        edx
  00000687: 68 04 01 00 00     push        104h
  0000068C: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000068F: 50                 push        eax
  00000690: E8 00 00 00 00     call        00000695
  00000695: C7 45 F0 00 00 00  mov         dword ptr [ebp-10h],offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
            00
  0000069C: EB 09              jmp         000006A7
  0000069E: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  000006A1: 83 C1 01           add         ecx,1
  000006A4: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  000006A7: 8B 55 F0           mov         edx,dword ptr [ebp-10h]
  000006AA: 3B 55 F8           cmp         edx,dword ptr [ebp-8]
  000006AD: 73 19              jae         000006C8
  000006AF: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000006B2: 03 45 F0           add         eax,dword ptr [ebp-10h]
  000006B5: 0F BE 08           movsx       ecx,byte ptr [eax]
  000006B8: 83 F9 5C           cmp         ecx,5Ch
  000006BB: 75 09              jne         000006C6
  000006BD: 8B 55 08           mov         edx,dword ptr [ebp+8]
  000006C0: 03 55 F0           add         edx,dword ptr [ebp-10h]
  000006C3: C6 02 2F           mov         byte ptr [edx],2Fh
  000006C6: EB D6              jmp         0000069E
  000006C8: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000006CB: 52                 push        edx
  000006CC: 8B CD              mov         ecx,ebp
  000006CE: 50                 push        eax
  000006CF: 8D 15 00 00 00 00  lea         edx,[?GetCurrentFullPath@Path@@SAPADPAD@Z]
  000006D5: E8 00 00 00 00     call        000006DA
  000006DA: 58                 pop         eax
  000006DB: 5A                 pop         edx
  000006DC: 83 C4 10           add         esp,10h
  000006DF: 3B EC              cmp         ebp,esp
  000006E1: E8 00 00 00 00     call        000006E6
  000006E6: 8B E5              mov         esp,ebp
  000006E8: 5D                 pop         ebp
  000006E9: C3                 ret
  000006EA: 8B FF              mov         edi,edi
$LN11:
  000006EC: 01 00              add         dword ptr [eax],eax
  000006EE: 00 00              add         byte ptr [eax],al
  000006F0: 00 00              add         byte ptr [eax],al
  000006F2: 00 00              add         byte ptr [eax],al
$LN10:
  000006F4: F8                 clc
  000006F5: FF
  000006F6: FF
  000006F7: FF 04 00           inc         dword ptr [eax+eax]
  000006FA: 00 00              add         byte ptr [eax],al
  000006FC: 00 00              add         byte ptr [eax],al
  000006FE: 00 00              add         byte ptr [eax],al
$LN9:
  00000700: 6C                 ins         byte ptr [edi],dx
  00000701: 65 6E              outs        dx,byte ptr gs:[esi]
  00000703: 00 CC              add         ah,cl
  00000705: CC                 int         3
  00000706: CC                 int         3
  00000707: CC                 int         3
  00000708: CC                 int         3
  00000709: CC                 int         3
  0000070A: CC                 int         3
  0000070B: CC                 int         3
  0000070C: CC                 int         3
  0000070D: CC                 int         3
  0000070E: CC                 int         3
  0000070F: CC                 int         3
?ReadFileLastLine@Path@@SAHPAD0@Z (public: static int __cdecl Path::ReadFileLastLine(char *,char *)):
  00000710: 55                 push        ebp
  00000711: 8B EC              mov         ebp,esp
  00000713: 6A FF              push        0FFh
  00000715: 68 00 00 00 00     push        offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
  0000071A: 64 A1 00 00 00 00  mov         eax,fs:[?GetCurrentFullPath@Path@@SAPADPAD@Z]
  00000720: 50                 push        eax
  00000721: 81 EC B8 04 00 00  sub         esp,4B8h
  00000727: 57                 push        edi
  00000728: 8D BD 3C FB FF FF  lea         edi,[ebp-4C4h]
  0000072E: B9 2E 01 00 00     mov         ecx,12Eh
  00000733: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000738: F3 AB              rep stos    dword ptr [edi]
  0000073A: A1 00 00 00 00     mov         eax,[?GetCurrentFullPath@Path@@SAPADPAD@Z]
  0000073F: 33 C5              xor         eax,ebp
  00000741: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000744: 50                 push        eax
  00000745: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000748: 64 A3 00 00 00 00  mov         fs:[?GetCurrentFullPath@Path@@SAPADPAD@Z],eax
  0000074E: 6A 01              push        1
  00000750: 6A 40              push        40h
  00000752: 6A 21              push        21h
  00000754: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000757: 50                 push        eax
  00000758: 8D 8D 60 FF FF FF  lea         ecx,[ebp-0A0h]
  0000075E: E8 00 00 00 00     call        00000763
  00000763: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
            00
  0000076A: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  0000076E: 74 22              je          00000792
  00000770: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  00000774: 74 1C              je          00000792
  00000776: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000779: 0F BE 11           movsx       edx,byte ptr [ecx]
  0000077C: 85 D2              test        edx,edx
  0000077E: 74 12              je          00000792
  00000780: 8D 8D 60 FF FF FF  lea         ecx,[ebp-0A0h]
  00000786: E8 00 00 00 00     call        0000078B
  0000078B: 0F B6 C0           movzx       eax,al
  0000078E: 85 C0              test        eax,eax
  00000790: 75 27              jne         000007B9
  00000792: C7 85 44 FB FF FF  mov         dword ptr [ebp-4BCh],offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
            00 00 00 00
  0000079C: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000007A3: 8D 8D 60 FF FF FF  lea         ecx,[ebp-0A0h]
  000007A9: E8 00 00 00 00     call        000007AE
  000007AE: 8B 85 44 FB FF FF  mov         eax,dword ptr [ebp-4BCh]
  000007B4: E9 0E 01 00 00     jmp         000008C7
  000007B9: C7 85 54 FF FF FF  mov         dword ptr [ebp-0ACh],offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
            00 00 00 00
  000007C3: 8B 8D 60 FF FF FF  mov         ecx,dword ptr [ebp-0A0h]
  000007C9: 8B 51 04           mov         edx,dword ptr [ecx+4]
  000007CC: 8D 8C 15 60 FF FF  lea         ecx,[ebp+edx-0A0h]
            FF
  000007D3: E8 00 00 00 00     call        000007D8
  000007D8: 0F B6 C0           movzx       eax,al
  000007DB: 85 C0              test        eax,eax
  000007DD: 75 79              jne         00000858
  000007DF: C6 85 4C FB FF FF  mov         byte ptr [ebp-4B4h],0
            00
  000007E6: 68 FF 03 00 00     push        3FFh
  000007EB: 6A 00              push        0
  000007ED: 8D 8D 4D FB FF FF  lea         ecx,[ebp-4B3h]
  000007F3: 51                 push        ecx
  000007F4: E8 00 00 00 00     call        000007F9
  000007F9: 83 C4 0C           add         esp,0Ch
  000007FC: 68 00 04 00 00     push        400h
  00000801: 8D 95 4C FB FF FF  lea         edx,[ebp-4B4h]
  00000807: 52                 push        edx
  00000808: 8D 8D 60 FF FF FF  lea         ecx,[ebp-0A0h]
  0000080E: E8 00 00 00 00     call        00000813
  00000813: C7 85 54 FF FF FF  mov         dword ptr [ebp-0ACh],offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
            00 00 00 00
  0000081D: 8D 85 54 FF FF FF  lea         eax,[ebp-0ACh]
  00000823: 50                 push        eax
  00000824: 68 00 04 00 00     push        400h
  00000829: 8D 8D 4C FB FF FF  lea         ecx,[ebp-4B4h]
  0000082F: 51                 push        ecx
  00000830: E8 00 00 00 00     call        00000835
  00000835: 83 BD 54 FF FF FF  cmp         dword ptr [ebp-0ACh],1
            01
  0000083C: 76 15              jbe         00000853
  0000083E: 8D 95 4C FB FF FF  lea         edx,[ebp-4B4h]
  00000844: 52                 push        edx
  00000845: 68 00 04 00 00     push        400h
  0000084A: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  0000084D: 50                 push        eax
  0000084E: E8 00 00 00 00     call        00000853
  00000853: E9 6B FF FF FF     jmp         000007C3
  00000858: 8D 8D 60 FF FF FF  lea         ecx,[ebp-0A0h]
  0000085E: E8 00 00 00 00     call        00000863
  00000863: 8D 8D 54 FF FF FF  lea         ecx,[ebp-0ACh]
  00000869: 51                 push        ecx
  0000086A: 68 00 04 00 00     push        400h
  0000086F: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  00000872: 52                 push        edx
  00000873: E8 00 00 00 00     call        00000878
  00000878: 83 BD 54 FF FF FF  cmp         dword ptr [ebp-0ACh],1
            01
  0000087F: 76 24              jbe         000008A5
  00000881: C7 85 40 FB FF FF  mov         dword ptr [ebp-4C0h],1
            01 00 00 00
  0000088B: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000892: 8D 8D 60 FF FF FF  lea         ecx,[ebp-0A0h]
  00000898: E8 00 00 00 00     call        0000089D
  0000089D: 8B 85 40 FB FF FF  mov         eax,dword ptr [ebp-4C0h]
  000008A3: EB 22              jmp         000008C7
  000008A5: C7 85 3C FB FF FF  mov         dword ptr [ebp-4C4h],offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
            00 00 00 00
  000008AF: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000008B6: 8D 8D 60 FF FF FF  lea         ecx,[ebp-0A0h]
  000008BC: E8 00 00 00 00     call        000008C1
  000008C1: 8B 85 3C FB FF FF  mov         eax,dword ptr [ebp-4C4h]
  000008C7: 52                 push        edx
  000008C8: 8B CD              mov         ecx,ebp
  000008CA: 50                 push        eax
  000008CB: 8D 15 00 00 00 00  lea         edx,[?GetCurrentFullPath@Path@@SAPADPAD@Z]
  000008D1: E8 00 00 00 00     call        000008D6
  000008D6: 58                 pop         eax
  000008D7: 5A                 pop         edx
  000008D8: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  000008DB: 64 89 0D 00 00 00  mov         dword ptr fs:[?GetCurrentFullPath@Path@@SAPADPAD@Z],ecx
            00
  000008E2: 59                 pop         ecx
  000008E3: 5F                 pop         edi
  000008E4: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  000008E7: 33 CD              xor         ecx,ebp
  000008E9: E8 00 00 00 00     call        000008EE
  000008EE: 81 C4 C4 04 00 00  add         esp,4C4h
  000008F4: 3B EC              cmp         ebp,esp
  000008F6: E8 00 00 00 00     call        000008FB
  000008FB: 8B E5              mov         esp,ebp
  000008FD: 5D                 pop         ebp
  000008FE: C3                 ret
  000008FF: 90                 nop
$LN15:
  00000900: 03 00              add         eax,dword ptr [eax]
  00000902: 00 00              add         byte ptr [eax],al
  00000904: 00 00              add         byte ptr [eax],al
  00000906: 00 00              add         byte ptr [eax],al
$LN14:
  00000908: 60                 pushad
  00000909: FF
  0000090A: FF
  0000090B: FF 8C 00 00 00 00  dec         dword ptr ?GetCurrentFullPath@Path@@SAPADPAD@Z[eax+eax]
            00
  00000912: 00 00              add         byte ptr [eax],al
  00000914: 54                 push        esp
  00000915: FF
  00000916: FF
  00000917: FF 04 00           inc         dword ptr [eax+eax]
  0000091A: 00 00              add         byte ptr [eax],al
  0000091C: 00 00              add         byte ptr [eax],al
  0000091E: 00 00              add         byte ptr [eax],al
  00000920: 4C                 dec         esp
  00000921: FB                 sti
  00000922: FF
  00000923: FF 00              inc         dword ptr [eax]
  00000925: 04 00              add         al,0
  00000927: 00 00              add         byte ptr [eax],al
  00000929: 00 00              add         byte ptr [eax],al
  0000092B: 00 62 75           add         byte ptr [edx+75h],ah
  0000092E: 66
  0000092F: 66 65 72 00        jb          $LN11
$LN11:
  00000933: 6C                 ins         byte ptr [edi],dx
  00000934: 65 6E              outs        dx,byte ptr gs:[esi]
  00000936: 00 73 74           add         byte ptr [ebx+74h],dh
  00000939: 72 65              jb          000009A0
  0000093B: 61                 popad
  0000093C: 6D                 ins         dword ptr [edi],dx
  0000093D: 00 CC              add         ah,cl
  0000093F: CC                 int         3
?WriteNewFile@Path@@SAHPAD0H@Z (public: static int __cdecl Path::WriteNewFile(char *,char *,int)):
  00000940: 55                 push        ebp
  00000941: 8B EC              mov         ebp,esp
  00000943: 6A FF              push        0FFh
  00000945: 68 00 00 00 00     push        offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
  0000094A: 64 A1 00 00 00 00  mov         eax,fs:[?GetCurrentFullPath@Path@@SAPADPAD@Z]
  00000950: 50                 push        eax
  00000951: 81 EC 98 00 00 00  sub         esp,98h
  00000957: 57                 push        edi
  00000958: 8D BD 5C FF FF FF  lea         edi,[ebp-0A4h]
  0000095E: B9 26 00 00 00     mov         ecx,26h
  00000963: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000968: F3 AB              rep stos    dword ptr [edi]
  0000096A: A1 00 00 00 00     mov         eax,[?GetCurrentFullPath@Path@@SAPADPAD@Z]
  0000096F: 33 C5              xor         eax,ebp
  00000971: 50                 push        eax
  00000972: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000975: 64 A3 00 00 00 00  mov         fs:[?GetCurrentFullPath@Path@@SAPADPAD@Z],eax
  0000097B: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  0000097F: 74 06              je          00000987
  00000981: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  00000985: 75 07              jne         0000098E
  00000987: 33 C0              xor         eax,eax
  00000989: E9 A1 00 00 00     jmp         00000A2F
  0000098E: 6A 01              push        1
  00000990: 6A 40              push        40h
  00000992: 6A 32              push        32h
  00000994: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000997: 50                 push        eax
  00000998: 8D 8D 68 FF FF FF  lea         ecx,[ebp-98h]
  0000099E: E8 00 00 00 00     call        000009A3
  000009A3: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
            00
  000009AA: 8D 8D 68 FF FF FF  lea         ecx,[ebp-98h]
  000009B0: E8 00 00 00 00     call        000009B5
  000009B5: 0F B6 C8           movzx       ecx,al
  000009B8: 85 C9              test        ecx,ecx
  000009BA: 75 24              jne         000009E0
  000009BC: C7 85 60 FF FF FF  mov         dword ptr [ebp-0A0h],offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
            00 00 00 00
  000009C6: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000009CD: 8D 8D 68 FF FF FF  lea         ecx,[ebp-98h]
  000009D3: E8 00 00 00 00     call        000009D8
  000009D8: 8B 85 60 FF FF FF  mov         eax,dword ptr [ebp-0A0h]
  000009DE: EB 4F              jmp         00000A2F
  000009E0: 6A 02              push        2
  000009E2: 6A 00              push        0
  000009E4: 8D 8D 68 FF FF FF  lea         ecx,[ebp-98h]
  000009EA: E8 00 00 00 00     call        000009EF
  000009EF: 8B 55 10           mov         edx,dword ptr [ebp+10h]
  000009F2: 52                 push        edx
  000009F3: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  000009F6: 50                 push        eax
  000009F7: 8D 8D 68 FF FF FF  lea         ecx,[ebp-98h]
  000009FD: E8 00 00 00 00     call        00000A02
  00000A02: 8D 8D 68 FF FF FF  lea         ecx,[ebp-98h]
  00000A08: E8 00 00 00 00     call        00000A0D
  00000A0D: C7 85 5C FF FF FF  mov         dword ptr [ebp-0A4h],1
            01 00 00 00
  00000A17: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000A1E: 8D 8D 68 FF FF FF  lea         ecx,[ebp-98h]
  00000A24: E8 00 00 00 00     call        00000A29
  00000A29: 8B 85 5C FF FF FF  mov         eax,dword ptr [ebp-0A4h]
  00000A2F: 52                 push        edx
  00000A30: 8B CD              mov         ecx,ebp
  00000A32: 50                 push        eax
  00000A33: 8D 15 00 00 00 00  lea         edx,[?GetCurrentFullPath@Path@@SAPADPAD@Z]
  00000A39: E8 00 00 00 00     call        00000A3E
  00000A3E: 58                 pop         eax
  00000A3F: 5A                 pop         edx
  00000A40: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000A43: 64 89 0D 00 00 00  mov         dword ptr fs:[?GetCurrentFullPath@Path@@SAPADPAD@Z],ecx
            00
  00000A4A: 59                 pop         ecx
  00000A4B: 5F                 pop         edi
  00000A4C: 81 C4 A4 00 00 00  add         esp,0A4h
  00000A52: 3B EC              cmp         ebp,esp
  00000A54: E8 00 00 00 00     call        00000A59
  00000A59: 8B E5              mov         esp,ebp
  00000A5B: 5D                 pop         ebp
  00000A5C: C3                 ret
  00000A5D: 8D 49 00           lea         ecx,[ecx]
$LN10:
  00000A60: 01 00              add         dword ptr [eax],eax
  00000A62: 00 00              add         byte ptr [eax],al
  00000A64: 00 00              add         byte ptr [eax],al
  00000A66: 00 00              add         byte ptr [eax],al
$LN9:
  00000A68: 68 FF FF FF 88     push        88FFFFFFh
  00000A6D: 00 00              add         byte ptr [eax],al
  00000A6F: 00 00              add         byte ptr [eax],al
  00000A71: 00 00              add         byte ptr [eax],al
  00000A73: 00 73 74           add         byte ptr [ebx+74h],dh
  00000A76: 72 65              jb          00000ADD
  00000A78: 61                 popad
  00000A79: 6D                 ins         dword ptr [edi],dx
  00000A7A: 00 CC              add         ah,cl
  00000A7C: CC                 int         3
  00000A7D: CC                 int         3
  00000A7E: CC                 int         3
  00000A7F: CC                 int         3
?CreateDirectorys@Path@@SAHPADH@Z (public: static int __cdecl Path::CreateDirectorys(char *,int)):
  00000A80: 55                 push        ebp
  00000A81: 8B EC              mov         ebp,esp
  00000A83: 81 EC 28 02 00 00  sub         esp,228h
  00000A89: 56                 push        esi
  00000A8A: 57                 push        edi
  00000A8B: 8D BD D8 FD FF FF  lea         edi,[ebp-228h]
  00000A91: B9 8A 00 00 00     mov         ecx,8Ah
  00000A96: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000A9B: F3 AB              rep stos    dword ptr [edi]
  00000A9D: A1 00 00 00 00     mov         eax,[?GetCurrentFullPath@Path@@SAPADPAD@Z]
  00000AA2: 33 C5              xor         eax,ebp
  00000AA4: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000AA7: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  00000AAB: 74 0A              je          00000AB7
  00000AAD: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000AB0: 0F BE 08           movsx       ecx,byte ptr [eax]
  00000AB3: 85 C9              test        ecx,ecx
  00000AB5: 75 07              jne         00000ABE
  00000AB7: 33 C0              xor         eax,eax
  00000AB9: E9 53 01 00 00     jmp         00000C11
  00000ABE: C6 85 F4 FE FF FF  mov         byte ptr [ebp-10Ch],0
            00
  00000AC5: 68 03 01 00 00     push        103h
  00000ACA: 6A 00              push        0
  00000ACC: 8D 95 F5 FE FF FF  lea         edx,[ebp-10Bh]
  00000AD2: 52                 push        edx
  00000AD3: E8 00 00 00 00     call        00000AD8
  00000AD8: 83 C4 0C           add         esp,0Ch
  00000ADB: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000ADE: 50                 push        eax
  00000ADF: 68 04 01 00 00     push        104h
  00000AE4: 8D 8D F4 FE FF FF  lea         ecx,[ebp-10Ch]
  00000AEA: 51                 push        ecx
  00000AEB: E8 00 00 00 00     call        00000AF0
  00000AF0: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  00000AF4: 74 0F              je          00000B05
  00000AF6: 8D 95 F4 FE FF FF  lea         edx,[ebp-10Ch]
  00000AFC: 52                 push        edx
  00000AFD: E8 00 00 00 00     call        00000B02
  00000B02: 83 C4 04           add         esp,4
  00000B05: 8B F4              mov         esi,esp
  00000B07: 6A 00              push        0
  00000B09: 8D 85 F4 FE FF FF  lea         eax,[ebp-10Ch]
  00000B0F: 50                 push        eax
  00000B10: FF 15 00 00 00 00  call        dword ptr [?GetCurrentFullPath@Path@@SAPADPAD@Z]
  00000B16: 3B F4              cmp         esi,esp
  00000B18: E8 00 00 00 00     call        00000B1D
  00000B1D: 89 85 EC FE FF FF  mov         dword ptr [ebp-114h],eax
  00000B23: 83 BD EC FE FF FF  cmp         dword ptr [ebp-114h],0
            00
  00000B2A: 0F 85 DB 00 00 00  jne         00000C0B
  00000B30: C6 85 E4 FD FF FF  mov         byte ptr [ebp-21Ch],0
            00
  00000B37: 68 03 01 00 00     push        103h
  00000B3C: 6A 00              push        0
  00000B3E: 8D 8D E5 FD FF FF  lea         ecx,[ebp-21Bh]
  00000B44: 51                 push        ecx
  00000B45: E8 00 00 00 00     call        00000B4A
  00000B4A: 83 C4 0C           add         esp,0Ch
  00000B4D: 8D 95 F4 FE FF FF  lea         edx,[ebp-10Ch]
  00000B53: 52                 push        edx
  00000B54: 68 04 01 00 00     push        104h
  00000B59: 8D 85 E4 FD FF FF  lea         eax,[ebp-21Ch]
  00000B5F: 50                 push        eax
  00000B60: E8 00 00 00 00     call        00000B65
  00000B65: C7 85 DC FD FF FF  mov         dword ptr [ebp-224h],offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
            00 00 00 00
  00000B6F: 6A 5C              push        5Ch
  00000B71: 8D 8D E4 FD FF FF  lea         ecx,[ebp-21Ch]
  00000B77: 51                 push        ecx
  00000B78: E8 00 00 00 00     call        00000B7D
  00000B7D: 83 C4 08           add         esp,8
  00000B80: 89 85 DC FD FF FF  mov         dword ptr [ebp-224h],eax
  00000B86: C7 85 D8 FD FF FF  mov         dword ptr [ebp-228h],offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
            00 00 00 00
  00000B90: 6A 5C              push        5Ch
  00000B92: 8D 95 E4 FD FF FF  lea         edx,[ebp-21Ch]
  00000B98: 52                 push        edx
  00000B99: E8 00 00 00 00     call        00000B9E
  00000B9E: 83 C4 08           add         esp,8
  00000BA1: 89 85 D8 FD FF FF  mov         dword ptr [ebp-228h],eax
  00000BA7: 83 BD DC FD FF FF  cmp         dword ptr [ebp-224h],0
            00
  00000BAE: 74 17              je          00000BC7
  00000BB0: 83 BD D8 FD FF FF  cmp         dword ptr [ebp-228h],0
            00
  00000BB7: 74 0E              je          00000BC7
  00000BB9: 8B 85 DC FD FF FF  mov         eax,dword ptr [ebp-224h]
  00000BBF: 3B 85 D8 FD FF FF  cmp         eax,dword ptr [ebp-228h]
  00000BC5: 75 04              jne         00000BCB
  00000BC7: 33 C0              xor         eax,eax
  00000BC9: EB 46              jmp         00000C11
  00000BCB: 8B 8D DC FD FF FF  mov         ecx,dword ptr [ebp-224h]
  00000BD1: C6 01 00           mov         byte ptr [ecx],0
  00000BD4: 6A 00              push        0
  00000BD6: 8D 95 E4 FD FF FF  lea         edx,[ebp-21Ch]
  00000BDC: 52                 push        edx
  00000BDD: E8 00 00 00 00     call        00000BE2
  00000BE2: 83 C4 08           add         esp,8
  00000BE5: 85 C0              test        eax,eax
  00000BE7: 75 04              jne         00000BED
  00000BE9: 33 C0              xor         eax,eax
  00000BEB: EB 24              jmp         00000C11
  00000BED: 8B F4              mov         esi,esp
  00000BEF: 6A 00              push        0
  00000BF1: 8D 85 F4 FE FF FF  lea         eax,[ebp-10Ch]
  00000BF7: 50                 push        eax
  00000BF8: FF 15 00 00 00 00  call        dword ptr [?GetCurrentFullPath@Path@@SAPADPAD@Z]
  00000BFE: 3B F4              cmp         esi,esp
  00000C00: E8 00 00 00 00     call        00000C05
  00000C05: 89 85 EC FE FF FF  mov         dword ptr [ebp-114h],eax
  00000C0B: 8B 85 EC FE FF FF  mov         eax,dword ptr [ebp-114h]
  00000C11: 52                 push        edx
  00000C12: 8B CD              mov         ecx,ebp
  00000C14: 50                 push        eax
  00000C15: 8D 15 00 00 00 00  lea         edx,[?GetCurrentFullPath@Path@@SAPADPAD@Z]
  00000C1B: E8 00 00 00 00     call        00000C20
  00000C20: 58                 pop         eax
  00000C21: 5A                 pop         edx
  00000C22: 5F                 pop         edi
  00000C23: 5E                 pop         esi
  00000C24: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000C27: 33 CD              xor         ecx,ebp
  00000C29: E8 00 00 00 00     call        00000C2E
  00000C2E: 81 C4 28 02 00 00  add         esp,228h
  00000C34: 3B EC              cmp         ebp,esp
  00000C36: E8 00 00 00 00     call        00000C3B
  00000C3B: 8B E5              mov         esp,ebp
  00000C3D: 5D                 pop         ebp
  00000C3E: C3                 ret
  00000C3F: 90                 nop
$LN13:
  00000C40: 02 00              add         al,byte ptr [eax]
  00000C42: 00 00              add         byte ptr [eax],al
  00000C44: 00 00              add         byte ptr [eax],al
  00000C46: 00 00              add         byte ptr [eax],al
$LN12:
  00000C48: F4                 hlt
  00000C49: FE
  00000C4A: FF
  00000C4B: FF 04 01           inc         dword ptr [ecx+eax]
  00000C4E: 00 00              add         byte ptr [eax],al
  00000C50: 00 00              add         byte ptr [eax],al
  00000C52: 00 00              add         byte ptr [eax],al
  00000C54: E4 FD              in          al,0FDh
  00000C56: FF
  00000C57: FF 04 01           inc         dword ptr [ecx+eax]
  00000C5A: 00 00              add         byte ptr [eax],al
  00000C5C: 00 00              add         byte ptr [eax],al
  00000C5E: 00 00              add         byte ptr [eax],al
$LN11:
  00000C60: 73 7A              jae         00000CDC
  00000C62: 53                 push        ebx
  00000C63: 75 62              jne         00000CC7
  00000C65: 44                 inc         esp
  00000C66: 69 72 00 73 7A 44  imul        esi,dword ptr [edx],69447A73h
            69
  00000C6D: 72 00              jb          00000C6F
  00000C6F: CC                 int         3
?DeleteDirectory@Path@@SAXPAD@Z (public: static void __cdecl Path::DeleteDirectory(char *)):
  00000C70: 55                 push        ebp
  00000C71: 8B EC              mov         ebp,esp
  00000C73: 81 EC 68 03 00 00  sub         esp,368h
  00000C79: 56                 push        esi
  00000C7A: 57                 push        edi
  00000C7B: 8D BD 98 FC FF FF  lea         edi,[ebp-368h]
  00000C81: B9 DA 00 00 00     mov         ecx,0DAh
  00000C86: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000C8B: F3 AB              rep stos    dword ptr [edi]
  00000C8D: A1 00 00 00 00     mov         eax,[?GetCurrentFullPath@Path@@SAPADPAD@Z]
  00000C92: 33 C5              xor         eax,ebp
  00000C94: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000C97: C6 85 A8 FD FF FF  mov         byte ptr [ebp-258h],0
            00
  00000C9E: 68 03 01 00 00     push        103h
  00000CA3: 6A 00              push        0
  00000CA5: 8D 85 A9 FD FF FF  lea         eax,[ebp-257h]
  00000CAB: 50                 push        eax
  00000CAC: E8 00 00 00 00     call        00000CB1
  00000CB1: 83 C4 0C           add         esp,0Ch
  00000CB4: C6 85 9C FC FF FF  mov         byte ptr [ebp-364h],0
            00
  00000CBB: 68 03 01 00 00     push        103h
  00000CC0: 6A 00              push        0
  00000CC2: 8D 8D 9D FC FF FF  lea         ecx,[ebp-363h]
  00000CC8: 51                 push        ecx
  00000CC9: E8 00 00 00 00     call        00000CCE
  00000CCE: 83 C4 0C           add         esp,0Ch
  00000CD1: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000CD4: 52                 push        edx
  00000CD5: 68 00 00 00 00     push        offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
  00000CDA: 68 04 01 00 00     push        104h
  00000CDF: 8D 85 A8 FD FF FF  lea         eax,[ebp-258h]
  00000CE5: 50                 push        eax
  00000CE6: E8 00 00 00 00     call        00000CEB
  00000CEB: 83 C4 10           add         esp,10h
  00000CEE: 8B F4              mov         esi,esp
  00000CF0: 8D 8D B8 FE FF FF  lea         ecx,[ebp-148h]
  00000CF6: 51                 push        ecx
  00000CF7: 8D 95 A8 FD FF FF  lea         edx,[ebp-258h]
  00000CFD: 52                 push        edx
  00000CFE: FF 15 00 00 00 00  call        dword ptr [?GetCurrentFullPath@Path@@SAPADPAD@Z]
  00000D04: 3B F4              cmp         esi,esp
  00000D06: E8 00 00 00 00     call        00000D0B
  00000D0B: 89 85 B0 FE FF FF  mov         dword ptr [ebp-150h],eax
  00000D11: 83 BD B0 FE FF FF  cmp         dword ptr [ebp-150h],0
            00
  00000D18: 0F 84 00 01 00 00  je          00000E1E
  00000D1E: 8D 85 E4 FE FF FF  lea         eax,[ebp-11Ch]
  00000D24: 50                 push        eax
  00000D25: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000D28: 51                 push        ecx
  00000D29: 68 00 00 00 00     push        offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
  00000D2E: 68 04 01 00 00     push        104h
  00000D33: 8D 95 9C FC FF FF  lea         edx,[ebp-364h]
  00000D39: 52                 push        edx
  00000D3A: E8 00 00 00 00     call        00000D3F
  00000D3F: 83 C4 14           add         esp,14h
  00000D42: 68 00 00 00 00     push        offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
  00000D47: 8D 85 E4 FE FF FF  lea         eax,[ebp-11Ch]
  00000D4D: 50                 push        eax
  00000D4E: E8 00 00 00 00     call        00000D53
  00000D53: 83 C4 08           add         esp,8
  00000D56: 85 C0              test        eax,eax
  00000D58: 74 75              je          00000DCF
  00000D5A: 68 00 00 00 00     push        offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
  00000D5F: 8D 8D E4 FE FF FF  lea         ecx,[ebp-11Ch]
  00000D65: 51                 push        ecx
  00000D66: E8 00 00 00 00     call        00000D6B
  00000D6B: 83 C4 08           add         esp,8
  00000D6E: 85 C0              test        eax,eax
  00000D70: 74 5D              je          00000DCF
  00000D72: 8B 95 B8 FE FF FF  mov         edx,dword ptr [ebp-148h]
  00000D78: 83 E2 01           and         edx,1
  00000D7B: 74 20              je          00000D9D
  00000D7D: 8B 85 B8 FE FF FF  mov         eax,dword ptr [ebp-148h]
  00000D83: 83 E0 FE           and         eax,0FEh
  00000D86: 8B F4              mov         esi,esp
  00000D88: 50                 push        eax
  00000D89: 8D 8D 9C FC FF FF  lea         ecx,[ebp-364h]
  00000D8F: 51                 push        ecx
  00000D90: FF 15 00 00 00 00  call        dword ptr [?GetCurrentFullPath@Path@@SAPADPAD@Z]
  00000D96: 3B F4              cmp         esi,esp
  00000D98: E8 00 00 00 00     call        00000D9D
  00000D9D: 8B 95 B8 FE FF FF  mov         edx,dword ptr [ebp-148h]
  00000DA3: 83 E2 10           and         edx,10h
  00000DA6: 74 11              je          00000DB9
  00000DA8: 8D 85 9C FC FF FF  lea         eax,[ebp-364h]
  00000DAE: 50                 push        eax
  00000DAF: E8 00 00 00 00     call        00000DB4
  00000DB4: 83 C4 04           add         esp,4
  00000DB7: EB 16              jmp         00000DCF
  00000DB9: 8B F4              mov         esi,esp
  00000DBB: 8D 8D 9C FC FF FF  lea         ecx,[ebp-364h]
  00000DC1: 51                 push        ecx
  00000DC2: FF 15 00 00 00 00  call        dword ptr [?GetCurrentFullPath@Path@@SAPADPAD@Z]
  00000DC8: 3B F4              cmp         esi,esp
  00000DCA: E8 00 00 00 00     call        00000DCF
  00000DCF: 68 04 01 00 00     push        104h
  00000DD4: 8D 95 9C FC FF FF  lea         edx,[ebp-364h]
  00000DDA: 52                 push        edx
  00000DDB: E8 00 00 00 00     call        00000DE0
  00000DE0: 83 C4 08           add         esp,8
  00000DE3: 8B F4              mov         esi,esp
  00000DE5: 8D 85 B8 FE FF FF  lea         eax,[ebp-148h]
  00000DEB: 50                 push        eax
  00000DEC: 8B 8D B0 FE FF FF  mov         ecx,dword ptr [ebp-150h]
  00000DF2: 51                 push        ecx
  00000DF3: FF 15 00 00 00 00  call        dword ptr [?GetCurrentFullPath@Path@@SAPADPAD@Z]
  00000DF9: 3B F4              cmp         esi,esp
  00000DFB: E8 00 00 00 00     call        00000E00
  00000E00: 85 C0              test        eax,eax
  00000E02: 0F 85 16 FF FF FF  jne         00000D1E
  00000E08: 8B F4              mov         esi,esp
  00000E0A: 8B 95 B0 FE FF FF  mov         edx,dword ptr [ebp-150h]
  00000E10: 52                 push        edx
  00000E11: FF 15 00 00 00 00  call        dword ptr [?GetCurrentFullPath@Path@@SAPADPAD@Z]
  00000E17: 3B F4              cmp         esi,esp
  00000E19: E8 00 00 00 00     call        00000E1E
  00000E1E: 8B F4              mov         esi,esp
  00000E20: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000E23: 50                 push        eax
  00000E24: FF 15 00 00 00 00  call        dword ptr [?GetCurrentFullPath@Path@@SAPADPAD@Z]
  00000E2A: 3B F4              cmp         esi,esp
  00000E2C: E8 00 00 00 00     call        00000E31
  00000E31: 52                 push        edx
  00000E32: 8B CD              mov         ecx,ebp
  00000E34: 50                 push        eax
  00000E35: 8D 15 00 00 00 00  lea         edx,[?GetCurrentFullPath@Path@@SAPADPAD@Z]
  00000E3B: E8 00 00 00 00     call        00000E40
  00000E40: 58                 pop         eax
  00000E41: 5A                 pop         edx
  00000E42: 5F                 pop         edi
  00000E43: 5E                 pop         esi
  00000E44: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000E47: 33 CD              xor         ecx,ebp
  00000E49: E8 00 00 00 00     call        00000E4E
  00000E4E: 81 C4 68 03 00 00  add         esp,368h
  00000E54: 3B EC              cmp         ebp,esp
  00000E56: E8 00 00 00 00     call        00000E5B
  00000E5B: 8B E5              mov         esp,ebp
  00000E5D: 5D                 pop         ebp
  00000E5E: C3                 ret
  00000E5F: 90                 nop
$LN15:
  00000E60: 03 00              add         eax,dword ptr [eax]
  00000E62: 00 00              add         byte ptr [eax],al
  00000E64: 00 00              add         byte ptr [eax],al
  00000E66: 00 00              add         byte ptr [eax],al
$LN14:
  00000E68: B8 FE FF FF 40     mov         eax,40FFFFFEh
  00000E6D: 01 00              add         dword ptr [eax],eax
  00000E6F: 00 00              add         byte ptr [eax],al
  00000E71: 00 00              add         byte ptr [eax],al
  00000E73: 00 A8 FD FF FF 04  add         byte ptr [eax+4FFFFFDh],ch
  00000E79: 01 00              add         dword ptr [eax],eax
  00000E7B: 00 00              add         byte ptr [eax],al
  00000E7D: 00 00              add         byte ptr [eax],al
  00000E7F: 00 9C FC FF FF 04  add         byte ptr [esp+edi*8+104FFFFh],bl
            01
  00000E86: 00 00              add         byte ptr [eax],al
  00000E88: 00 00              add         byte ptr [eax],al
  00000E8A: 00 00              add         byte ptr [eax],al
$LN13:
  00000E8C: 63 68 46           arpl        word ptr [eax+46h],bp
  00000E8F: 69 6C 65 4E 61 6D  imul        ebp,dword ptr [ebp+4Eh],656D61h
            65 00
$LN12:
  00000E97: 73 7A              jae         00000F13
  00000E99: 4F                 dec         edi
  00000E9A: 72 69              jb          00000F05
  00000E9C: 67 69 6E 50 61 74  imul        ebp,dword ptr [bp+50h],687461h
            68 00
$LN11:
  00000EA4: 66 64 46           inc         si
  00000EA7: 69 6C 65 73 00 CC  imul        ebp,dword ptr [ebp+73h],0CCCCCC00h
            CC CC
  00000EAF: CC                 int         3
?StringVPrintfWorkerA@@YGJPADIPAIPBD0@Z (long __stdcall StringVPrintfWorkerA(char *,unsigned int,unsigned int *,char const *,char *)):
  00000EB0: 55                 push        ebp
  00000EB1: 8B EC              mov         ebp,esp
  00000EB3: 83 EC 10           sub         esp,10h
  00000EB6: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000EBB: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000EBE: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000EC1: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000EC4: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000EC7: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
            00
  00000ECE: C7 45 F0 00 00 00  mov         dword ptr [ebp-10h],offset ?GetCurrentFullPath@Path@@SAPADPAD@Z
            00
  00000ED5: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000ED8: 83 E8 01           sub         eax,1
  00000EDB: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000EDE: 8B 4D 18           mov         ecx,dword ptr [ebp+18h]
  00000EE1: 51                 push        ecx
  00000EE2: 8B 55 14           mov         edx,dword ptr [ebp+14h]
  00000EE5: 52                 push        edx
  00000EE6: 8B 45 F4           mov         eax,dword ptr [ebp-0Ch]
  00000EE9: 50                 push        eax
  00000EEA: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000EED: 51                 push        ecx
  00000EEE: E8 00 00 00 00     call        00000EF3
  00000EF3: 83 C4 10           add         esp,10h
  00000EF6: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000EF9: 83 7D F8 00        cmp         dword ptr [ebp-8],0
  00000EFD: 7C 08              jl          00000F07
  00000EFF: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  00000F02: 3B 55 F4           cmp         edx,dword ptr [ebp-0Ch]
  00000F05: 76 1E              jbe         00000F25
  00000F07: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000F0A: 03 45 F4           add         eax,dword ptr [ebp-0Ch]
  00000F0D: 89 45 08           mov         dword ptr [ebp+8],eax
  00000F10: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000F13: C6 01 00           mov         byte ptr [ecx],0
  00000F16: 8B 55 F4           mov         edx,dword ptr [ebp-0Ch]
  00000F19: 89 55 F0           mov         dword ptr [ebp-10h],edx
  00000F1C: C7 45 FC 7A 00 07  mov         dword ptr [ebp-4],8007007Ah
            80
  00000F23: EB 25              jmp         00000F4A
  00000F25: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  00000F28: 3B 45 F4           cmp         eax,dword ptr [ebp-0Ch]
  00000F2B: 75 17              jne         00000F44
  00000F2D: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000F30: 03 4D F4           add         ecx,dword ptr [ebp-0Ch]
  00000F33: 89 4D 08           mov         dword ptr [ebp+8],ecx
  00000F36: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000F39: C6 02 00           mov         byte ptr [edx],0
  00000F3C: 8B 45 F4           mov         eax,dword ptr [ebp-0Ch]
  00000F3F: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000F42: EB 06              jmp         00000F4A
  00000F44: 8B 4D F8           mov         ecx,dword ptr [ebp-8]
  00000F47: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  00000F4A: 83 7D 10 00        cmp         dword ptr [ebp+10h],0
  00000F4E: 74 08              je          00000F58
  00000F50: 8B 55 10           mov         edx,dword ptr [ebp+10h]
  00000F53: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000F56: 89 02              mov         dword ptr [edx],eax
  00000F58: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000F5B: 83 C4 10           add         esp,10h
  00000F5E: 3B EC              cmp         ebp,esp
  00000F60: E8 00 00 00 00     call        00000F65
  00000F65: 8B E5              mov         esp,ebp
  00000F67: 5D                 pop         ebp
  00000F68: C2 14 00           ret         14h
  00000F6B: CC                 int         3
  00000F6C: CC                 int         3
  00000F6D: CC                 int         3
  00000F6E: CC                 int         3
  00000F6F: CC                 int         3
?GetFileSize@Path@@SA_KPAD@Z (public: static unsigned __int64 __cdecl Path::GetFileSize(char *)):
  00000F70: 55                 push        ebp
  00000F71: 8B EC              mov         ebp,esp
  00000F73: 83 EC 14           sub         esp,14h
  00000F76: 56                 push        esi
  00000F77: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000F7C: 89 45 EC           mov         dword ptr [ebp-14h],eax
  00000F7F: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000F82: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000F85: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000F88: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000F8B: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000F92: 8B F4              mov         esi,esp
  00000F94: 6A 00              push        0
  00000F96: 68 00 00 00 08     push        8000000h
  00000F9B: 6A 03              push        3
  00000F9D: 6A 00              push        0
  00000F9F: 6A 03              push        3
  00000FA1: 68 00 00 00 80     push        80000000h
  00000FA6: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000FA9: 50                 push        eax
  00000FAA: FF 15 00 00 00 00  call        dword ptr [?GetCurrentFullPath@Path@@SAPADPAD@Z]
  00000FB0: 3B F4              cmp         esi,esp
  00000FB2: E8 00 00 00 00     call        00000FB7
  00000FB7: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000FBA: 83 7D FC FF        cmp         dword ptr [ebp-4],0FFh
  00000FBE: 75 06              jne         00000FC6
  00000FC0: 33 C0              xor         eax,eax
  00000FC2: 33 D2              xor         edx,edx
  00000FC4: EB 5D              jmp         00001023
  00000FC6: 6A 08              push        8
  00000FC8: 6A 00              push        0
  00000FCA: 8D 4D F0           lea         ecx,[ebp-10h]
  00000FCD: 51                 push        ecx
  00000FCE: E8 00 00 00 00     call        00000FD3
  00000FD3: 83 C4 0C           add         esp,0Ch
  00000FD6: 8B F4              mov         esi,esp
  00000FD8: 8D 55 F0           lea         edx,[ebp-10h]
  00000FDB: 52                 push        edx
  00000FDC: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000FDF: 50                 push        eax
  00000FE0: FF 15 00 00 00 00  call        dword ptr [?GetCurrentFullPath@Path@@SAPADPAD@Z]
  00000FE6: 3B F4              cmp         esi,esp
  00000FE8: E8 00 00 00 00     call        00000FED
  00000FED: 85 C0              test        eax,eax
  00000FEF: 75 19              jne         0000100A
  00000FF1: 8B F4              mov         esi,esp
  00000FF3: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000FF6: 51                 push        ecx
  00000FF7: FF 15 00 00 00 00  call        dword ptr [?GetCurrentFullPath@Path@@SAPADPAD@Z]
  00000FFD: 3B F4              cmp         esi,esp
  00000FFF: E8 00 00 00 00     call        00001004
  00001004: 33 C0              xor         eax,eax
  00001006: 33 D2              xor         edx,edx
  00001008: EB 19              jmp         00001023
  0000100A: 8B F4              mov         esi,esp
  0000100C: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000100F: 52                 push        edx
  00001010: FF 15 00 00 00 00  call        dword ptr [?GetCurrentFullPath@Path@@SAPADPAD@Z]
  00001016: 3B F4              cmp         esi,esp
  00001018: E8 00 00 00 00     call        0000101D
  0000101D: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00001020: 8B 55 F4           mov         edx,dword ptr [ebp-0Ch]
  00001023: 52                 push        edx
  00001024: 8B CD              mov         ecx,ebp
  00001026: 50                 push        eax
  00001027: 8D 15 00 00 00 00  lea         edx,[?GetCurrentFullPath@Path@@SAPADPAD@Z]
  0000102D: E8 00 00 00 00     call        00001032
  00001032: 58                 pop         eax
  00001033: 5A                 pop         edx
  00001034: 5E                 pop         esi
  00001035: 83 C4 14           add         esp,14h
  00001038: 3B EC              cmp         ebp,esp
  0000103A: E8 00 00 00 00     call        0000103F
  0000103F: 8B E5              mov         esp,ebp
  00001041: 5D                 pop         ebp
  00001042: C3                 ret
  00001043: 90                 nop
$LN7:
  00001044: 01 00              add         dword ptr [eax],eax
  00001046: 00 00              add         byte ptr [eax],al
  00001048: 00 00              add         byte ptr [eax],al
  0000104A: 00 00              add         byte ptr [eax],al
$LN6:
  0000104C: F0
  0000104D: FF
  0000104E: FF
  0000104F: FF 08              dec         dword ptr [eax]
  00001051: 00 00              add         byte ptr [eax],al
  00001053: 00 00              add         byte ptr [eax],al
  00001055: 00 00              add         byte ptr [eax],al
  00001057: 00 6C 61 72        add         byte ptr [ecx+72h],ch
  0000105B: 67 65 49           dec         ecx
  0000105E: 6E                 outs        dx,byte ptr [esi]
  0000105F: 74 00              je          00001061

?_tcsrchr@@YAPADPADI@Z (char * __cdecl _tcsrchr(char *,unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000006: 50                 push        eax
  00000007: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000000A: 51                 push        ecx
  0000000B: E8 00 00 00 00     call        00000010
  00000010: 83 C4 08           add         esp,8
  00000013: 3B EC              cmp         ebp,esp
  00000015: E8 00 00 00 00     call        0000001A
  0000001A: 5D                 pop         ebp
  0000001B: C3                 ret

__tcsrchr:
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000006: 50                 push        eax
  00000007: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000000A: 51                 push        ecx
  0000000B: E8 00 00 00 00     call        00000010
  00000010: 83 C4 08           add         esp,8
  00000013: 3B EC              cmp         ebp,esp
  00000015: E8 00 00 00 00     call        0000001A
  0000001A: 5D                 pop         ebp
  0000001B: C3                 ret

?StringCchLengthA@@YGJPBDIPAI@Z (long __stdcall StringCchLengthA(char const *,unsigned int,unsigned int *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  0000000F: 74 09              je          0000001A
  00000011: 81 7D 0C FF FF FF  cmp         dword ptr [ebp+0Ch],7FFFFFFFh
            7F
  00000018: 76 09              jbe         00000023
  0000001A: C7 45 FC 57 00 07  mov         dword ptr [ebp-4],80070057h
            80
  00000021: EB 14              jmp         00000037
  00000023: 8B 45 10           mov         eax,dword ptr [ebp+10h]
  00000026: 50                 push        eax
  00000027: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  0000002A: 51                 push        ecx
  0000002B: 8B 55 08           mov         edx,dword ptr [ebp+8]
  0000002E: 52                 push        edx
  0000002F: E8 00 00 00 00     call        00000034
  00000034: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000037: 83 7D FC 00        cmp         dword ptr [ebp-4],0
  0000003B: 7D 0F              jge         0000004C
  0000003D: 83 7D 10 00        cmp         dword ptr [ebp+10h],0
  00000041: 74 09              je          0000004C
  00000043: 8B 45 10           mov         eax,dword ptr [ebp+10h]
  00000046: C7 00 00 00 00 00  mov         dword ptr [eax],offset ?StringCchLengthA@@YGJPBDIPAI@Z
  0000004C: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000004F: 83 C4 04           add         esp,4
  00000052: 3B EC              cmp         ebp,esp
  00000054: E8 00 00 00 00     call        00000059
  00000059: 8B E5              mov         esp,ebp
  0000005B: 5D                 pop         ebp
  0000005C: C2 0C 00           ret         0Ch

?StringCchCopyA@@YGJPADIPBD@Z (long __stdcall StringCchCopyA(char *,unsigned int,char const *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 68 FF FF FF 7F     push        7FFFFFFFh
  00000010: 6A 00              push        0
  00000012: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000015: 50                 push        eax
  00000016: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000019: 51                 push        ecx
  0000001A: E8 00 00 00 00     call        0000001F
  0000001F: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000022: 83 7D FC 00        cmp         dword ptr [ebp-4],0
  00000026: 7C 1B              jl          00000043
  00000028: 68 FE FF FF 7F     push        7FFFFFFEh
  0000002D: 8B 55 10           mov         edx,dword ptr [ebp+10h]
  00000030: 52                 push        edx
  00000031: 6A 00              push        0
  00000033: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000036: 50                 push        eax
  00000037: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000003A: 51                 push        ecx
  0000003B: E8 00 00 00 00     call        00000040
  00000040: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000043: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000046: 83 C4 04           add         esp,4
  00000049: 3B EC              cmp         ebp,esp
  0000004B: E8 00 00 00 00     call        00000050
  00000050: 8B E5              mov         esp,ebp
  00000052: 5D                 pop         ebp
  00000053: C2 0C 00           ret         0Ch

__unwindfunclet$?ReadFileLastLine@Path@@SAHPAD0@Z$0:
  00000000: 8D 8D 60 FF FF FF  lea         ecx,[ebp-0A0h]
  00000006: E9 00 00 00 00     jmp         __ehhandler$?ReadFileLastLine@Path@@SAHPAD0@Z
__ehhandler$?ReadFileLastLine@Path@@SAHPAD0@Z:
  0000000B: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000F: 8D 42 0C           lea         eax,[edx+0Ch]
  00000012: 8B 8A 40 FB FF FF  mov         ecx,dword ptr [edx-4C0h]
  00000018: 33 C8              xor         ecx,eax
  0000001A: E8 00 00 00 00     call        0000001F
  0000001F: 8B 4A FC           mov         ecx,dword ptr [edx-4]
  00000022: 33 C8              xor         ecx,eax
  00000024: E8 00 00 00 00     call        00000029
  00000029: B8 00 00 00 00     mov         eax,offset __unwindfunclet$?ReadFileLastLine@Path@@SAHPAD0@Z$0
  0000002E: E9 00 00 00 00     jmp         __unwindfunclet$?WriteNewFile@Path@@SAHPAD0H@Z$0
__unwindfunclet$?WriteNewFile@Path@@SAHPAD0H@Z$0:
  00000033: 8D 8D 68 FF FF FF  lea         ecx,[ebp-98h]
  00000039: E9 00 00 00 00     jmp         __ehhandler$?WriteNewFile@Path@@SAHPAD0H@Z
__ehhandler$?WriteNewFile@Path@@SAHPAD0H@Z:
  0000003E: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  00000042: 8D 42 0C           lea         eax,[edx+0Ch]
  00000045: 8B 8A 60 FF FF FF  mov         ecx,dword ptr [edx-0A0h]
  0000004B: 33 C8              xor         ecx,eax
  0000004D: E8 00 00 00 00     call        00000052
  00000052: B8 00 00 00 00     mov         eax,offset __unwindfunclet$?ReadFileLastLine@Path@@SAHPAD0@Z$0
  00000057: E9 00 00 00 00     jmp         0000005C

?eof@ios_base@std@@QBE_NXZ (public: bool __thiscall std::ios_base::eof(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 83 E0 01           and         eax,1
  00000019: 83 C4 04           add         esp,4
  0000001C: 3B EC              cmp         ebp,esp
  0000001E: E8 00 00 00 00     call        00000023
  00000023: 8B E5              mov         esp,ebp
  00000025: 5D                 pop         ebp
  00000026: C3                 ret

?rdstate@ios_base@std@@QBEHXZ (public: int __thiscall std::ios_base::rdstate(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 40 08           mov         eax,dword ptr [eax+8]
  00000014: 8B E5              mov         esp,ebp
  00000016: 5D                 pop         ebp
  00000017: C3                 ret

??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ (public: void __thiscall std::basic_ifstream<char,struct std::char_traits<char> >::`vbase destructor'(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: 83 C1 58           add         ecx,58h
  00000014: E8 00 00 00 00     call        00000019
  00000019: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001C: 83 C1 58           add         ecx,58h
  0000001F: E8 00 00 00 00     call        00000024
  00000024: 83 C4 04           add         esp,4
  00000027: 3B EC              cmp         ebp,esp
  00000029: E8 00 00 00 00     call        0000002E
  0000002E: 8B E5              mov         esp,ebp
  00000030: 5D                 pop         ebp
  00000031: C3                 ret

??_D?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ (public: void __thiscall std::basic_ofstream<char,struct std::char_traits<char> >::`vbase destructor'(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: 83 C1 54           add         ecx,54h
  00000014: E8 00 00 00 00     call        00000019
  00000019: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001C: 83 C1 54           add         ecx,54h
  0000001F: E8 00 00 00 00     call        00000024
  00000024: 83 C4 04           add         esp,4
  00000027: 3B EC              cmp         ebp,esp
  00000029: E8 00 00 00 00     call        0000002E
  0000002E: 8B E5              mov         esp,ebp
  00000030: 5D                 pop         ebp
  00000031: C3                 ret

?_tcschr@@YAPADPADI@Z (char * __cdecl _tcschr(char *,unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000006: 50                 push        eax
  00000007: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000000A: 51                 push        ecx
  0000000B: E8 00 00 00 00     call        00000010
  00000010: 83 C4 08           add         esp,8
  00000013: 3B EC              cmp         ebp,esp
  00000015: E8 00 00 00 00     call        0000001A
  0000001A: 5D                 pop         ebp
  0000001B: C3                 ret

__tcschr:
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000006: 50                 push        eax
  00000007: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000000A: 51                 push        ecx
  0000000B: E8 00 00 00 00     call        00000010
  00000010: 83 C4 08           add         esp,8
  00000013: 3B EC              cmp         ebp,esp
  00000015: E8 00 00 00 00     call        0000001A
  0000001A: 5D                 pop         ebp
  0000001B: C3                 ret

_RtlSecureZeroMemory:
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000000E: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000011: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  00000015: 74 1A              je          00000031
  00000017: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001A: C6 01 00           mov         byte ptr [ecx],0
  0000001D: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000020: 83 C2 01           add         edx,1
  00000023: 89 55 FC           mov         dword ptr [ebp-4],edx
  00000026: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000029: 83 E8 01           sub         eax,1
  0000002C: 89 45 0C           mov         dword ptr [ebp+0Ch],eax
  0000002F: EB E0              jmp         00000011
  00000031: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000034: 8B E5              mov         esp,ebp
  00000036: 5D                 pop         ebp
  00000037: C3                 ret

__tcscmp:
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000006: 50                 push        eax
  00000007: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000000A: 51                 push        ecx
  0000000B: E8 00 00 00 00     call        00000010
  00000010: 83 C4 08           add         esp,8
  00000013: 3B EC              cmp         ebp,esp
  00000015: E8 00 00 00 00     call        0000001A
  0000001A: 5D                 pop         ebp
  0000001B: C3                 ret

?StringCchPrintfA@@YAJPADIPBDZZ (long __cdecl StringCchPrintfA(char *,unsigned int,char const *,...)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000014: 68 FF FF FF 7F     push        7FFFFFFFh
  00000019: 6A 00              push        0
  0000001B: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  0000001E: 50                 push        eax
  0000001F: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000022: 51                 push        ecx
  00000023: E8 00 00 00 00     call        00000028
  00000028: 89 45 FC           mov         dword ptr [ebp-4],eax
  0000002B: 83 7D FC 00        cmp         dword ptr [ebp-4],0
  0000002F: 7C 27              jl          00000058
  00000031: 8D 55 14           lea         edx,[ebp+14h]
  00000034: 89 55 F8           mov         dword ptr [ebp-8],edx
  00000037: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  0000003A: 50                 push        eax
  0000003B: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  0000003E: 51                 push        ecx
  0000003F: 6A 00              push        0
  00000041: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  00000044: 52                 push        edx
  00000045: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000048: 50                 push        eax
  00000049: E8 00 00 00 00     call        0000004E
  0000004E: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000051: C7 45 F8 00 00 00  mov         dword ptr [ebp-8],offset ?StringCchPrintfA@@YAJPADIPBDZZ
            00
  00000058: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000005B: 83 C4 08           add         esp,8
  0000005E: 3B EC              cmp         ebp,esp
  00000060: E8 00 00 00 00     call        00000065
  00000065: 8B E5              mov         esp,ebp
  00000067: 5D                 pop         ebp
  00000068: C3                 ret

?allocate@?$_DebugHeapAllocator@D@std@@QAAPADIPBX@Z (public: char * __cdecl std::_DebugHeapAllocator<char>::allocate(unsigned int,void const *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 10           sub         esp,10h
  00000006: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000B: 89 45 F0           mov         dword ptr [ebp-10h],eax
  0000000E: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000011: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000014: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000017: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  0000001B: 77 09              ja          00000026
  0000001D: C7 45 0C 00 00 00  mov         dword ptr [ebp+0Ch],offset ?allocate@?$_DebugHeapAllocator@D@std@@QAAPADIPBX@Z
            00
  00000024: EB 25              jmp         0000004B
  00000026: 83 C8 FF           or          eax,0FFh
  00000029: 33 D2              xor         edx,edx
  0000002B: F7 75 0C           div         eax,dword ptr [ebp+0Ch]
  0000002E: 83 F8 01           cmp         eax,1
  00000031: 73 18              jae         0000004B
  00000033: 6A 00              push        0
  00000035: 8D 4D F4           lea         ecx,[ebp-0Ch]
  00000038: E8 00 00 00 00     call        0000003D
  0000003D: 68 00 00 00 00     push        offset ?allocate@?$_DebugHeapAllocator@D@std@@QAAPADIPBX@Z
  00000042: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000045: 50                 push        eax
  00000046: E8 00 00 00 00     call        0000004B
  0000004B: 6A 56              push        56h
  0000004D: 68 00 00 00 00     push        offset ?allocate@?$_DebugHeapAllocator@D@std@@QAAPADIPBX@Z
  00000052: E8 00 00 00 00     call        00000057
  00000057: 50                 push        eax
  00000058: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  0000005B: 51                 push        ecx
  0000005C: E8 00 00 00 00     call        00000061
  00000061: 83 C4 10           add         esp,10h
  00000064: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000067: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  0000006A: 83 C4 10           add         esp,10h
  0000006D: 3B EC              cmp         ebp,esp
  0000006F: E8 00 00 00 00     call        00000074
  00000074: 8B E5              mov         esp,ebp
  00000076: 5D                 pop         ebp
  00000077: C3                 ret

??0bad_alloc@std@@QAE@PBD@Z (public: __thiscall std::bad_alloc::bad_alloc(char const *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8D 45 08           lea         eax,[ebp+8]
  00000011: 50                 push        eax
  00000012: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000015: E8 00 00 00 00     call        0000001A
  0000001A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001D: C7 01 00 00 00 00  mov         dword ptr [ecx],offset ??0bad_alloc@std@@QAE@PBD@Z
  00000023: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000026: 83 C4 04           add         esp,4
  00000029: 3B EC              cmp         ebp,esp
  0000002B: E8 00 00 00 00     call        00000030
  00000030: 8B E5              mov         esp,ebp
  00000032: 5D                 pop         ebp
  00000033: C2 04 00           ret         4

??1bad_alloc@std@@UAE@XZ (public: virtual __thiscall std::bad_alloc::~bad_alloc(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??1bad_alloc@std@@UAE@XZ
  00000017: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001A: E8 00 00 00 00     call        0000001F
  0000001F: 83 C4 04           add         esp,4
  00000022: 3B EC              cmp         ebp,esp
  00000024: E8 00 00 00 00     call        00000029
  00000029: 8B E5              mov         esp,ebp
  0000002B: 5D                 pop         ebp
  0000002C: C3                 ret

??_Gbad_alloc@std@@UAEPAXI@Z (public: virtual void * __thiscall std::bad_alloc::`scalar deleting destructor'(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000019: 83 E0 01           and         eax,1
  0000001C: 74 0C              je          0000002A
  0000001E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000021: 51                 push        ecx
  00000022: E8 00 00 00 00     call        00000027
  00000027: 83 C4 04           add         esp,4
  0000002A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002D: 83 C4 04           add         esp,4
  00000030: 3B EC              cmp         ebp,esp
  00000032: E8 00 00 00 00     call        00000037
  00000037: 8B E5              mov         esp,ebp
  00000039: 5D                 pop         ebp
  0000003A: C2 04 00           ret         4

?allocate@?$_DebugHeapAllocator@D@std@@QAEPADI@Z (public: char * __thiscall std::_DebugHeapAllocator<char>::allocate(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 14           sub         esp,14h
  00000006: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000B: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000000E: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000011: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000014: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000017: 89 45 FC           mov         dword ptr [ebp-4],eax
  0000001A: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000001D: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  00000021: 77 09              ja          0000002C
  00000023: C7 45 08 00 00 00  mov         dword ptr [ebp+8],offset ?allocate@?$_DebugHeapAllocator@D@std@@QAEPADI@Z
            00
  0000002A: EB 25              jmp         00000051
  0000002C: 83 C8 FF           or          eax,0FFh
  0000002F: 33 D2              xor         edx,edx
  00000031: F7 75 08           div         eax,dword ptr [ebp+8]
  00000034: 83 F8 01           cmp         eax,1
  00000037: 73 18              jae         00000051
  00000039: 6A 00              push        0
  0000003B: 8D 4D F0           lea         ecx,[ebp-10h]
  0000003E: E8 00 00 00 00     call        00000043
  00000043: 68 00 00 00 00     push        offset ?allocate@?$_DebugHeapAllocator@D@std@@QAEPADI@Z
  00000048: 8D 45 F0           lea         eax,[ebp-10h]
  0000004B: 50                 push        eax
  0000004C: E8 00 00 00 00     call        00000051
  00000051: 6A 61              push        61h
  00000053: 68 00 00 00 00     push        offset ?allocate@?$_DebugHeapAllocator@D@std@@QAEPADI@Z
  00000058: E8 00 00 00 00     call        0000005D
  0000005D: 50                 push        eax
  0000005E: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000061: 51                 push        ecx
  00000062: E8 00 00 00 00     call        00000067
  00000067: 83 C4 10           add         esp,10h
  0000006A: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000006D: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000070: 83 C4 14           add         esp,14h
  00000073: 3B EC              cmp         ebp,esp
  00000075: E8 00 00 00 00     call        0000007A
  0000007A: 8B E5              mov         esp,ebp
  0000007C: 5D                 pop         ebp
  0000007D: C2 04 00           ret         4

?deallocate@?$_DebugHeapAllocator@D@std@@QAEXPADI@Z (public: void __thiscall std::_DebugHeapAllocator<char>::deallocate(char *,unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000011: 50                 push        eax
  00000012: E8 00 00 00 00     call        00000017
  00000017: 83 C4 04           add         esp,4
  0000001A: 83 C4 04           add         esp,4
  0000001D: 3B EC              cmp         ebp,esp
  0000001F: E8 00 00 00 00     call        00000024
  00000024: 8B E5              mov         esp,ebp
  00000026: 5D                 pop         ebp
  00000027: C2 08 00           ret         8

?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBDH@Z (public: class std::basic_ostream<char,struct std::char_traits<char> > & __thiscall std::basic_ostream<char,struct std::char_traits<char> >::write(char const *,int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBDH@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBDH@Z]
  00000010: 50                 push        eax
  00000011: 51                 push        ecx
  00000012: 83 EC 24           sub         esp,24h
  00000015: 53                 push        ebx
  00000016: 56                 push        esi
  00000017: 57                 push        edi
  00000018: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000001D: 89 45 CC           mov         dword ptr [ebp-34h],eax
  00000020: 89 45 D0           mov         dword ptr [ebp-30h],eax
  00000023: 89 45 D4           mov         dword ptr [ebp-2Ch],eax
  00000026: 89 45 D8           mov         dword ptr [ebp-28h],eax
  00000029: 89 45 DC           mov         dword ptr [ebp-24h],eax
  0000002C: 89 45 E0           mov         dword ptr [ebp-20h],eax
  0000002F: 89 45 E4           mov         dword ptr [ebp-1Ch],eax
  00000032: 89 45 E8           mov         dword ptr [ebp-18h],eax
  00000035: 89 45 EC           mov         dword ptr [ebp-14h],eax
  00000038: A1 00 00 00 00     mov         eax,[?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBDH@Z]
  0000003D: 33 C5              xor         eax,ebp
  0000003F: 50                 push        eax
  00000040: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000043: 64 A3 00 00 00 00  mov         fs:[?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBDH@Z],eax
  00000049: 89 65 F0           mov         dword ptr [ebp-10h],esp
  0000004C: 89 4D EC           mov         dword ptr [ebp-14h],ecx
  0000004F: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  00000053: 7E 16              jle         0000006B
  00000055: 68 13 02 00 00     push        213h
  0000005A: 68 00 00 00 00     push        offset ?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBDH@Z
  0000005F: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000062: 50                 push        eax
  00000063: E8 00 00 00 00     call        00000068
  00000068: 83 C4 0C           add         esp,0Ch
  0000006B: C7 45 E8 00 00 00  mov         dword ptr [ebp-18h],offset ?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBDH@Z
            00
  00000072: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000075: 51                 push        ecx
  00000076: 8D 4D DC           lea         ecx,[ebp-24h]
  00000079: E8 00 00 00 00     call        0000007E
  0000007E: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBDH@Z
            00
  00000085: 8D 4D DC           lea         ecx,[ebp-24h]
  00000088: E8 00 00 00 00     call        0000008D
  0000008D: 0F B6 D0           movzx       edx,al
  00000090: 85 D2              test        edx,edx
  00000092: 75 0B              jne         0000009F
  00000094: 8B 45 E8           mov         eax,dword ptr [ebp-18h]
  00000097: 83 C8 04           or          eax,4
  0000009A: 89 45 E8           mov         dword ptr [ebp-18h],eax
  0000009D: EB 65              jmp         $LN3
  0000009F: C6 45 FC 01        mov         byte ptr [ebp-4],1
  000000A3: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000000A6: 8B 11              mov         edx,dword ptr [ecx]
  000000A8: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000000AB: 03 4A 04           add         ecx,dword ptr [edx+4]
  000000AE: E8 00 00 00 00     call        000000B3
  000000B3: 89 45 D0           mov         dword ptr [ebp-30h],eax
  000000B6: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  000000B9: 50                 push        eax
  000000BA: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  000000BD: 51                 push        ecx
  000000BE: 8B 4D D0           mov         ecx,dword ptr [ebp-30h]
  000000C1: E8 00 00 00 00     call        000000C6
  000000C6: 89 45 CC           mov         dword ptr [ebp-34h],eax
  000000C9: 8B 55 CC           mov         edx,dword ptr [ebp-34h]
  000000CC: 3B 55 0C           cmp         edx,dword ptr [ebp+0Ch]
  000000CF: 74 09              je          000000DA
  000000D1: 8B 45 E8           mov         eax,dword ptr [ebp-18h]
  000000D4: 83 C8 04           or          eax,4
  000000D7: 89 45 E8           mov         dword ptr [ebp-18h],eax
  000000DA: EB 21              jmp         000000FD
__catch$?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBDH@Z$0:
  000000DC: 6A 01              push        1
  000000DE: 6A 04              push        4
  000000E0: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000000E3: 8B 11              mov         edx,dword ptr [ecx]
  000000E5: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000000E8: 03 4A 04           add         ecx,dword ptr [edx+4]
  000000EB: E8 00 00 00 00     call        000000F0
  000000F0: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBDH@Z
            00
  000000F7: B8 00 00 00 00     mov         eax,offset ?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBDH@Z
  000000FC: C3                 ret
  000000FD: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBDH@Z
            00
$LN3:
  00000104: 6A 00              push        0
  00000106: 8B 45 E8           mov         eax,dword ptr [ebp-18h]
  00000109: 50                 push        eax
  0000010A: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  0000010D: 8B 11              mov         edx,dword ptr [ecx]
  0000010F: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000112: 03 4A 04           add         ecx,dword ptr [edx+4]
  00000115: E8 00 00 00 00     call        0000011A
  0000011A: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  0000011D: 89 45 D4           mov         dword ptr [ebp-2Ch],eax
  00000120: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000127: 8D 4D DC           lea         ecx,[ebp-24h]
  0000012A: E8 00 00 00 00     call        0000012F
  0000012F: 8B 45 D4           mov         eax,dword ptr [ebp-2Ch]
  00000132: 52                 push        edx
  00000133: 8B CD              mov         ecx,ebp
  00000135: 50                 push        eax
  00000136: 8D 15 00 00 00 00  lea         edx,[?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBDH@Z]
  0000013C: E8 00 00 00 00     call        00000141
  00000141: 58                 pop         eax
  00000142: 5A                 pop         edx
  00000143: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000146: 64 89 0D 00 00 00  mov         dword ptr fs:[?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBDH@Z],ecx
            00
  0000014D: 59                 pop         ecx
  0000014E: 5F                 pop         edi
  0000014F: 5E                 pop         esi
  00000150: 5B                 pop         ebx
  00000151: 83 C4 34           add         esp,34h
  00000154: 3B EC              cmp         ebp,esp
  00000156: E8 00 00 00 00     call        0000015B
  0000015B: 8B E5              mov         esp,ebp
  0000015D: 5D                 pop         ebp
  0000015E: C2 08 00           ret         8
  00000161: 8D 49 00           lea         ecx,[ecx]
$LN17:
  00000164: 01 00              add         dword ptr [eax],eax
  00000166: 00 00              add         byte ptr [eax],al
  00000168: 00 00              add         byte ptr [eax],al
  0000016A: 00 00              add         byte ptr [eax],al
$LN16:
  0000016C: DC FF              fdiv        st(7),st
  0000016E: FF
  0000016F: FF 08              dec         dword ptr [eax]
  00000171: 00 00              add         byte ptr [eax],al
  00000173: 00 00              add         byte ptr [eax],al
  00000175: 00 00              add         byte ptr [eax],al
  00000177: 00 5F 4F           add         byte ptr [edi+4Fh],bl
  0000017A: 6B
  0000017B: 00

__unwindfunclet$?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBDH@Z$2:
  00000000: 8D 4D DC           lea         ecx,[ebp-24h]
  00000003: E9 00 00 00 00     jmp         __ehhandler$?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBDH@Z
__ehhandler$?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBDH@Z:
  00000008: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000000F: 8B 4A C8           mov         ecx,dword ptr [edx-38h]
  00000012: 33 C8              xor         ecx,eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: B8 00 00 00 00     mov         eax,offset __unwindfunclet$?write@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@PBDH@Z$2
  0000001E: E9 00 00 00 00     jmp         00000023

?seekp@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@JH@Z (public: class std::basic_ostream<char,struct std::char_traits<char> > & __thiscall std::basic_ostream<char,struct std::char_traits<char> >::seekp(long,int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 1C           sub         esp,1Ch
  00000006: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000B: 89 45 E4           mov         dword ptr [ebp-1Ch],eax
  0000000E: 89 45 E8           mov         dword ptr [ebp-18h],eax
  00000011: 89 45 EC           mov         dword ptr [ebp-14h],eax
  00000014: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000017: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  0000001A: 89 45 F8           mov         dword ptr [ebp-8],eax
  0000001D: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000020: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000023: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000026: 8B 08              mov         ecx,dword ptr [eax]
  00000028: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000002B: 03 51 04           add         edx,dword ptr [ecx+4]
  0000002E: 8B CA              mov         ecx,edx
  00000030: E8 00 00 00 00     call        00000035
  00000035: 0F B6 C0           movzx       eax,al
  00000038: 85 C0              test        eax,eax
  0000003A: 75 4A              jne         00000086
  0000003C: 6A 02              push        2
  0000003E: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000041: 51                 push        ecx
  00000042: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000045: 52                 push        edx
  00000046: 8D 45 E4           lea         eax,[ebp-1Ch]
  00000049: 50                 push        eax
  0000004A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000004D: 8B 11              mov         edx,dword ptr [ecx]
  0000004F: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000052: 03 4A 04           add         ecx,dword ptr [edx+4]
  00000055: E8 00 00 00 00     call        0000005A
  0000005A: 8B C8              mov         ecx,eax
  0000005C: E8 00 00 00 00     call        00000061
  00000061: 8B C8              mov         ecx,eax
  00000063: E8 00 00 00 00     call        00000068
  00000068: 3B 05 00 00 00 00  cmp         eax,dword ptr [?seekp@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@JH@Z]
  0000006E: 75 16              jne         00000086
  00000070: 6A 00              push        0
  00000072: 6A 02              push        2
  00000074: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000077: 8B 08              mov         ecx,dword ptr [eax]
  00000079: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000007C: 03 51 04           add         edx,dword ptr [ecx+4]
  0000007F: 8B CA              mov         ecx,edx
  00000081: E8 00 00 00 00     call        00000086
  00000086: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000089: 83 C4 1C           add         esp,1Ch
  0000008C: 3B EC              cmp         ebp,esp
  0000008E: E8 00 00 00 00     call        00000093
  00000093: 8B E5              mov         esp,ebp
  00000095: 5D                 pop         ebp
  00000096: C2 08 00           ret         8

?fail@ios_base@std@@QBE_NXZ (public: bool __thiscall std::ios_base::fail(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 83 E0 06           and         eax,6
  00000019: F7 D8              neg         eax
  0000001B: 1B C0              sbb         eax,eax
  0000001D: F7 D8              neg         eax
  0000001F: 83 C4 04           add         esp,4
  00000022: 3B EC              cmp         ebp,esp
  00000024: E8 00 00 00 00     call        00000029
  00000029: 8B E5              mov         esp,ebp
  0000002B: 5D                 pop         ebp
  0000002C: C3                 ret

??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ (public: virtual __thiscall std::basic_ios<char,struct std::char_traits<char> >::~basic_ios<char,struct std::char_traits<char> >(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??1?$basic_ios@DU?$char_traits@D@std@@@std@@UAE@XZ
  00000017: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001A: E8 00 00 00 00     call        0000001F
  0000001F: 83 C4 04           add         esp,4
  00000022: 3B EC              cmp         ebp,esp
  00000024: E8 00 00 00 00     call        00000029
  00000029: 8B E5              mov         esp,ebp
  0000002B: 5D                 pop         ebp
  0000002C: C3                 ret

??1ios_base@std@@UAE@XZ (public: virtual __thiscall std::ios_base::~ios_base(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??1ios_base@std@@UAE@XZ
  00000017: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001A: 51                 push        ecx
  0000001B: E8 00 00 00 00     call        00000020
  00000020: 83 C4 04           add         esp,4
  00000023: 83 C4 04           add         esp,4
  00000026: 3B EC              cmp         ebp,esp
  00000028: E8 00 00 00 00     call        0000002D
  0000002D: 8B E5              mov         esp,ebp
  0000002F: 5D                 pop         ebp
  00000030: C3                 ret

??_Gios_base@std@@UAEPAXI@Z (public: virtual void * __thiscall std::ios_base::`scalar deleting destructor'(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000019: 83 E0 01           and         eax,1
  0000001C: 74 0C              je          0000002A
  0000001E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000021: 51                 push        ecx
  00000022: E8 00 00 00 00     call        00000027
  00000027: 83 C4 04           add         esp,4
  0000002A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002D: 83 C4 04           add         esp,4
  00000030: 3B EC              cmp         ebp,esp
  00000032: E8 00 00 00 00     call        00000037
  00000037: 8B E5              mov         esp,ebp
  00000039: 5D                 pop         ebp
  0000003A: C2 04 00           ret         4

?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z (public: void __thiscall std::basic_ios<char,struct std::char_traits<char> >::setstate(int,bool)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  00000012: 74 19              je          0000002D
  00000014: 0F B6 45 0C        movzx       eax,byte ptr [ebp+0Ch]
  00000018: 50                 push        eax
  00000019: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001C: E8 00 00 00 00     call        00000021
  00000021: 0B 45 08           or          eax,dword ptr [ebp+8]
  00000024: 50                 push        eax
  00000025: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000028: E8 00 00 00 00     call        0000002D
  0000002D: 83 C4 04           add         esp,4
  00000030: 3B EC              cmp         ebp,esp
  00000032: E8 00 00 00 00     call        00000037
  00000037: 8B E5              mov         esp,ebp
  00000039: 5D                 pop         ebp
  0000003A: C2 08 00           ret         8

?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ (public: class std::basic_streambuf<char,struct std::char_traits<char> > * __thiscall std::basic_ios<char,struct std::char_traits<char> >::rdbuf(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 40 28           mov         eax,dword ptr [eax+28h]
  00000014: 8B E5              mov         esp,ebp
  00000016: 5D                 pop         ebp
  00000017: C3                 ret

?getline@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PADH@Z (public: class std::basic_istream<char,struct std::char_traits<char> > & __thiscall std::basic_istream<char,struct std::char_traits<char> >::getline(char *,int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 6A 0A              push        0Ah
  00000010: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000013: 8B 08              mov         ecx,dword ptr [eax]
  00000015: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000018: 03 51 04           add         edx,dword ptr [ecx+4]
  0000001B: 8B CA              mov         ecx,edx
  0000001D: E8 00 00 00 00     call        00000022
  00000022: 0F B6 C0           movzx       eax,al
  00000025: 50                 push        eax
  00000026: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000029: 51                 push        ecx
  0000002A: 8B 55 08           mov         edx,dword ptr [ebp+8]
  0000002D: 52                 push        edx
  0000002E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000031: E8 00 00 00 00     call        00000036
  00000036: 83 C4 04           add         esp,4
  00000039: 3B EC              cmp         ebp,esp
  0000003B: E8 00 00 00 00     call        00000040
  00000040: 8B E5              mov         esp,ebp
  00000042: 5D                 pop         ebp
  00000043: C2 08 00           ret         8

??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z (public: __thiscall std::basic_ifstream<char,struct std::char_traits<char> >::basic_ifstream<char,struct std::char_traits<char> >(char const *,int,int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z]
  00000010: 50                 push        eax
  00000011: 83 EC 08           sub         esp,8
  00000014: C7 45 EC CC CC CC  mov         dword ptr [ebp-14h],0CCCCCCCCh
            CC
  0000001B: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000022: A1 00 00 00 00     mov         eax,[??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z]
  00000027: 33 C5              xor         eax,ebp
  00000029: 50                 push        eax
  0000002A: 8D 45 F4           lea         eax,[ebp-0Ch]
  0000002D: 64 A3 00 00 00 00  mov         fs:[??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z],eax
  00000033: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  00000036: C7 45 EC 00 00 00  mov         dword ptr [ebp-14h],offset ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
            00
  0000003D: 83 7D 14 00        cmp         dword ptr [ebp+14h],0
  00000041: 74 24              je          00000067
  00000043: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000046: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  0000004C: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000004F: 83 C1 58           add         ecx,58h
  00000052: E8 00 00 00 00     call        00000057
  00000057: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
            00
  0000005E: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000061: 83 C9 01           or          ecx,1
  00000064: 89 4D EC           mov         dword ptr [ebp-14h],ecx
  00000067: 6A 00              push        0
  00000069: 6A 00              push        0
  0000006B: 8B 55 F0           mov         edx,dword ptr [ebp-10h]
  0000006E: 83 C2 08           add         edx,8
  00000071: 52                 push        edx
  00000072: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000075: E8 00 00 00 00     call        0000007A
  0000007A: C7 45 FC 01 00 00  mov         dword ptr [ebp-4],1
            00
  00000081: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000084: 8B 08              mov         ecx,dword ptr [eax]
  00000086: 8B 51 04           mov         edx,dword ptr [ecx+4]
  00000089: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  0000008C: C7 04 10 00 00 00  mov         dword ptr [eax+edx],offset ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
            00
  00000093: 6A 00              push        0
  00000095: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000098: 83 C1 08           add         ecx,8
  0000009B: E8 00 00 00 00     call        000000A0
  000000A0: C6 45 FC 02        mov         byte ptr [ebp-4],2
  000000A4: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  000000A7: 51                 push        ecx
  000000A8: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  000000AB: 83 CA 01           or          edx,1
  000000AE: 52                 push        edx
  000000AF: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000000B2: 50                 push        eax
  000000B3: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  000000B6: 83 C1 08           add         ecx,8
  000000B9: E8 00 00 00 00     call        000000BE
  000000BE: 85 C0              test        eax,eax
  000000C0: 75 14              jne         000000D6
  000000C2: 6A 00              push        0
  000000C4: 6A 02              push        2
  000000C6: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  000000C9: 8B 11              mov         edx,dword ptr [ecx]
  000000CB: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  000000CE: 03 4A 04           add         ecx,dword ptr [edx+4]
  000000D1: E8 00 00 00 00     call        000000D6
  000000D6: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000000DD: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  000000E0: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  000000E3: 64 89 0D 00 00 00  mov         dword ptr fs:[??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z],ecx
            00
  000000EA: 59                 pop         ecx
  000000EB: 83 C4 14           add         esp,14h
  000000EE: 3B EC              cmp         ebp,esp
  000000F0: E8 00 00 00 00     call        000000F5
  000000F5: 8B E5              mov         esp,ebp
  000000F7: 5D                 pop         ebp
  000000F8: C2 10 00           ret         10h

__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0:
  00000000: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000003: 83 E0 01           and         eax,1
  00000006: 0F 84 0F 00 00 00  je          $LN6
  0000000C: 83 65 EC FE        and         dword ptr [ebp-14h],0FEh
  00000010: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000013: 83 C1 58           add         ecx,58h
  00000016: E9 00 00 00 00     jmp         $LN6
$LN6:
  0000001B: C3                 ret
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1:
  0000001C: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000001F: 83 C1 08           add         ecx,8
  00000022: E9 00 00 00 00     jmp         __unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2
__unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2:
  00000027: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000002A: 83 C1 08           add         ecx,8
  0000002D: E9 00 00 00 00     jmp         __ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
__ehhandler$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z:
  00000032: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  00000036: 8D 42 0C           lea         eax,[edx+0Ch]
  00000039: 8B 4A F4           mov         ecx,dword ptr [edx-0Ch]
  0000003C: 33 C8              xor         ecx,eax
  0000003E: E8 00 00 00 00     call        00000043
  00000043: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0
  00000048: E9 00 00 00 00     jmp         0000004D

??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ (public: virtual __thiscall std::basic_istream<char,struct std::char_traits<char> >::~basic_istream<char,struct std::char_traits<char> >(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 48 F8           mov         ecx,dword ptr [eax-8]
  00000014: 8B 51 04           mov         edx,dword ptr [ecx+4]
  00000017: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001A: C7 44 10 F8 00 00  mov         dword ptr [eax+edx-8],offset ??1?$basic_istream@DU?$char_traits@D@std@@@std@@UAE@XZ
            00 00
  00000022: 8B E5              mov         esp,ebp
  00000024: 5D                 pop         ebp
  00000025: C3                 ret

??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ (public: virtual __thiscall std::basic_ifstream<char,struct std::char_traits<char> >::~basic_ifstream<char,struct std::char_traits<char> >(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ]
  00000010: 50                 push        eax
  00000011: 51                 push        ecx
  00000012: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000019: A1 00 00 00 00     mov         eax,[??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ]
  0000001E: 33 C5              xor         eax,ebp
  00000020: 50                 push        eax
  00000021: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000024: 64 A3 00 00 00 00  mov         fs:[??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ],eax
  0000002A: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  0000002D: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000030: 8B 48 A8           mov         ecx,dword ptr [eax-58h]
  00000033: 8B 51 04           mov         edx,dword ptr [ecx+4]
  00000036: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000039: C7 44 10 A8 00 00  mov         dword ptr [eax+edx-58h],offset ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ
            00 00
  00000041: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ
            00
  00000048: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000004B: 83 E9 50           sub         ecx,50h
  0000004E: E8 00 00 00 00     call        00000053
  00000053: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  0000005A: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000005D: 83 E9 50           sub         ecx,50h
  00000060: E8 00 00 00 00     call        00000065
  00000065: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000068: 64 89 0D 00 00 00  mov         dword ptr fs:[??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ],ecx
            00
  0000006F: 59                 pop         ecx
  00000070: 83 C4 10           add         esp,10h
  00000073: 3B EC              cmp         ebp,esp
  00000075: E8 00 00 00 00     call        0000007A
  0000007A: 8B E5              mov         esp,ebp
  0000007C: 5D                 pop         ebp
  0000007D: C3                 ret

__unwindfunclet$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ$0:
  00000000: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000003: 83 E9 50           sub         ecx,50h
  00000006: E9 00 00 00 00     jmp         __ehhandler$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ
__ehhandler$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ:
  0000000B: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000F: 8D 42 0C           lea         eax,[edx+0Ch]
  00000012: 8B 4A F8           mov         ecx,dword ptr [edx-8]
  00000015: 33 C8              xor         ecx,eax
  00000017: E8 00 00 00 00     call        0000001C
  0000001C: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAE@XZ$0
  00000021: E9 00 00 00 00     jmp         00000026

?is_open@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QBE_NXZ (public: bool __thiscall std::basic_ifstream<char,struct std::char_traits<char> >::is_open(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: 83 C1 08           add         ecx,8
  00000014: E8 00 00 00 00     call        00000019
  00000019: 83 C4 04           add         esp,4
  0000001C: 3B EC              cmp         ebp,esp
  0000001E: E8 00 00 00 00     call        00000023
  00000023: 8B E5              mov         esp,ebp
  00000025: 5D                 pop         ebp
  00000026: C3                 ret

?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QAEXXZ (public: void __thiscall std::basic_ifstream<char,struct std::char_traits<char> >::close(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: 83 C1 08           add         ecx,8
  00000014: E8 00 00 00 00     call        00000019
  00000019: 85 C0              test        eax,eax
  0000001B: 75 16              jne         00000033
  0000001D: 6A 00              push        0
  0000001F: 6A 02              push        2
  00000021: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000024: 8B 08              mov         ecx,dword ptr [eax]
  00000026: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000029: 03 51 04           add         edx,dword ptr [ecx+4]
  0000002C: 8B CA              mov         ecx,edx
  0000002E: E8 00 00 00 00     call        00000033
  00000033: 83 C4 04           add         esp,4
  00000036: 3B EC              cmp         ebp,esp
  00000038: E8 00 00 00 00     call        0000003D
  0000003D: 8B E5              mov         esp,ebp
  0000003F: 5D                 pop         ebp
  00000040: C3                 ret

??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ (public: virtual __thiscall std::basic_filebuf<char,struct std::char_traits<char> >::~basic_filebuf<char,struct std::char_traits<char> >(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ]
  00000010: 50                 push        eax
  00000011: 51                 push        ecx
  00000012: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000019: A1 00 00 00 00     mov         eax,[??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ]
  0000001E: 33 C5              xor         eax,ebp
  00000020: 50                 push        eax
  00000021: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000024: 64 A3 00 00 00 00  mov         fs:[??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ],eax
  0000002A: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  0000002D: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000030: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  00000036: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
            00
  0000003D: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000040: 0F B6 51 48        movzx       edx,byte ptr [ecx+48h]
  00000044: 85 D2              test        edx,edx
  00000046: 74 08              je          00000050
  00000048: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000004B: E8 00 00 00 00     call        00000050
  00000050: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000057: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000005A: E8 00 00 00 00     call        0000005F
  0000005F: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000062: 64 89 0D 00 00 00  mov         dword ptr fs:[??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ],ecx
            00
  00000069: 59                 pop         ecx
  0000006A: 83 C4 10           add         esp,10h
  0000006D: 3B EC              cmp         ebp,esp
  0000006F: E8 00 00 00 00     call        00000074
  00000074: 8B E5              mov         esp,ebp
  00000076: 5D                 pop         ebp
  00000077: C3                 ret

__unwindfunclet$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ$0:
  00000000: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000003: E9 00 00 00 00     jmp         __ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ
__ehhandler$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ:
  00000008: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000000F: 8B 4A F8           mov         ecx,dword ptr [edx-8]
  00000012: 33 C8              xor         ecx,eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAE@XZ$0
  0000001E: E9 00 00 00 00     jmp         00000023

??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ (public: virtual __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::~basic_streambuf<char,struct std::char_traits<char> >(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ]
  00000010: 50                 push        eax
  00000011: 51                 push        ecx
  00000012: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000019: A1 00 00 00 00     mov         eax,[??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ]
  0000001E: 33 C5              xor         eax,ebp
  00000020: 50                 push        eax
  00000021: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000024: 64 A3 00 00 00 00  mov         fs:[??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ],eax
  0000002A: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  0000002D: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000030: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
  00000036: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
            00
  0000003D: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000040: 8B 51 38           mov         edx,dword ptr [ecx+38h]
  00000043: 52                 push        edx
  00000044: E8 00 00 00 00     call        00000049
  00000049: 83 C4 04           add         esp,4
  0000004C: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000053: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000056: 83 C1 04           add         ecx,4
  00000059: E8 00 00 00 00     call        0000005E
  0000005E: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000061: 64 89 0D 00 00 00  mov         dword ptr fs:[??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ],ecx
            00
  00000068: 59                 pop         ecx
  00000069: 83 C4 10           add         esp,10h
  0000006C: 3B EC              cmp         ebp,esp
  0000006E: E8 00 00 00 00     call        00000073
  00000073: 8B E5              mov         esp,ebp
  00000075: 5D                 pop         ebp
  00000076: C3                 ret

__unwindfunclet$??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ$0:
  00000000: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000003: 83 C1 04           add         ecx,4
  00000006: E9 00 00 00 00     jmp         __ehhandler$??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ
__ehhandler$??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ:
  0000000B: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000F: 8D 42 0C           lea         eax,[edx+0Ch]
  00000012: 8B 4A F8           mov         ecx,dword ptr [edx-8]
  00000015: 33 C8              xor         ecx,eax
  00000017: E8 00 00 00 00     call        0000001C
  0000001C: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAE@XZ$0
  00000021: E9 00 00 00 00     jmp         00000026

?overflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z (protected: virtual int __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::overflow(int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: E8 00 00 00 00     call        00000013
  00000013: 83 C4 04           add         esp,4
  00000016: 3B EC              cmp         ebp,esp
  00000018: E8 00 00 00 00     call        0000001D
  0000001D: 8B E5              mov         esp,ebp
  0000001F: 5D                 pop         ebp
  00000020: C2 04 00           ret         4

?eof@?$char_traits@D@std@@SAHXZ (public: static int __cdecl std::char_traits<char>::eof(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 C8 FF           or          eax,0FFh
  00000006: 5D                 pop         ebp
  00000007: C3                 ret

?pbackfail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHH@Z (protected: virtual int __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::pbackfail(int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: E8 00 00 00 00     call        00000013
  00000013: 83 C4 04           add         esp,4
  00000016: 3B EC              cmp         ebp,esp
  00000018: E8 00 00 00 00     call        0000001D
  0000001D: 8B E5              mov         esp,ebp
  0000001F: 5D                 pop         ebp
  00000020: C2 04 00           ret         4

?showmanyc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ (protected: virtual int __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::showmanyc(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 33 C0              xor         eax,eax
  00000010: 8B E5              mov         esp,ebp
  00000012: 5D                 pop         ebp
  00000013: C3                 ret

?underflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ (protected: virtual int __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::underflow(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: E8 00 00 00 00     call        00000013
  00000013: 83 C4 04           add         esp,4
  00000016: 3B EC              cmp         ebp,esp
  00000018: E8 00 00 00 00     call        0000001D
  0000001D: 8B E5              mov         esp,ebp
  0000001F: 5D                 pop         ebp
  00000020: C3                 ret

?uflow@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ (protected: virtual int __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::uflow(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 10           sub         esp,10h
  00000006: 56                 push        esi
  00000007: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000C: 89 45 F0           mov         dword ptr [ebp-10h],eax
  0000000F: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000012: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000015: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000018: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000001B: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001E: 8B 10              mov         edx,dword ptr [eax]
  00000020: 8B F4              mov         esi,esp
  00000022: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000025: 8B 42 10           mov         eax,dword ptr [edx+10h]
  00000028: FF D0              call        eax
  0000002A: 3B F4              cmp         esi,esp
  0000002C: E8 00 00 00 00     call        00000031
  00000031: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000034: E8 00 00 00 00     call        00000039
  00000039: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  0000003C: 8D 4D F8           lea         ecx,[ebp-8]
  0000003F: 51                 push        ecx
  00000040: 8D 55 F4           lea         edx,[ebp-0Ch]
  00000043: 52                 push        edx
  00000044: E8 00 00 00 00     call        00000049
  00000049: 83 C4 08           add         esp,8
  0000004C: 0F B6 C0           movzx       eax,al
  0000004F: 85 C0              test        eax,eax
  00000051: 74 0A              je          0000005D
  00000053: E8 00 00 00 00     call        00000058
  00000058: 89 45 F0           mov         dword ptr [ebp-10h],eax
  0000005B: EB 14              jmp         00000071
  0000005D: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000060: E8 00 00 00 00     call        00000065
  00000065: 50                 push        eax
  00000066: E8 00 00 00 00     call        0000006B
  0000006B: 83 C4 04           add         esp,4
  0000006E: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000071: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000074: 5E                 pop         esi
  00000075: 83 C4 10           add         esp,10h
  00000078: 3B EC              cmp         ebp,esp
  0000007A: E8 00 00 00 00     call        0000007F
  0000007F: 8B E5              mov         esp,ebp
  00000081: 5D                 pop         ebp
  00000082: C3                 ret

?to_int_type@?$char_traits@D@std@@SAHABD@Z (public: static int __cdecl std::char_traits<char>::to_int_type(char const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000006: 0F B6 00           movzx       eax,byte ptr [eax]
  00000009: 5D                 pop         ebp
  0000000A: C3                 ret

?eq_int_type@?$char_traits@D@std@@SA_NABH0@Z (public: static bool __cdecl std::char_traits<char>::eq_int_type(int const &,int const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000006: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000009: 8B 10              mov         edx,dword ptr [eax]
  0000000B: 33 C0              xor         eax,eax
  0000000D: 3B 11              cmp         edx,dword ptr [ecx]
  0000000F: 0F 94 C0           sete        al
  00000012: 5D                 pop         ebp
  00000013: C3                 ret

?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADH@Z (protected: virtual int __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::xsgetn(char *,int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: 56                 push        esi
  00000005: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000C: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000F: 8B F4              mov         esi,esp
  00000011: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000014: 50                 push        eax
  00000015: 6A FF              push        0FFh
  00000017: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000001A: 51                 push        ecx
  0000001B: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000001E: 8B 02              mov         eax,dword ptr [edx]
  00000020: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000023: 8B 50 1C           mov         edx,dword ptr [eax+1Ch]
  00000026: FF D2              call        edx
  00000028: 3B F4              cmp         esi,esp
  0000002A: E8 00 00 00 00     call        0000002F
  0000002F: 5E                 pop         esi
  00000030: 83 C4 04           add         esp,4
  00000033: 3B EC              cmp         ebp,esp
  00000035: E8 00 00 00 00     call        0000003A
  0000003A: 8B E5              mov         esp,ebp
  0000003C: 5D                 pop         ebp
  0000003D: C2 08 00           ret         8

?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z (protected: virtual int __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::_Xsgetn_s(char *,unsigned int,int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 20           sub         esp,20h
  00000006: 56                 push        esi
  00000007: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000C: 89 45 E0           mov         dword ptr [ebp-20h],eax
  0000000F: 89 45 E4           mov         dword ptr [ebp-1Ch],eax
  00000012: 89 45 E8           mov         dword ptr [ebp-18h],eax
  00000015: 89 45 EC           mov         dword ptr [ebp-14h],eax
  00000018: 89 45 F0           mov         dword ptr [ebp-10h],eax
  0000001B: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  0000001E: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000021: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000024: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000027: C7 45 E4 00 00 00  mov         dword ptr [ebp-1Ch],offset ?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z
            00
  0000002E: 83 7D 10 00        cmp         dword ptr [ebp+10h],0
  00000032: 0F 8E D8 00 00 00  jle         00000110
  00000038: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000003B: E8 00 00 00 00     call        00000040
  00000040: 89 45 EC           mov         dword ptr [ebp-14h],eax
  00000043: 83 7D EC 00        cmp         dword ptr [ebp-14h],0
  00000047: 7E 5A              jle         000000A3
  00000049: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  0000004C: 89 45 E8           mov         dword ptr [ebp-18h],eax
  0000004F: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  00000052: 3B 4D E8           cmp         ecx,dword ptr [ebp-18h]
  00000055: 7D 06              jge         0000005D
  00000057: 8B 55 10           mov         edx,dword ptr [ebp+10h]
  0000005A: 89 55 E8           mov         dword ptr [ebp-18h],edx
  0000005D: 8B 45 E8           mov         eax,dword ptr [ebp-18h]
  00000060: 50                 push        eax
  00000061: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000064: E8 00 00 00 00     call        00000069
  00000069: 50                 push        eax
  0000006A: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  0000006D: 51                 push        ecx
  0000006E: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000071: 52                 push        edx
  00000072: E8 00 00 00 00     call        00000077
  00000077: 83 C4 10           add         esp,10h
  0000007A: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000007D: 03 45 E8           add         eax,dword ptr [ebp-18h]
  00000080: 89 45 08           mov         dword ptr [ebp+8],eax
  00000083: 8B 4D E4           mov         ecx,dword ptr [ebp-1Ch]
  00000086: 03 4D E8           add         ecx,dword ptr [ebp-18h]
  00000089: 89 4D E4           mov         dword ptr [ebp-1Ch],ecx
  0000008C: 8B 55 10           mov         edx,dword ptr [ebp+10h]
  0000008F: 2B 55 E8           sub         edx,dword ptr [ebp-18h]
  00000092: 89 55 10           mov         dword ptr [ebp+10h],edx
  00000095: 8B 45 E8           mov         eax,dword ptr [ebp-18h]
  00000098: 50                 push        eax
  00000099: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000009C: E8 00 00 00 00     call        000000A1
  000000A1: EB 68              jmp         0000010B
  000000A3: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000000A6: 8B 11              mov         edx,dword ptr [ecx]
  000000A8: 8B F4              mov         esi,esp
  000000AA: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000000AD: 8B 42 14           mov         eax,dword ptr [edx+14h]
  000000B0: FF D0              call        eax
  000000B2: 3B F4              cmp         esi,esp
  000000B4: E8 00 00 00 00     call        000000B9
  000000B9: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  000000BC: E8 00 00 00 00     call        000000C1
  000000C1: 89 45 E0           mov         dword ptr [ebp-20h],eax
  000000C4: 8D 4D F4           lea         ecx,[ebp-0Ch]
  000000C7: 51                 push        ecx
  000000C8: 8D 55 E0           lea         edx,[ebp-20h]
  000000CB: 52                 push        edx
  000000CC: E8 00 00 00 00     call        000000D1
  000000D1: 83 C4 08           add         esp,8
  000000D4: 0F B6 C0           movzx       eax,al
  000000D7: 85 C0              test        eax,eax
  000000D9: 74 04              je          000000DF
  000000DB: EB 33              jmp         00000110
  000000DD: EB 2C              jmp         0000010B
  000000DF: 8D 4D F4           lea         ecx,[ebp-0Ch]
  000000E2: 51                 push        ecx
  000000E3: E8 00 00 00 00     call        000000E8
  000000E8: 83 C4 04           add         esp,4
  000000EB: 8B 55 08           mov         edx,dword ptr [ebp+8]
  000000EE: 88 02              mov         byte ptr [edx],al
  000000F0: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000000F3: 83 C0 01           add         eax,1
  000000F6: 89 45 08           mov         dword ptr [ebp+8],eax
  000000F9: 8B 4D E4           mov         ecx,dword ptr [ebp-1Ch]
  000000FC: 83 C1 01           add         ecx,1
  000000FF: 89 4D E4           mov         dword ptr [ebp-1Ch],ecx
  00000102: 8B 55 10           mov         edx,dword ptr [ebp+10h]
  00000105: 83 EA 01           sub         edx,1
  00000108: 89 55 10           mov         dword ptr [ebp+10h],edx
  0000010B: E9 1E FF FF FF     jmp         0000002E
  00000110: 8B 45 E4           mov         eax,dword ptr [ebp-1Ch]
  00000113: 52                 push        edx
  00000114: 8B CD              mov         ecx,ebp
  00000116: 50                 push        eax
  00000117: 8D 15 00 00 00 00  lea         edx,[?_Xsgetn_s@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPADIH@Z]
  0000011D: E8 00 00 00 00     call        00000122
  00000122: 58                 pop         eax
  00000123: 5A                 pop         edx
  00000124: 5E                 pop         esi
  00000125: 83 C4 20           add         esp,20h
  00000128: 3B EC              cmp         ebp,esp
  0000012A: E8 00 00 00 00     call        0000012F
  0000012F: 8B E5              mov         esp,ebp
  00000131: 5D                 pop         ebp
  00000132: C2 0C 00           ret         0Ch
  00000135: 8D 49 00           lea         ecx,[ecx]
$LN12:
  00000138: 01 00              add         dword ptr [eax],eax
  0000013A: 00 00              add         byte ptr [eax],al
  0000013C: 00 00              add         byte ptr [eax],al
  0000013E: 00 00              add         byte ptr [eax],al
$LN11:
  00000140: F4                 hlt
  00000141: FF
  00000142: FF
  00000143: FF 04 00           inc         dword ptr [eax+eax]
  00000146: 00 00              add         byte ptr [eax],al
  00000148: 00 00              add         byte ptr [eax],al
  0000014A: 00 00              add         byte ptr [eax],al
$LN10:
  0000014C: 5F                 pop         edi
  0000014D: 4D                 dec         ebp
  0000014E: 65 74 61           je          000001B2
  00000151: 00

?to_char_type@?$char_traits@D@std@@SADABH@Z (public: static char __cdecl std::char_traits<char>::to_char_type(int const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000006: 8A 00              mov         al,byte ptr [eax]
  00000008: 5D                 pop         ebp
  00000009: C3                 ret

?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z (protected: virtual int __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::xsputn(char const *,int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 18           sub         esp,18h
  00000006: 56                 push        esi
  00000007: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000C: 89 45 E8           mov         dword ptr [ebp-18h],eax
  0000000F: 89 45 EC           mov         dword ptr [ebp-14h],eax
  00000012: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000015: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000018: 89 45 F8           mov         dword ptr [ebp-8],eax
  0000001B: 89 45 FC           mov         dword ptr [ebp-4],eax
  0000001E: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000021: C7 45 F0 00 00 00  mov         dword ptr [ebp-10h],offset ?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHPBDH@Z
            00
  00000028: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  0000002C: 0F 8E D4 00 00 00  jle         00000106
  00000032: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000035: E8 00 00 00 00     call        0000003A
  0000003A: 89 45 F8           mov         dword ptr [ebp-8],eax
  0000003D: 83 7D F8 00        cmp         dword ptr [ebp-8],0
  00000041: 7E 5A              jle         0000009D
  00000043: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  00000046: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000049: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  0000004C: 3B 4D F4           cmp         ecx,dword ptr [ebp-0Ch]
  0000004F: 7D 06              jge         00000057
  00000051: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  00000054: 89 55 F4           mov         dword ptr [ebp-0Ch],edx
  00000057: 8B 45 F4           mov         eax,dword ptr [ebp-0Ch]
  0000005A: 50                 push        eax
  0000005B: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000005E: 51                 push        ecx
  0000005F: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  00000062: 52                 push        edx
  00000063: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000066: E8 00 00 00 00     call        0000006B
  0000006B: 50                 push        eax
  0000006C: E8 00 00 00 00     call        00000071
  00000071: 83 C4 10           add         esp,10h
  00000074: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000077: 03 45 F4           add         eax,dword ptr [ebp-0Ch]
  0000007A: 89 45 08           mov         dword ptr [ebp+8],eax
  0000007D: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000080: 03 4D F4           add         ecx,dword ptr [ebp-0Ch]
  00000083: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  00000086: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  00000089: 2B 55 F4           sub         edx,dword ptr [ebp-0Ch]
  0000008C: 89 55 0C           mov         dword ptr [ebp+0Ch],edx
  0000008F: 8B 45 F4           mov         eax,dword ptr [ebp-0Ch]
  00000092: 50                 push        eax
  00000093: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000096: E8 00 00 00 00     call        0000009B
  0000009B: EB 64              jmp         00000101
  0000009D: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  000000A0: 51                 push        ecx
  000000A1: E8 00 00 00 00     call        000000A6
  000000A6: 83 C4 04           add         esp,4
  000000A9: 8B F4              mov         esi,esp
  000000AB: 50                 push        eax
  000000AC: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  000000AF: 8B 02              mov         eax,dword ptr [edx]
  000000B1: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000000B4: 8B 50 04           mov         edx,dword ptr [eax+4]
  000000B7: FF D2              call        edx
  000000B9: 3B F4              cmp         esi,esp
  000000BB: E8 00 00 00 00     call        000000C0
  000000C0: 89 45 EC           mov         dword ptr [ebp-14h],eax
  000000C3: E8 00 00 00 00     call        000000C8
  000000C8: 89 45 E8           mov         dword ptr [ebp-18h],eax
  000000CB: 8D 45 EC           lea         eax,[ebp-14h]
  000000CE: 50                 push        eax
  000000CF: 8D 4D E8           lea         ecx,[ebp-18h]
  000000D2: 51                 push        ecx
  000000D3: E8 00 00 00 00     call        000000D8
  000000D8: 83 C4 08           add         esp,8
  000000DB: 0F B6 D0           movzx       edx,al
  000000DE: 85 D2              test        edx,edx
  000000E0: 74 04              je          000000E6
  000000E2: EB 22              jmp         00000106
  000000E4: EB 1B              jmp         00000101
  000000E6: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000000E9: 83 C0 01           add         eax,1
  000000EC: 89 45 08           mov         dword ptr [ebp+8],eax
  000000EF: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  000000F2: 83 C1 01           add         ecx,1
  000000F5: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  000000F8: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  000000FB: 83 EA 01           sub         edx,1
  000000FE: 89 55 0C           mov         dword ptr [ebp+0Ch],edx
  00000101: E9 22 FF FF FF     jmp         00000028
  00000106: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000109: 5E                 pop         esi
  0000010A: 83 C4 18           add         esp,18h
  0000010D: 3B EC              cmp         ebp,esp
  0000010F: E8 00 00 00 00     call        00000114
  00000114: 8B E5              mov         esp,ebp
  00000116: 5D                 pop         ebp
  00000117: C2 08 00           ret         8

?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z (protected: virtual class std::fpos<int> __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::seekoff(long,int,int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: A1 00 00 00 00     mov         eax,[?seekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z]
  00000013: 50                 push        eax
  00000014: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000017: E8 00 00 00 00     call        0000001C
  0000001C: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000001F: 83 C4 04           add         esp,4
  00000022: 3B EC              cmp         ebp,esp
  00000024: E8 00 00 00 00     call        00000029
  00000029: 8B E5              mov         esp,ebp
  0000002B: 5D                 pop         ebp
  0000002C: C2 10 00           ret         10h

?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z (protected: virtual class std::fpos<int> __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::seekpos(class std::fpos<int>,int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: A1 00 00 00 00     mov         eax,[?seekpos@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z]
  00000013: 50                 push        eax
  00000014: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000017: E8 00 00 00 00     call        0000001C
  0000001C: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000001F: 83 C4 04           add         esp,4
  00000022: 3B EC              cmp         ebp,esp
  00000024: E8 00 00 00 00     call        00000029
  00000029: 8B E5              mov         esp,ebp
  0000002B: 5D                 pop         ebp
  0000002C: C2 20 00           ret         20h

?setbuf@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEPAV12@PADH@Z (protected: virtual class std::basic_streambuf<char,struct std::char_traits<char> > * __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::setbuf(char *,int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B E5              mov         esp,ebp
  00000013: 5D                 pop         ebp
  00000014: C2 08 00           ret         8

?sync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEHXZ (protected: virtual int __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::sync(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 33 C0              xor         eax,eax
  00000010: 8B E5              mov         esp,ebp
  00000012: 5D                 pop         ebp
  00000013: C3                 ret

?imbue@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z (protected: virtual void __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::imbue(class std::locale const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B E5              mov         esp,ebp
  00000010: 5D                 pop         ebp
  00000011: C2 04 00           ret         4

?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z (protected: virtual int __thiscall std::basic_filebuf<char,struct std::char_traits<char> >::overflow(int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z]
  00000010: 50                 push        eax
  00000011: 81 EC E0 00 00 00  sub         esp,0E0h
  00000017: 53                 push        ebx
  00000018: 56                 push        esi
  00000019: 57                 push        edi
  0000001A: 51                 push        ecx
  0000001B: 8D BD 14 FF FF FF  lea         edi,[ebp-0ECh]
  00000021: B9 38 00 00 00     mov         ecx,38h
  00000026: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000002B: F3 AB              rep stos    dword ptr [edi]
  0000002D: 59                 pop         ecx
  0000002E: A1 00 00 00 00     mov         eax,[?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z]
  00000033: 33 C5              xor         eax,ebp
  00000035: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000038: 50                 push        eax
  00000039: 8D 45 F4           lea         eax,[ebp-0Ch]
  0000003C: 64 A3 00 00 00 00  mov         fs:[?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z],eax
  00000042: 89 4D EC           mov         dword ptr [ebp-14h],ecx
  00000045: C7 85 44 FF FF FF  mov         dword ptr [ebp-0BCh],offset ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
            00 00 00 00
  0000004F: E8 00 00 00 00     call        00000054
  00000054: 89 45 94           mov         dword ptr [ebp-6Ch],eax
  00000057: 8D 45 08           lea         eax,[ebp+8]
  0000005A: 50                 push        eax
  0000005B: 8D 4D 94           lea         ecx,[ebp-6Ch]
  0000005E: 51                 push        ecx
  0000005F: E8 00 00 00 00     call        00000064
  00000064: 83 C4 08           add         esp,8
  00000067: 0F B6 D0           movzx       edx,al
  0000006A: 85 D2              test        edx,edx
  0000006C: 74 16              je          00000084
  0000006E: 8D 45 08           lea         eax,[ebp+8]
  00000071: 50                 push        eax
  00000072: E8 00 00 00 00     call        00000077
  00000077: 83 C4 04           add         esp,4
  0000007A: E9 E3 03 00 00     jmp         00000462
  0000007F: E9 DE 03 00 00     jmp         00000462
  00000084: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000087: E8 00 00 00 00     call        0000008C
  0000008C: 85 C0              test        eax,eax
  0000008E: 74 3B              je          000000CB
  00000090: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000093: E8 00 00 00 00     call        00000098
  00000098: 8B F0              mov         esi,eax
  0000009A: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  0000009D: E8 00 00 00 00     call        000000A2
  000000A2: 3B F0              cmp         esi,eax
  000000A4: 73 25              jae         000000CB
  000000A6: 8D 4D 08           lea         ecx,[ebp+8]
  000000A9: 51                 push        ecx
  000000AA: E8 00 00 00 00     call        000000AF
  000000AF: 83 C4 04           add         esp,4
  000000B2: 8A D8              mov         bl,al
  000000B4: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000000B7: E8 00 00 00 00     call        000000BC
  000000BC: 88 18              mov         byte ptr [eax],bl
  000000BE: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000000C1: E9 9C 03 00 00     jmp         00000462
  000000C6: E9 97 03 00 00     jmp         00000462
  000000CB: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  000000CE: 83 7A 4C 00        cmp         dword ptr [edx+4Ch],0
  000000D2: 75 0F              jne         000000E3
  000000D4: E8 00 00 00 00     call        000000D9
  000000D9: E9 84 03 00 00     jmp         00000462
  000000DE: E9 7F 03 00 00     jmp         00000462
  000000E3: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  000000E6: 83 78 3C 00        cmp         dword ptr [eax+3Ch],0
  000000EA: 75 4C              jne         00000138
  000000EC: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000000EF: 8B 51 4C           mov         edx,dword ptr [ecx+4Ch]
  000000F2: 52                 push        edx
  000000F3: 8D 45 08           lea         eax,[ebp+8]
  000000F6: 50                 push        eax
  000000F7: E8 00 00 00 00     call        000000FC
  000000FC: 83 C4 04           add         esp,4
  000000FF: 0F B6 C8           movzx       ecx,al
  00000102: 51                 push        ecx
  00000103: E8 00 00 00 00     call        00000108
  00000108: 83 C4 08           add         esp,8
  0000010B: 0F B6 D0           movzx       edx,al
  0000010E: 85 D2              test        edx,edx
  00000110: 74 0B              je          0000011D
  00000112: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000115: 89 85 40 FF FF FF  mov         dword ptr [ebp-0C0h],eax
  0000011B: EB 0B              jmp         00000128
  0000011D: E8 00 00 00 00     call        00000122
  00000122: 89 85 40 FF FF FF  mov         dword ptr [ebp-0C0h],eax
  00000128: 8B 85 40 FF FF FF  mov         eax,dword ptr [ebp-0C0h]
  0000012E: E9 2F 03 00 00     jmp         00000462
  00000133: E9 2A 03 00 00     jmp         00000462
  00000138: C7 45 E8 08 00 00  mov         dword ptr [ebp-18h],8
            00
  0000013F: 8D 4D 08           lea         ecx,[ebp+8]
  00000142: 51                 push        ecx
  00000143: E8 00 00 00 00     call        00000148
  00000148: 83 C4 04           add         esp,4
  0000014B: 88 45 E3           mov         byte ptr [ebp-1Dh],al
  0000014E: 6A 00              push        0
  00000150: 6A 08              push        8
  00000152: 8D 4D A0           lea         ecx,[ebp-60h]
  00000155: E8 00 00 00 00     call        0000015A
  0000015A: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
            00
  00000161: 8D 55 C8           lea         edx,[ebp-38h]
  00000164: 52                 push        edx
  00000165: 8D 45 84           lea         eax,[ebp-7Ch]
  00000168: 50                 push        eax
  00000169: 8D 4D A0           lea         ecx,[ebp-60h]
  0000016C: E8 00 00 00 00     call        00000171
  00000171: 89 85 3C FF FF FF  mov         dword ptr [ebp-0C4h],eax
  00000177: 8B 8D 3C FF FF FF  mov         ecx,dword ptr [ebp-0C4h]
  0000017D: 89 8D 38 FF FF FF  mov         dword ptr [ebp-0C8h],ecx
  00000183: C6 45 FC 01        mov         byte ptr [ebp-4],1
  00000187: 8B 8D 38 FF FF FF  mov         ecx,dword ptr [ebp-0C8h]
  0000018D: E8 00 00 00 00     call        00000192
  00000192: 8B F0              mov         esi,eax
  00000194: 8D 4D A0           lea         ecx,[ebp-60h]
  00000197: E8 00 00 00 00     call        0000019C
  0000019C: 03 F0              add         esi,eax
  0000019E: 56                 push        esi
  0000019F: 8D 95 78 FF FF FF  lea         edx,[ebp-88h]
  000001A5: 52                 push        edx
  000001A6: 8D 4D A0           lea         ecx,[ebp-60h]
  000001A9: E8 00 00 00 00     call        000001AE
  000001AE: 89 85 34 FF FF FF  mov         dword ptr [ebp-0CCh],eax
  000001B4: 8B 85 34 FF FF FF  mov         eax,dword ptr [ebp-0CCh]
  000001BA: 89 85 30 FF FF FF  mov         dword ptr [ebp-0D0h],eax
  000001C0: C6 45 FC 02        mov         byte ptr [ebp-4],2
  000001C4: 8B 8D 30 FF FF FF  mov         ecx,dword ptr [ebp-0D0h]
  000001CA: E8 00 00 00 00     call        000001CF
  000001CF: 50                 push        eax
  000001D0: 8D 4D D4           lea         ecx,[ebp-2Ch]
  000001D3: 51                 push        ecx
  000001D4: 8D 55 E4           lea         edx,[ebp-1Ch]
  000001D7: 52                 push        edx
  000001D8: 8D 45 E3           lea         eax,[ebp-1Dh]
  000001DB: 50                 push        eax
  000001DC: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000001DF: 83 C1 44           add         ecx,44h
  000001E2: 51                 push        ecx
  000001E3: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  000001E6: 8B 4A 3C           mov         ecx,dword ptr [edx+3Ch]
  000001E9: E8 00 00 00 00     call        000001EE
  000001EE: 89 45 90           mov         dword ptr [ebp-70h],eax
  000001F1: C6 45 FC 01        mov         byte ptr [ebp-4],1
  000001F5: 8D 8D 78 FF FF FF  lea         ecx,[ebp-88h]
  000001FB: E8 00 00 00 00     call        00000200
  00000200: C6 45 FC 00        mov         byte ptr [ebp-4],0
  00000204: 8D 4D 84           lea         ecx,[ebp-7Ch]
  00000207: E8 00 00 00 00     call        0000020C
  0000020C: 8B 45 90           mov         eax,dword ptr [ebp-70h]
  0000020F: 89 85 2C FF FF FF  mov         dword ptr [ebp-0D4h],eax
  00000215: 83 BD 2C FF FF FF  cmp         dword ptr [ebp-0D4h],0
            00
  0000021C: 0F 8C 0A 02 00 00  jl          0000042C
  00000222: 83 BD 2C FF FF FF  cmp         dword ptr [ebp-0D4h],1
            01
  00000229: 7E 12              jle         0000023D
  0000022B: 83 BD 2C FF FF FF  cmp         dword ptr [ebp-0D4h],3
            03
  00000232: 0F 84 A0 01 00 00  je          000003D8
  00000238: E9 EF 01 00 00     jmp         0000042C
  0000023D: 8D 8D 6C FF FF FF  lea         ecx,[ebp-94h]
  00000243: 51                 push        ecx
  00000244: 8D 4D A0           lea         ecx,[ebp-60h]
  00000247: E8 00 00 00 00     call        0000024C
  0000024C: 89 85 28 FF FF FF  mov         dword ptr [ebp-0D8h],eax
  00000252: 8B 95 28 FF FF FF  mov         edx,dword ptr [ebp-0D8h]
  00000258: 89 95 24 FF FF FF  mov         dword ptr [ebp-0DCh],edx
  0000025E: C6 45 FC 03        mov         byte ptr [ebp-4],3
  00000262: 8B 8D 24 FF FF FF  mov         ecx,dword ptr [ebp-0DCh]
  00000268: E8 00 00 00 00     call        0000026D
  0000026D: 8B 4D C8           mov         ecx,dword ptr [ebp-38h]
  00000270: 2B C8              sub         ecx,eax
  00000272: 89 4D 98           mov         dword ptr [ebp-68h],ecx
  00000275: C6 45 FC 00        mov         byte ptr [ebp-4],0
  00000279: 8D 8D 6C FF FF FF  lea         ecx,[ebp-94h]
  0000027F: E8 00 00 00 00     call        00000284
  00000284: 83 7D 98 00        cmp         dword ptr [ebp-68h],0
  00000288: 76 66              jbe         000002F0
  0000028A: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  0000028D: 8B 42 4C           mov         eax,dword ptr [edx+4Ch]
  00000290: 50                 push        eax
  00000291: 8B 4D 98           mov         ecx,dword ptr [ebp-68h]
  00000294: 51                 push        ecx
  00000295: 6A 01              push        1
  00000297: 8D 95 5C FF FF FF  lea         edx,[ebp-0A4h]
  0000029D: 52                 push        edx
  0000029E: 8D 4D A0           lea         ecx,[ebp-60h]
  000002A1: E8 00 00 00 00     call        000002A6
  000002A6: 89 85 20 FF FF FF  mov         dword ptr [ebp-0E0h],eax
  000002AC: 8B 85 20 FF FF FF  mov         eax,dword ptr [ebp-0E0h]
  000002B2: 89 85 1C FF FF FF  mov         dword ptr [ebp-0E4h],eax
  000002B8: C6 45 FC 04        mov         byte ptr [ebp-4],4
  000002BC: 8B 8D 44 FF FF FF  mov         ecx,dword ptr [ebp-0BCh]
  000002C2: 83 C9 01           or          ecx,1
  000002C5: 89 8D 44 FF FF FF  mov         dword ptr [ebp-0BCh],ecx
  000002CB: 8B 8D 1C FF FF FF  mov         ecx,dword ptr [ebp-0E4h]
  000002D1: E8 00 00 00 00     call        000002D6
  000002D6: 50                 push        eax
  000002D7: E8 00 00 00 00     call        000002DC
  000002DC: 83 C4 10           add         esp,10h
  000002DF: 39 45 98           cmp         dword ptr [ebp-68h],eax
  000002E2: 74 0C              je          000002F0
  000002E4: C7 85 18 FF FF FF  mov         dword ptr [ebp-0E8h],1
            01 00 00 00
  000002EE: EB 0A              jmp         000002FA
  000002F0: C7 85 18 FF FF FF  mov         dword ptr [ebp-0E8h],offset ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
            00 00 00 00
  000002FA: 8A 95 18 FF FF FF  mov         dl,byte ptr [ebp-0E8h]
  00000300: 88 95 6B FF FF FF  mov         byte ptr [ebp-95h],dl
  00000306: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z
            00
  0000030D: 8B 85 44 FF FF FF  mov         eax,dword ptr [ebp-0BCh]
  00000313: 83 E0 01           and         eax,1
  00000316: 74 12              je          0000032A
  00000318: 83 A5 44 FF FF FF  and         dword ptr [ebp-0BCh],0FEh
            FE
  0000031F: 8D 8D 5C FF FF FF  lea         ecx,[ebp-0A4h]
  00000325: E8 00 00 00 00     call        0000032A
  0000032A: 0F B6 8D 6B FF FF  movzx       ecx,byte ptr [ebp-95h]
            FF
  00000331: 85 C9              test        ecx,ecx
  00000333: 74 25              je          0000035A
  00000335: E8 00 00 00 00     call        0000033A
  0000033A: 89 85 58 FF FF FF  mov         dword ptr [ebp-0A8h],eax
  00000340: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000347: 8D 4D A0           lea         ecx,[ebp-60h]
  0000034A: E8 00 00 00 00     call        0000034F
  0000034F: 8B 85 58 FF FF FF  mov         eax,dword ptr [ebp-0A8h]
  00000355: E9 08 01 00 00     jmp         00000462
  0000035A: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  0000035D: C6 42 41 01        mov         byte ptr [edx+41h],1
  00000361: 8B 45 D4           mov         eax,dword ptr [ebp-2Ch]
  00000364: 8D 4D E3           lea         ecx,[ebp-1Dh]
  00000367: 3B C1              cmp         eax,ecx
  00000369: 74 23              je          0000038E
  0000036B: 8B 55 08           mov         edx,dword ptr [ebp+8]
  0000036E: 89 95 54 FF FF FF  mov         dword ptr [ebp-0ACh],edx
  00000374: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  0000037B: 8D 4D A0           lea         ecx,[ebp-60h]
  0000037E: E8 00 00 00 00     call        00000383
  00000383: 8B 85 54 FF FF FF  mov         eax,dword ptr [ebp-0ACh]
  00000389: E9 D4 00 00 00     jmp         00000462
  0000038E: 83 7D 98 00        cmp         dword ptr [ebp-68h],0
  00000392: 76 02              jbe         00000396
  00000394: EB 40              jmp         000003D6
  00000396: 8D 4D A0           lea         ecx,[ebp-60h]
  00000399: E8 00 00 00 00     call        0000039E
  0000039E: 83 F8 20           cmp         eax,20h
  000003A1: 73 0E              jae         000003B1
  000003A3: 6A 00              push        0
  000003A5: 6A 08              push        8
  000003A7: 8D 4D A0           lea         ecx,[ebp-60h]
  000003AA: E8 00 00 00 00     call        000003AF
  000003AF: EB 25              jmp         000003D6
  000003B1: E8 00 00 00 00     call        000003B6
  000003B6: 89 85 50 FF FF FF  mov         dword ptr [ebp-0B0h],eax
  000003BC: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000003C3: 8D 4D A0           lea         ecx,[ebp-60h]
  000003C6: E8 00 00 00 00     call        000003CB
  000003CB: 8B 85 50 FF FF FF  mov         eax,dword ptr [ebp-0B0h]
  000003D1: E9 8C 00 00 00     jmp         00000462
  000003D6: EB 76              jmp         0000044E
  000003D8: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  000003DB: 8B 48 4C           mov         ecx,dword ptr [eax+4Ch]
  000003DE: 51                 push        ecx
  000003DF: 0F B6 55 E3        movzx       edx,byte ptr [ebp-1Dh]
  000003E3: 52                 push        edx
  000003E4: E8 00 00 00 00     call        000003E9
  000003E9: 83 C4 08           add         esp,8
  000003EC: 0F B6 C0           movzx       eax,al
  000003EF: 85 C0              test        eax,eax
  000003F1: 74 0B              je          000003FE
  000003F3: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  000003F6: 89 8D 14 FF FF FF  mov         dword ptr [ebp-0ECh],ecx
  000003FC: EB 0B              jmp         00000409
  000003FE: E8 00 00 00 00     call        00000403
  00000403: 89 85 14 FF FF FF  mov         dword ptr [ebp-0ECh],eax
  00000409: 8B 95 14 FF FF FF  mov         edx,dword ptr [ebp-0ECh]
  0000040F: 89 95 4C FF FF FF  mov         dword ptr [ebp-0B4h],edx
  00000415: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  0000041C: 8D 4D A0           lea         ecx,[ebp-60h]
  0000041F: E8 00 00 00 00     call        00000424
  00000424: 8B 85 4C FF FF FF  mov         eax,dword ptr [ebp-0B4h]
  0000042A: EB 36              jmp         00000462
  0000042C: E8 00 00 00 00     call        00000431
  00000431: 89 85 48 FF FF FF  mov         dword ptr [ebp-0B8h],eax
  00000437: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  0000043E: 8D 4D A0           lea         ecx,[ebp-60h]
  00000441: E8 00 00 00 00     call        00000446
  00000446: 8B 85 48 FF FF FF  mov         eax,dword ptr [ebp-0B8h]
  0000044C: EB 14              jmp         00000462
  0000044E: E9 0E FD FF FF     jmp         00000161
  00000453: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  0000045A: 8D 4D A0           lea         ecx,[ebp-60h]
  0000045D: E8 00 00 00 00     call        00000462
  00000462: 52                 push        edx
  00000463: 8B CD              mov         ecx,ebp
  00000465: 50                 push        eax
  00000466: 8D 15 00 00 00 00  lea         edx,[?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z]
  0000046C: E8 00 00 00 00     call        00000471
  00000471: 58                 pop         eax
  00000472: 5A                 pop         edx
  00000473: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000476: 64 89 0D 00 00 00  mov         dword ptr fs:[?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z],ecx
            00
  0000047D: 59                 pop         ecx
  0000047E: 5F                 pop         edi
  0000047F: 5E                 pop         esi
  00000480: 5B                 pop         ebx
  00000481: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000484: 33 CD              xor         ecx,ebp
  00000486: E8 00 00 00 00     call        0000048B
  0000048B: 81 C4 EC 00 00 00  add         esp,0ECh
  00000491: 3B EC              cmp         ebp,esp
  00000493: E8 00 00 00 00     call        00000498
  00000498: 8B E5              mov         esp,ebp
  0000049A: 5D                 pop         ebp
  0000049B: C2 04 00           ret         4
  0000049E: 8B FF              mov         edi,edi
$LN43:
  000004A0: 04 00              add         al,0
  000004A2: 00 00              add         byte ptr [eax],al
  000004A4: 00 00              add         byte ptr [eax],al
  000004A6: 00 00              add         byte ptr [eax],al
$LN42:
  000004A8: E3 FF              jecxz       000004A9
  000004AA: FF
  000004AB: FF 01              inc         dword ptr [ecx]
  000004AD: 00 00              add         byte ptr [eax],al
  000004AF: 00 00              add         byte ptr [eax],al
  000004B1: 00 00              add         byte ptr [eax],al
  000004B3: 00 D4              add         ah,dl
  000004B5: FF
  000004B6: FF
  000004B7: FF 04 00           inc         dword ptr [eax+eax]
  000004BA: 00 00              add         byte ptr [eax],al
  000004BC: 00 00              add         byte ptr [eax],al
  000004BE: 00 00              add         byte ptr [eax],al
  000004C0: C8 FF FF FF        enter       0FFFFh,0FFh
  000004C4: 04 00              add         al,0
  000004C6: 00 00              add         byte ptr [eax],al
  000004C8: 00 00              add         byte ptr [eax],al
  000004CA: 00 00              add         byte ptr [eax],al
  000004CC: A0 FF FF FF 20     mov         al,[20FFFFFF]
  000004D1: 00 00              add         byte ptr [eax],al
  000004D3: 00 00              add         byte ptr [eax],al
  000004D5: 00 00              add         byte ptr [eax],al
  000004D7: 00 5F 53           add         byte ptr [edi+53h],bl
  000004DA: 74 72              je          0000054E
  000004DC: 00 5F 44           add         byte ptr [edi+44h],bl
  000004DF: 65 73 74           jae         00000556
  000004E2: 00 5F 53           add         byte ptr [edi+53h],bl
  000004E5: 72 63              jb          0000054A
  000004E7: 00 5F 43           add         byte ptr [edi+43h],bl
  000004EA: 68
  000004EB: 00

__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$0:
  00000000: 8D 4D A0           lea         ecx,[ebp-60h]
  00000003: E9 00 00 00 00     jmp         __unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$1
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$1:
  00000008: 8D 4D 84           lea         ecx,[ebp-7Ch]
  0000000B: E9 00 00 00 00     jmp         __unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$2
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$2:
  00000010: 8D 8D 78 FF FF FF  lea         ecx,[ebp-88h]
  00000016: E9 00 00 00 00     jmp         __unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$3
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$3:
  0000001B: 8D 8D 6C FF FF FF  lea         ecx,[ebp-94h]
  00000021: E9 00 00 00 00     jmp         __unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$4
__unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$4:
  00000026: 8B 85 44 FF FF FF  mov         eax,dword ptr [ebp-0BCh]
  0000002C: 83 E0 01           and         eax,1
  0000002F: 0F 84 12 00 00 00  je          $LN35
  00000035: 83 A5 44 FF FF FF  and         dword ptr [ebp-0BCh],0FEh
            FE
  0000003C: 8D 8D 5C FF FF FF  lea         ecx,[ebp-0A4h]
  00000042: E9 00 00 00 00     jmp         $LN35
$LN35:
  00000047: C3                 ret
__ehhandler$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z:
  00000048: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000004C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000004F: 8B 8A 10 FF FF FF  mov         ecx,dword ptr [edx-0F0h]
  00000055: 33 C8              xor         ecx,eax
  00000057: E8 00 00 00 00     call        0000005C
  0000005C: 8B 4A FC           mov         ecx,dword ptr [edx-4]
  0000005F: 33 C8              xor         ecx,eax
  00000061: E8 00 00 00 00     call        00000066
  00000066: B8 00 00 00 00     mov         eax,offset __unwindfunclet$?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z$0
  0000006B: E9 00 00 00 00     jmp         00000070

?not_eof@?$char_traits@D@std@@SAHABH@Z (public: static int __cdecl std::char_traits<char>::not_eof(int const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: E8 00 00 00 00     call        00000010
  00000010: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000013: 39 01              cmp         dword ptr [ecx],eax
  00000015: 74 0A              je          00000021
  00000017: 8B 55 08           mov         edx,dword ptr [ebp+8]
  0000001A: 8B 02              mov         eax,dword ptr [edx]
  0000001C: 89 45 FC           mov         dword ptr [ebp-4],eax
  0000001F: EB 0F              jmp         00000030
  00000021: E8 00 00 00 00     call        00000026
  00000026: F7 D8              neg         eax
  00000028: 1B C0              sbb         eax,eax
  0000002A: 83 C0 01           add         eax,1
  0000002D: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000030: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000033: 83 C4 04           add         esp,4
  00000036: 3B EC              cmp         ebp,esp
  00000038: E8 00 00 00 00     call        0000003D
  0000003D: 8B E5              mov         esp,ebp
  0000003F: 5D                 pop         ebp
  00000040: C3                 ret

??$_Fputc@D@std@@YA_NDPAU_iobuf@@@Z (bool __cdecl std::_Fputc<char>(char,struct _iobuf *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000006: 50                 push        eax
  00000007: 0F BE 4D 08        movsx       ecx,byte ptr [ebp+8]
  0000000B: 51                 push        ecx
  0000000C: E8 00 00 00 00     call        00000011
  00000011: 83 C4 08           add         esp,8
  00000014: 33 D2              xor         edx,edx
  00000016: 83 F8 FF           cmp         eax,0FFh
  00000019: 0F 95 C2           setne       dl
  0000001C: 8A C2              mov         al,dl
  0000001E: 3B EC              cmp         ebp,esp
  00000020: E8 00 00 00 00     call        00000025
  00000025: 5D                 pop         ebp
  00000026: C3                 ret

??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ (public: __thiscall std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ]
  00000010: 50                 push        eax
  00000011: 51                 push        ecx
  00000012: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000019: A1 00 00 00 00     mov         eax,[??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ]
  0000001E: 33 C5              xor         eax,ebp
  00000020: 50                 push        eax
  00000021: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000024: 64 A3 00 00 00 00  mov         fs:[??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ],eax
  0000002A: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  0000002D: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
            00
  00000034: 6A 00              push        0
  00000036: 6A 01              push        1
  00000038: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000003B: E8 00 00 00 00     call        00000040
  00000040: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000047: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000004A: E8 00 00 00 00     call        0000004F
  0000004F: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000052: 64 89 0D 00 00 00  mov         dword ptr fs:[??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ],ecx
            00
  00000059: 59                 pop         ecx
  0000005A: 83 C4 10           add         esp,10h
  0000005D: 3B EC              cmp         ebp,esp
  0000005F: E8 00 00 00 00     call        00000064
  00000064: 8B E5              mov         esp,ebp
  00000066: 5D                 pop         ebp
  00000067: C3                 ret

__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0:
  00000000: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000003: E9 00 00 00 00     jmp         __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
  00000008: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000000F: 8B 4A F8           mov         ecx,dword ptr [edx-8]
  00000012: 33 C8              xor         ecx,eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
  0000001E: E9 00 00 00 00     jmp         00000023

?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ (public: unsigned int __thiscall std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::size(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 40 18           mov         eax,dword ptr [eax+18h]
  00000014: 8B E5              mov         esp,ebp
  00000016: 5D                 pop         ebp
  00000017: C3                 ret

?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHH@Z (protected: virtual int __thiscall std::basic_filebuf<char,struct std::char_traits<char> >::pbackfail(int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 14           sub         esp,14h
  00000006: 56                 push        esi
  00000007: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000C: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000000F: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000012: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000015: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000018: 89 45 FC           mov         dword ptr [ebp-4],eax
  0000001B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000001E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000021: E8 00 00 00 00     call        00000026
  00000026: 85 C0              test        eax,eax
  00000028: 0F 84 81 00 00 00  je          000000AF
  0000002E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000031: E8 00 00 00 00     call        00000036
  00000036: 8B F0              mov         esi,eax
  00000038: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000003B: E8 00 00 00 00     call        00000040
  00000040: 3B F0              cmp         esi,eax
  00000042: 73 6B              jae         000000AF
  00000044: E8 00 00 00 00     call        00000049
  00000049: 89 45 F8           mov         dword ptr [ebp-8],eax
  0000004C: 8D 45 08           lea         eax,[ebp+8]
  0000004F: 50                 push        eax
  00000050: 8D 4D F8           lea         ecx,[ebp-8]
  00000053: 51                 push        ecx
  00000054: E8 00 00 00 00     call        00000059
  00000059: 83 C4 08           add         esp,8
  0000005C: 0F B6 D0           movzx       edx,al
  0000005F: 85 D2              test        edx,edx
  00000061: 75 2E              jne         00000091
  00000063: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000066: E8 00 00 00 00     call        0000006B
  0000006B: 83 E8 01           sub         eax,1
  0000006E: 50                 push        eax
  0000006F: E8 00 00 00 00     call        00000074
  00000074: 83 C4 04           add         esp,4
  00000077: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  0000007A: 8D 45 08           lea         eax,[ebp+8]
  0000007D: 50                 push        eax
  0000007E: 8D 4D F4           lea         ecx,[ebp-0Ch]
  00000081: 51                 push        ecx
  00000082: E8 00 00 00 00     call        00000087
  00000087: 83 C4 08           add         esp,8
  0000008A: 0F B6 D0           movzx       edx,al
  0000008D: 85 D2              test        edx,edx
  0000008F: 74 1E              je          000000AF
  00000091: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000094: E8 00 00 00 00     call        00000099
  00000099: 8D 45 08           lea         eax,[ebp+8]
  0000009C: 50                 push        eax
  0000009D: E8 00 00 00 00     call        000000A2
  000000A2: 83 C4 04           add         esp,4
  000000A5: E9 AE 00 00 00     jmp         00000158
  000000AA: E9 A9 00 00 00     jmp         00000158
  000000AF: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000000B2: 83 79 4C 00        cmp         dword ptr [ecx+4Ch],0
  000000B6: 74 1F              je          000000D7
  000000B8: E8 00 00 00 00     call        000000BD
  000000BD: 89 45 F0           mov         dword ptr [ebp-10h],eax
  000000C0: 8D 55 08           lea         edx,[ebp+8]
  000000C3: 52                 push        edx
  000000C4: 8D 45 F0           lea         eax,[ebp-10h]
  000000C7: 50                 push        eax
  000000C8: E8 00 00 00 00     call        000000CD
  000000CD: 83 C4 08           add         esp,8
  000000D0: 0F B6 C8           movzx       ecx,al
  000000D3: 85 C9              test        ecx,ecx
  000000D5: 74 09              je          000000E0
  000000D7: E8 00 00 00 00     call        000000DC
  000000DC: EB 7A              jmp         00000158
  000000DE: EB 78              jmp         00000158
  000000E0: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  000000E3: 83 7A 3C 00        cmp         dword ptr [edx+3Ch],0
  000000E7: 75 30              jne         00000119
  000000E9: 8D 45 08           lea         eax,[ebp+8]
  000000EC: 50                 push        eax
  000000ED: E8 00 00 00 00     call        000000F2
  000000F2: 83 C4 04           add         esp,4
  000000F5: 88 45 EF           mov         byte ptr [ebp-11h],al
  000000F8: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000000FB: 8B 51 4C           mov         edx,dword ptr [ecx+4Ch]
  000000FE: 52                 push        edx
  000000FF: 8D 45 EF           lea         eax,[ebp-11h]
  00000102: 50                 push        eax
  00000103: E8 00 00 00 00     call        00000108
  00000108: 83 C4 08           add         esp,8
  0000010B: 0F B6 C8           movzx       ecx,al
  0000010E: 85 C9              test        ecx,ecx
  00000110: 74 07              je          00000119
  00000112: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000115: EB 41              jmp         00000158
  00000117: EB 3F              jmp         00000158
  00000119: 33 D2              xor         edx,edx
  0000011B: 74 36              je          00000153
  0000011D: 8D 45 08           lea         eax,[ebp+8]
  00000120: 50                 push        eax
  00000121: E8 00 00 00 00     call        00000126
  00000126: 83 C4 04           add         esp,4
  00000129: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000012C: 88 41 40           mov         byte ptr [ecx+40h],al
  0000012F: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000132: 83 C2 41           add         edx,41h
  00000135: 52                 push        edx
  00000136: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000139: 83 C0 40           add         eax,40h
  0000013C: 50                 push        eax
  0000013D: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000140: 83 C1 40           add         ecx,40h
  00000143: 51                 push        ecx
  00000144: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000147: E8 00 00 00 00     call        0000014C
  0000014C: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000014F: EB 07              jmp         00000158
  00000151: EB 05              jmp         00000158
  00000153: E8 00 00 00 00     call        00000158
  00000158: 5E                 pop         esi
  00000159: 83 C4 14           add         esp,14h
  0000015C: 3B EC              cmp         ebp,esp
  0000015E: E8 00 00 00 00     call        00000163
  00000163: 8B E5              mov         esp,ebp
  00000165: 5D                 pop         ebp
  00000166: C2 04 00           ret         4

??$_Ungetc@D@std@@YA_NABDPAU_iobuf@@@Z (bool __cdecl std::_Ungetc<char>(char const &,struct _iobuf *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000006: 50                 push        eax
  00000007: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000000A: 0F B6 11           movzx       edx,byte ptr [ecx]
  0000000D: 52                 push        edx
  0000000E: E8 00 00 00 00     call        00000013
  00000013: 83 C4 08           add         esp,8
  00000016: 33 C9              xor         ecx,ecx
  00000018: 83 F8 FF           cmp         eax,0FFh
  0000001B: 0F 95 C1           setne       cl
  0000001E: 8A C1              mov         al,cl
  00000020: 3B EC              cmp         ebp,esp
  00000022: E8 00 00 00 00     call        00000027
  00000027: 5D                 pop         ebp
  00000028: C3                 ret

?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ (protected: virtual int __thiscall std::basic_filebuf<char,struct std::char_traits<char> >::underflow(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 14           sub         esp,14h
  00000006: 56                 push        esi
  00000007: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000C: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000000F: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000012: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000015: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000018: 89 45 FC           mov         dword ptr [ebp-4],eax
  0000001B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000001E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000021: E8 00 00 00 00     call        00000026
  00000026: 85 C0              test        eax,eax
  00000028: 74 2B              je          00000055
  0000002A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000002D: E8 00 00 00 00     call        00000032
  00000032: 8B F0              mov         esi,eax
  00000034: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000037: E8 00 00 00 00     call        0000003C
  0000003C: 3B F0              cmp         esi,eax
  0000003E: 73 15              jae         00000055
  00000040: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000043: E8 00 00 00 00     call        00000048
  00000048: 50                 push        eax
  00000049: E8 00 00 00 00     call        0000004E
  0000004E: 83 C4 04           add         esp,4
  00000051: EB 5E              jmp         000000B1
  00000053: EB 5C              jmp         000000B1
  00000055: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000058: 8B 10              mov         edx,dword ptr [eax]
  0000005A: 8B F4              mov         esi,esp
  0000005C: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000005F: 8B 42 14           mov         eax,dword ptr [edx+14h]
  00000062: FF D0              call        eax
  00000064: 3B F4              cmp         esi,esp
  00000066: E8 00 00 00 00     call        0000006B
  0000006B: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  0000006E: E8 00 00 00 00     call        00000073
  00000073: 89 45 EC           mov         dword ptr [ebp-14h],eax
  00000076: 8D 4D F4           lea         ecx,[ebp-0Ch]
  00000079: 51                 push        ecx
  0000007A: 8D 55 EC           lea         edx,[ebp-14h]
  0000007D: 52                 push        edx
  0000007E: E8 00 00 00 00     call        00000083
  00000083: 83 C4 08           add         esp,8
  00000086: 0F B6 C0           movzx       eax,al
  00000089: 85 C0              test        eax,eax
  0000008B: 74 07              je          00000094
  0000008D: 8B 45 F4           mov         eax,dword ptr [ebp-0Ch]
  00000090: EB 1F              jmp         000000B1
  00000092: EB 1D              jmp         000000B1
  00000094: 8B F4              mov         esi,esp
  00000096: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000099: 51                 push        ecx
  0000009A: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000009D: 8B 02              mov         eax,dword ptr [edx]
  0000009F: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000000A2: 8B 50 08           mov         edx,dword ptr [eax+8]
  000000A5: FF D2              call        edx
  000000A7: 3B F4              cmp         esi,esp
  000000A9: E8 00 00 00 00     call        000000AE
  000000AE: 8B 45 F4           mov         eax,dword ptr [ebp-0Ch]
  000000B1: 52                 push        edx
  000000B2: 8B CD              mov         ecx,ebp
  000000B4: 50                 push        eax
  000000B5: 8D 15 00 00 00 00  lea         edx,[?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ]
  000000BB: E8 00 00 00 00     call        000000C0
  000000C0: 58                 pop         eax
  000000C1: 5A                 pop         edx
  000000C2: 5E                 pop         esi
  000000C3: 83 C4 14           add         esp,14h
  000000C6: 3B EC              cmp         ebp,esp
  000000C8: E8 00 00 00 00     call        000000CD
  000000CD: 8B E5              mov         esp,ebp
  000000CF: 5D                 pop         ebp
  000000D0: C3                 ret
  000000D1: 8D 49 00           lea         ecx,[ecx]
$LN9:
  000000D4: 01 00              add         dword ptr [eax],eax
  000000D6: 00 00              add         byte ptr [eax],al
  000000D8: 00 00              add         byte ptr [eax],al
  000000DA: 00 00              add         byte ptr [eax],al
$LN8:
  000000DC: F4                 hlt
  000000DD: FF
  000000DE: FF
  000000DF: FF 04 00           inc         dword ptr [eax+eax]
  000000E2: 00 00              add         byte ptr [eax],al
  000000E4: 00 00              add         byte ptr [eax],al
  000000E6: 00 00              add         byte ptr [eax],al
$LN7:
  000000E8: 5F                 pop         edi
  000000E9: 4D                 dec         ebp
  000000EA: 65 74 61           je          0000014E
  000000ED: 00

?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ (protected: virtual int __thiscall std::basic_filebuf<char,struct std::char_traits<char> >::uflow(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ]
  00000010: 50                 push        eax
  00000011: 81 EC E8 00 00 00  sub         esp,0E8h
  00000017: 56                 push        esi
  00000018: 57                 push        edi
  00000019: 51                 push        ecx
  0000001A: 8D BD 0C FF FF FF  lea         edi,[ebp-0F4h]
  00000020: B9 3A 00 00 00     mov         ecx,3Ah
  00000025: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000002A: F3 AB              rep stos    dword ptr [edi]
  0000002C: 59                 pop         ecx
  0000002D: A1 00 00 00 00     mov         eax,[?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ]
  00000032: 33 C5              xor         eax,ebp
  00000034: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000037: 50                 push        eax
  00000038: 8D 45 F4           lea         eax,[ebp-0Ch]
  0000003B: 64 A3 00 00 00 00  mov         fs:[?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ],eax
  00000041: 89 4D EC           mov         dword ptr [ebp-14h],ecx
  00000044: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000047: E8 00 00 00 00     call        0000004C
  0000004C: 85 C0              test        eax,eax
  0000004E: 74 31              je          00000081
  00000050: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000053: E8 00 00 00 00     call        00000058
  00000058: 8B F0              mov         esi,eax
  0000005A: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  0000005D: E8 00 00 00 00     call        00000062
  00000062: 3B F0              cmp         esi,eax
  00000064: 73 1B              jae         00000081
  00000066: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000069: E8 00 00 00 00     call        0000006E
  0000006E: 50                 push        eax
  0000006F: E8 00 00 00 00     call        00000074
  00000074: 83 C4 04           add         esp,4
  00000077: E9 72 03 00 00     jmp         000003EE
  0000007C: E9 6D 03 00 00     jmp         000003EE
  00000081: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000084: 83 78 4C 00        cmp         dword ptr [eax+4Ch],0
  00000088: 75 0F              jne         00000099
  0000008A: E8 00 00 00 00     call        0000008F
  0000008F: E9 5A 03 00 00     jmp         000003EE
  00000094: E9 55 03 00 00     jmp         000003EE
  00000099: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  0000009C: 83 79 3C 00        cmp         dword ptr [ecx+3Ch],0
  000000A0: 75 49              jne         000000EB
  000000A2: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  000000A5: 8B 42 4C           mov         eax,dword ptr [edx+4Ch]
  000000A8: 50                 push        eax
  000000A9: 8D 4D E7           lea         ecx,[ebp-19h]
  000000AC: 51                 push        ecx
  000000AD: E8 00 00 00 00     call        000000B2
  000000B2: 83 C4 08           add         esp,8
  000000B5: 0F B6 D0           movzx       edx,al
  000000B8: 85 D2              test        edx,edx
  000000BA: 74 14              je          000000D0
  000000BC: 8D 45 E7           lea         eax,[ebp-19h]
  000000BF: 50                 push        eax
  000000C0: E8 00 00 00 00     call        000000C5
  000000C5: 83 C4 04           add         esp,4
  000000C8: 89 85 38 FF FF FF  mov         dword ptr [ebp-0C8h],eax
  000000CE: EB 0B              jmp         000000DB
  000000D0: E8 00 00 00 00     call        000000D5
  000000D5: 89 85 38 FF FF FF  mov         dword ptr [ebp-0C8h],eax
  000000DB: 8B 85 38 FF FF FF  mov         eax,dword ptr [ebp-0C8h]
  000000E1: E9 08 03 00 00     jmp         000003EE
  000000E6: E9 03 03 00 00     jmp         000003EE
  000000EB: 8D 4D BC           lea         ecx,[ebp-44h]
  000000EE: E8 00 00 00 00     call        000000F3
  000000F3: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
            00
  000000FA: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000000FD: 8B 51 4C           mov         edx,dword ptr [ecx+4Ch]
  00000100: 52                 push        edx
  00000101: E8 00 00 00 00     call        00000106
  00000106: 83 C4 04           add         esp,4
  00000109: 89 45 8C           mov         dword ptr [ebp-74h],eax
  0000010C: 83 7D 8C FF        cmp         dword ptr [ebp-74h],0FFh
  00000110: 75 1F              jne         00000131
  00000112: E8 00 00 00 00     call        00000117
  00000117: 89 45 88           mov         dword ptr [ebp-78h],eax
  0000011A: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000121: 8D 4D BC           lea         ecx,[ebp-44h]
  00000124: E8 00 00 00 00     call        00000129
  00000129: 8B 45 88           mov         eax,dword ptr [ebp-78h]
  0000012C: E9 BD 02 00 00     jmp         000003EE
  00000131: 0F B6 45 8C        movzx       eax,byte ptr [ebp-74h]
  00000135: 50                 push        eax
  00000136: 6A 01              push        1
  00000138: 8D 4D BC           lea         ecx,[ebp-44h]
  0000013B: E8 00 00 00 00     call        00000140
  00000140: 8D 4D A4           lea         ecx,[ebp-5Ch]
  00000143: 51                 push        ecx
  00000144: 8D 55 B4           lea         edx,[ebp-4Ch]
  00000147: 52                 push        edx
  00000148: 8D 45 B3           lea         eax,[ebp-4Dh]
  0000014B: 50                 push        eax
  0000014C: 8D 4D 98           lea         ecx,[ebp-68h]
  0000014F: 51                 push        ecx
  00000150: 8D 95 78 FF FF FF  lea         edx,[ebp-88h]
  00000156: 52                 push        edx
  00000157: 8D 4D BC           lea         ecx,[ebp-44h]
  0000015A: E8 00 00 00 00     call        0000015F
  0000015F: 89 85 34 FF FF FF  mov         dword ptr [ebp-0CCh],eax
  00000165: 8B 85 34 FF FF FF  mov         eax,dword ptr [ebp-0CCh]
  0000016B: 89 85 30 FF FF FF  mov         dword ptr [ebp-0D0h],eax
  00000171: C6 45 FC 01        mov         byte ptr [ebp-4],1
  00000175: 8B 8D 30 FF FF FF  mov         ecx,dword ptr [ebp-0D0h]
  0000017B: E8 00 00 00 00     call        00000180
  00000180: 8B F0              mov         esi,eax
  00000182: 8D 4D BC           lea         ecx,[ebp-44h]
  00000185: E8 00 00 00 00     call        0000018A
  0000018A: 03 F0              add         esi,eax
  0000018C: 56                 push        esi
  0000018D: 8D 8D 6C FF FF FF  lea         ecx,[ebp-94h]
  00000193: 51                 push        ecx
  00000194: 8D 4D BC           lea         ecx,[ebp-44h]
  00000197: E8 00 00 00 00     call        0000019C
  0000019C: 89 85 2C FF FF FF  mov         dword ptr [ebp-0D4h],eax
  000001A2: 8B 95 2C FF FF FF  mov         edx,dword ptr [ebp-0D4h]
  000001A8: 89 95 28 FF FF FF  mov         dword ptr [ebp-0D8h],edx
  000001AE: C6 45 FC 02        mov         byte ptr [ebp-4],2
  000001B2: 8B 8D 28 FF FF FF  mov         ecx,dword ptr [ebp-0D8h]
  000001B8: E8 00 00 00 00     call        000001BD
  000001BD: 50                 push        eax
  000001BE: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  000001C1: 83 C0 44           add         eax,44h
  000001C4: 50                 push        eax
  000001C5: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000001C8: 8B 49 3C           mov         ecx,dword ptr [ecx+3Ch]
  000001CB: E8 00 00 00 00     call        000001D0
  000001D0: 89 45 84           mov         dword ptr [ebp-7Ch],eax
  000001D3: C6 45 FC 01        mov         byte ptr [ebp-4],1
  000001D7: 8D 8D 6C FF FF FF  lea         ecx,[ebp-94h]
  000001DD: E8 00 00 00 00     call        000001E2
  000001E2: C6 45 FC 00        mov         byte ptr [ebp-4],0
  000001E6: 8D 8D 78 FF FF FF  lea         ecx,[ebp-88h]
  000001EC: E8 00 00 00 00     call        000001F1
  000001F1: 8B 55 84           mov         edx,dword ptr [ebp-7Ch]
  000001F4: 89 95 24 FF FF FF  mov         dword ptr [ebp-0DCh],edx
  000001FA: 83 BD 24 FF FF FF  cmp         dword ptr [ebp-0DCh],0
            00
  00000201: 0F 8C B1 01 00 00  jl          000003B8
  00000207: 83 BD 24 FF FF FF  cmp         dword ptr [ebp-0DCh],1
            01
  0000020E: 7E 12              jle         00000222
  00000210: 83 BD 24 FF FF FF  cmp         dword ptr [ebp-0DCh],3
            03
  00000217: 0F 84 10 01 00 00  je          0000032D
  0000021D: E9 96 01 00 00     jmp         000003B8
  00000222: 8B 45 A4           mov         eax,dword ptr [ebp-5Ch]
  00000225: 8D 4D B3           lea         ecx,[ebp-4Dh]
  00000228: 3B C1              cmp         eax,ecx
  0000022A: 0F 84 A9 00 00 00  je          000002D9
  00000230: 8D 95 60 FF FF FF  lea         edx,[ebp-0A0h]
  00000236: 52                 push        edx
  00000237: 8D 4D BC           lea         ecx,[ebp-44h]
  0000023A: E8 00 00 00 00     call        0000023F
  0000023F: 89 85 20 FF FF FF  mov         dword ptr [ebp-0E0h],eax
  00000245: 8B 85 20 FF FF FF  mov         eax,dword ptr [ebp-0E0h]
  0000024B: 89 85 1C FF FF FF  mov         dword ptr [ebp-0E4h],eax
  00000251: C6 45 FC 03        mov         byte ptr [ebp-4],3
  00000255: 8B 8D 1C FF FF FF  mov         ecx,dword ptr [ebp-0E4h]
  0000025B: E8 00 00 00 00     call        00000260
  00000260: 8B F0              mov         esi,eax
  00000262: 8D 4D BC           lea         ecx,[ebp-44h]
  00000265: E8 00 00 00 00     call        0000026A
  0000026A: 03 F0              add         esi,eax
  0000026C: 2B 75 98           sub         esi,dword ptr [ebp-68h]
  0000026F: 89 75 90           mov         dword ptr [ebp-70h],esi
  00000272: C6 45 FC 00        mov         byte ptr [ebp-4],0
  00000276: 8D 8D 60 FF FF FF  lea         ecx,[ebp-0A0h]
  0000027C: E8 00 00 00 00     call        00000281
  00000281: 83 7D 90 00        cmp         dword ptr [ebp-70h],0
  00000285: 7E 24              jle         000002AB
  00000287: 8B 4D 90           mov         ecx,dword ptr [ebp-70h]
  0000028A: 83 E9 01           sub         ecx,1
  0000028D: 89 4D 90           mov         dword ptr [ebp-70h],ecx
  00000290: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  00000293: 8B 42 4C           mov         eax,dword ptr [edx+4Ch]
  00000296: 50                 push        eax
  00000297: 8B 4D 98           mov         ecx,dword ptr [ebp-68h]
  0000029A: 03 4D 90           add         ecx,dword ptr [ebp-70h]
  0000029D: 0F BE 11           movsx       edx,byte ptr [ecx]
  000002A0: 52                 push        edx
  000002A1: E8 00 00 00 00     call        000002A6
  000002A6: 83 C4 08           add         esp,8
  000002A9: EB D6              jmp         00000281
  000002AB: 8D 45 B3           lea         eax,[ebp-4Dh]
  000002AE: 50                 push        eax
  000002AF: E8 00 00 00 00     call        000002B4
  000002B4: 83 C4 04           add         esp,4
  000002B7: 89 85 5C FF FF FF  mov         dword ptr [ebp-0A4h],eax
  000002BD: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000002C4: 8D 4D BC           lea         ecx,[ebp-44h]
  000002C7: E8 00 00 00 00     call        000002CC
  000002CC: 8B 85 5C FF FF FF  mov         eax,dword ptr [ebp-0A4h]
  000002D2: E9 17 01 00 00     jmp         000003EE
  000002D7: EB 4F              jmp         00000328
  000002D9: 8D 8D 50 FF FF FF  lea         ecx,[ebp-0B0h]
  000002DF: 51                 push        ecx
  000002E0: 8D 4D BC           lea         ecx,[ebp-44h]
  000002E3: E8 00 00 00 00     call        000002E8
  000002E8: 89 85 18 FF FF FF  mov         dword ptr [ebp-0E8h],eax
  000002EE: 8B 95 18 FF FF FF  mov         edx,dword ptr [ebp-0E8h]
  000002F4: 89 95 14 FF FF FF  mov         dword ptr [ebp-0ECh],edx
  000002FA: C6 45 FC 04        mov         byte ptr [ebp-4],4
  000002FE: 8B 8D 14 FF FF FF  mov         ecx,dword ptr [ebp-0ECh]
  00000304: E8 00 00 00 00     call        00000309
  00000309: 8B 4D 98           mov         ecx,dword ptr [ebp-68h]
  0000030C: 2B C8              sub         ecx,eax
  0000030E: 51                 push        ecx
  0000030F: 6A 00              push        0
  00000311: 8D 4D BC           lea         ecx,[ebp-44h]
  00000314: E8 00 00 00 00     call        00000319
  00000319: C6 45 FC 00        mov         byte ptr [ebp-4],0
  0000031D: 8D 8D 50 FF FF FF  lea         ecx,[ebp-0B0h]
  00000323: E8 00 00 00 00     call        00000328
  00000328: E9 AD 00 00 00     jmp         000003DA
  0000032D: 8D 4D BC           lea         ecx,[ebp-44h]
  00000330: E8 00 00 00 00     call        00000335
  00000335: 83 F8 01           cmp         eax,1
  00000338: 73 05              jae         0000033F
  0000033A: E9 9B 00 00 00     jmp         000003DA
  0000033F: 6A 01              push        1
  00000341: 8D 95 44 FF FF FF  lea         edx,[ebp-0BCh]
  00000347: 52                 push        edx
  00000348: 8D 4D BC           lea         ecx,[ebp-44h]
  0000034B: E8 00 00 00 00     call        00000350
  00000350: 89 85 10 FF FF FF  mov         dword ptr [ebp-0F0h],eax
  00000356: 8B 85 10 FF FF FF  mov         eax,dword ptr [ebp-0F0h]
  0000035C: 89 85 0C FF FF FF  mov         dword ptr [ebp-0F4h],eax
  00000362: C6 45 FC 05        mov         byte ptr [ebp-4],5
  00000366: 8B 8D 0C FF FF FF  mov         ecx,dword ptr [ebp-0F4h]
  0000036C: E8 00 00 00 00     call        00000371
  00000371: 50                 push        eax
  00000372: 6A 01              push        1
  00000374: 8D 4D B3           lea         ecx,[ebp-4Dh]
  00000377: 51                 push        ecx
  00000378: E8 00 00 00 00     call        0000037D
  0000037D: 83 C4 10           add         esp,10h
  00000380: C6 45 FC 00        mov         byte ptr [ebp-4],0
  00000384: 8D 8D 44 FF FF FF  lea         ecx,[ebp-0BCh]
  0000038A: E8 00 00 00 00     call        0000038F
  0000038F: 8D 55 B3           lea         edx,[ebp-4Dh]
  00000392: 52                 push        edx
  00000393: E8 00 00 00 00     call        00000398
  00000398: 83 C4 04           add         esp,4
  0000039B: 89 85 40 FF FF FF  mov         dword ptr [ebp-0C0h],eax
  000003A1: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000003A8: 8D 4D BC           lea         ecx,[ebp-44h]
  000003AB: E8 00 00 00 00     call        000003B0
  000003B0: 8B 85 40 FF FF FF  mov         eax,dword ptr [ebp-0C0h]
  000003B6: EB 36              jmp         000003EE
  000003B8: E8 00 00 00 00     call        000003BD
  000003BD: 89 85 3C FF FF FF  mov         dword ptr [ebp-0C4h],eax
  000003C3: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000003CA: 8D 4D BC           lea         ecx,[ebp-44h]
  000003CD: E8 00 00 00 00     call        000003D2
  000003D2: 8B 85 3C FF FF FF  mov         eax,dword ptr [ebp-0C4h]
  000003D8: EB 14              jmp         000003EE
  000003DA: E9 1B FD FF FF     jmp         000000FA
  000003DF: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000003E6: 8D 4D BC           lea         ecx,[ebp-44h]
  000003E9: E8 00 00 00 00     call        000003EE
  000003EE: 52                 push        edx
  000003EF: 8B CD              mov         ecx,ebp
  000003F1: 50                 push        eax
  000003F2: 8D 15 00 00 00 00  lea         edx,[?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ]
  000003F8: E8 00 00 00 00     call        000003FD
  000003FD: 58                 pop         eax
  000003FE: 5A                 pop         edx
  000003FF: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000402: 64 89 0D 00 00 00  mov         dword ptr fs:[?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ],ecx
            00
  00000409: 59                 pop         ecx
  0000040A: 5F                 pop         edi
  0000040B: 5E                 pop         esi
  0000040C: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000040F: 33 CD              xor         ecx,ebp
  00000411: E8 00 00 00 00     call        00000416
  00000416: 81 C4 F4 00 00 00  add         esp,0F4h
  0000041C: 3B EC              cmp         ebp,esp
  0000041E: E8 00 00 00 00     call        00000423
  00000423: 8B E5              mov         esp,ebp
  00000425: 5D                 pop         ebp
  00000426: C3                 ret
  00000427: 90                 nop
$LN37:
  00000428: 05 00 00 00 00     add         eax,offset ?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
  0000042D: 00 00              add         byte ptr [eax],al
  0000042F: 00 E7              add         bh,ah
  00000431: FF
  00000432: FF
  00000433: FF 01              inc         dword ptr [ecx]
  00000435: 00 00              add         byte ptr [eax],al
  00000437: 00 00              add         byte ptr [eax],al
  00000439: 00 00              add         byte ptr [eax],al
  0000043B: 00 BC FF FF FF 20  add         byte ptr [edi+edi*8+20FFFFh],bh
            00
  00000442: 00 00              add         byte ptr [eax],al
  00000444: 00 00              add         byte ptr [eax],al
  00000446: 00 00              add         byte ptr [eax],al
  00000448: B3 FF              mov         bl,0FFh
  0000044A: FF
  0000044B: FF 01              inc         dword ptr [ecx]
  0000044D: 00 00              add         byte ptr [eax],al
  0000044F: 00 00              add         byte ptr [eax],al
  00000451: 00 00              add         byte ptr [eax],al
  00000453: 00 A4 FF FF FF 04  add         byte ptr [edi+edi*8+4FFFFh],ah
            00
  0000045A: 00 00              add         byte ptr [eax],al
  0000045C: 00 00              add         byte ptr [eax],al
  0000045E: 00 00              add         byte ptr [eax],al
  00000460: 98                 cwde
  00000461: FF
  00000462: FF
  00000463: FF 04 00           inc         dword ptr [eax+eax]
  00000466: 00 00              add         byte ptr [eax],al
  00000468: 00 00              add         byte ptr [eax],al
  0000046A: 00 00              add         byte ptr [eax],al
$LN34:
  0000046C: 5F                 pop         edi
  0000046D: 53                 push        ebx
  0000046E: 72 63              jb          000004D3
  00000470: 00 5F 44           add         byte ptr [edi+44h],bl
  00000473: 65 73 74           jae         000004EA
  00000476: 00 5F 43           add         byte ptr [edi+43h],bl
  00000479: 68 00 5F 53 74     push        74535F00h
  0000047E: 72 00              jb          $LN30
$LN30:
  00000480: 5F                 pop         edi
  00000481: 43                 inc         ebx
  00000482: 68
  00000483: 00

__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$0:
  00000000: 8D 4D BC           lea         ecx,[ebp-44h]
  00000003: E9 00 00 00 00     jmp         __unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$1
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$1:
  00000008: 8D 8D 78 FF FF FF  lea         ecx,[ebp-88h]
  0000000E: E9 00 00 00 00     jmp         __unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$2
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$2:
  00000013: 8D 8D 6C FF FF FF  lea         ecx,[ebp-94h]
  00000019: E9 00 00 00 00     jmp         __unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$3
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$3:
  0000001E: 8D 8D 60 FF FF FF  lea         ecx,[ebp-0A0h]
  00000024: E9 00 00 00 00     jmp         __unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$4
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$4:
  00000029: 8D 8D 50 FF FF FF  lea         ecx,[ebp-0B0h]
  0000002F: E9 00 00 00 00     jmp         __unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$5
__unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$5:
  00000034: 8D 8D 44 FF FF FF  lea         ecx,[ebp-0BCh]
  0000003A: E9 00 00 00 00     jmp         __ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
__ehhandler$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ:
  0000003F: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  00000043: 8D 42 0C           lea         eax,[edx+0Ch]
  00000046: 8B 8A 0C FF FF FF  mov         ecx,dword ptr [edx-0F4h]
  0000004C: 33 C8              xor         ecx,eax
  0000004E: E8 00 00 00 00     call        00000053
  00000053: 8B 4A FC           mov         ecx,dword ptr [edx-4]
  00000056: 33 C8              xor         ecx,eax
  00000058: E8 00 00 00 00     call        0000005D
  0000005D: B8 00 00 00 00     mov         eax,offset __unwindfunclet$?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ$0
  00000062: E9 00 00 00 00     jmp         00000067

??$_Fgetc@D@std@@YA_NAADPAU_iobuf@@@Z (bool __cdecl std::_Fgetc<char>(char &,struct _iobuf *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  0000000E: 50                 push        eax
  0000000F: E8 00 00 00 00     call        00000014
  00000014: 83 C4 04           add         esp,4
  00000017: 89 45 FC           mov         dword ptr [ebp-4],eax
  0000001A: 83 7D FC FF        cmp         dword ptr [ebp-4],0FFh
  0000001E: 75 06              jne         00000026
  00000020: 32 C0              xor         al,al
  00000022: EB 0C              jmp         00000030
  00000024: EB 0A              jmp         00000030
  00000026: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000029: 8A 55 FC           mov         dl,byte ptr [ebp-4]
  0000002C: 88 11              mov         byte ptr [ecx],dl
  0000002E: B0 01              mov         al,1
  00000030: 83 C4 04           add         esp,4
  00000033: 3B EC              cmp         ebp,esp
  00000035: E8 00 00 00 00     call        0000003A
  0000003A: 8B E5              mov         esp,ebp
  0000003C: 5D                 pop         ebp
  0000003D: C3                 ret

??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ (public: __thiscall std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ]
  00000010: 50                 push        eax
  00000011: 83 EC 08           sub         esp,8
  00000014: C7 45 EC CC CC CC  mov         dword ptr [ebp-14h],0CCCCCCCCh
            CC
  0000001B: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000022: A1 00 00 00 00     mov         eax,[??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ]
  00000027: 33 C5              xor         eax,ebp
  00000029: 50                 push        eax
  0000002A: 8D 45 F4           lea         eax,[ebp-0Ch]
  0000002D: 64 A3 00 00 00 00  mov         fs:[??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ],eax
  00000033: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  00000036: 51                 push        ecx
  00000037: 8B CC              mov         ecx,esp
  00000039: 89 65 EC           mov         dword ptr [ebp-14h],esp
  0000003C: E8 00 00 00 00     call        00000041
  00000041: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000044: E8 00 00 00 00     call        00000049
  00000049: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
            00
  00000050: 6A 00              push        0
  00000052: 6A 00              push        0
  00000054: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000057: E8 00 00 00 00     call        0000005C
  0000005C: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000063: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000066: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000069: 64 89 0D 00 00 00  mov         dword ptr fs:[??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ],ecx
            00
  00000070: 59                 pop         ecx
  00000071: 83 C4 14           add         esp,14h
  00000074: 3B EC              cmp         ebp,esp
  00000076: E8 00 00 00 00     call        0000007B
  0000007B: 8B E5              mov         esp,ebp
  0000007D: 5D                 pop         ebp
  0000007E: C3                 ret

__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0:
  00000000: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000003: E9 00 00 00 00     jmp         __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ:
  00000008: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000000F: 8B 4A F4           mov         ecx,dword ptr [edx-0Ch]
  00000012: 33 C8              xor         ecx,eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
  0000001E: E9 00 00 00 00     jmp         00000023

?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z (protected: virtual class std::fpos<int> __thiscall std::basic_filebuf<char,struct std::char_traits<char> >::seekoff(long,int,int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 14           sub         esp,14h
  00000006: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000B: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000000E: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000011: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000014: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000017: 89 45 FC           mov         dword ptr [ebp-4],eax
  0000001A: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000001D: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000020: E8 00 00 00 00     call        00000025
  00000025: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000028: 83 C1 40           add         ecx,40h
  0000002B: 3B C1              cmp         eax,ecx
  0000002D: 75 18              jne         00000047
  0000002F: 83 7D 10 01        cmp         dword ptr [ebp+10h],1
  00000033: 75 12              jne         00000047
  00000035: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000038: 83 7A 3C 00        cmp         dword ptr [edx+3Ch],0
  0000003C: 75 09              jne         00000047
  0000003E: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000041: 83 E8 01           sub         eax,1
  00000044: 89 45 0C           mov         dword ptr [ebp+0Ch],eax
  00000047: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000004A: 83 79 4C 00        cmp         dword ptr [ecx+4Ch],0
  0000004E: 74 4D              je          0000009D
  00000050: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000053: E8 00 00 00 00     call        00000058
  00000058: 0F B6 D0           movzx       edx,al
  0000005B: 85 D2              test        edx,edx
  0000005D: 74 3E              je          0000009D
  0000005F: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  00000063: 75 06              jne         0000006B
  00000065: 83 7D 10 01        cmp         dword ptr [ebp+10h],1
  00000069: 74 1B              je          00000086
  0000006B: 8B 45 10           mov         eax,dword ptr [ebp+10h]
  0000006E: 50                 push        eax
  0000006F: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000072: 51                 push        ecx
  00000073: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000076: 8B 42 4C           mov         eax,dword ptr [edx+4Ch]
  00000079: 50                 push        eax
  0000007A: E8 00 00 00 00     call        0000007F
  0000007F: 83 C4 0C           add         esp,0Ch
  00000082: 85 C0              test        eax,eax
  00000084: 75 17              jne         0000009D
  00000086: 8D 4D F0           lea         ecx,[ebp-10h]
  00000089: 51                 push        ecx
  0000008A: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000008D: 8B 42 4C           mov         eax,dword ptr [edx+4Ch]
  00000090: 50                 push        eax
  00000091: E8 00 00 00 00     call        00000096
  00000096: 83 C4 08           add         esp,8
  00000099: 85 C0              test        eax,eax
  0000009B: 74 14              je          000000B1
  0000009D: 8B 0D 00 00 00 00  mov         ecx,dword ptr [?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z]
  000000A3: 51                 push        ecx
  000000A4: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  000000A7: E8 00 00 00 00     call        000000AC
  000000AC: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000000AF: EB 49              jmp         000000FA
  000000B1: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000000B4: E8 00 00 00 00     call        000000B9
  000000B9: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  000000BC: 83 C2 40           add         edx,40h
  000000BF: 3B C2              cmp         eax,edx
  000000C1: 75 1D              jne         000000E0
  000000C3: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000000C6: 83 C0 41           add         eax,41h
  000000C9: 50                 push        eax
  000000CA: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000000CD: 83 C1 41           add         ecx,41h
  000000D0: 51                 push        ecx
  000000D1: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  000000D4: 83 C2 40           add         edx,40h
  000000D7: 52                 push        edx
  000000D8: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000000DB: E8 00 00 00 00     call        000000E0
  000000E0: 8B 45 F4           mov         eax,dword ptr [ebp-0Ch]
  000000E3: 50                 push        eax
  000000E4: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  000000E7: 51                 push        ecx
  000000E8: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  000000EB: 8B 42 44           mov         eax,dword ptr [edx+44h]
  000000EE: 50                 push        eax
  000000EF: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  000000F2: E8 00 00 00 00     call        000000F7
  000000F7: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000000FA: 52                 push        edx
  000000FB: 8B CD              mov         ecx,ebp
  000000FD: 50                 push        eax
  000000FE: 8D 15 00 00 00 00  lea         edx,[?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@JHH@Z]
  00000104: E8 00 00 00 00     call        00000109
  00000109: 58                 pop         eax
  0000010A: 5A                 pop         edx
  0000010B: 83 C4 14           add         esp,14h
  0000010E: 3B EC              cmp         ebp,esp
  00000110: E8 00 00 00 00     call        00000115
  00000115: 8B E5              mov         esp,ebp
  00000117: 5D                 pop         ebp
  00000118: C2 10 00           ret         10h
  0000011B: 90                 nop
$LN11:
  0000011C: 01 00              add         dword ptr [eax],eax
  0000011E: 00 00              add         byte ptr [eax],al
  00000120: 00 00              add         byte ptr [eax],al
  00000122: 00 00              add         byte ptr [eax],al
$LN10:
  00000124: F0
  00000125: FF
  00000126: FF
  00000127: FF 08              dec         dword ptr [eax]
  00000129: 00 00              add         byte ptr [eax],al
  0000012B: 00 00              add         byte ptr [eax],al
  0000012D: 00 00              add         byte ptr [eax],al
  0000012F: 00 5F 46           add         byte ptr [edi+46h],bl
  00000132: 69 6C 65 70 6F 73  imul        ebp,dword ptr [ebp+70h],7469736Fh
            69 74
  0000013A: 69
  0000013B: 6F                 outs        dx,dword ptr [esi]
  0000013C: 6E                 outs        dx,byte ptr [esi]
  0000013D: 00

?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z (protected: virtual class std::fpos<int> __thiscall std::basic_filebuf<char,struct std::char_traits<char> >::seekpos(class std::fpos<int>,int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 18           sub         esp,18h
  00000006: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000B: 89 45 E8           mov         dword ptr [ebp-18h],eax
  0000000E: 89 45 EC           mov         dword ptr [ebp-14h],eax
  00000011: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000014: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000017: 89 45 F8           mov         dword ptr [ebp-8],eax
  0000001A: 89 45 FC           mov         dword ptr [ebp-4],eax
  0000001D: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000020: 8D 4D 0C           lea         ecx,[ebp+0Ch]
  00000023: E8 00 00 00 00     call        00000028
  00000028: 89 45 F0           mov         dword ptr [ebp-10h],eax
  0000002B: 89 55 F4           mov         dword ptr [ebp-0Ch],edx
  0000002E: 8D 4D 0C           lea         ecx,[ebp+0Ch]
  00000031: E8 00 00 00 00     call        00000036
  00000036: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000039: 2B C1              sub         eax,ecx
  0000003B: 89 45 E8           mov         dword ptr [ebp-18h],eax
  0000003E: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000041: 83 7A 4C 00        cmp         dword ptr [edx+4Ch],0
  00000045: 74 5C              je          000000A3
  00000047: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000004A: E8 00 00 00 00     call        0000004F
  0000004F: 0F B6 C0           movzx       eax,al
  00000052: 85 C0              test        eax,eax
  00000054: 74 4D              je          000000A3
  00000056: 8D 4D F0           lea         ecx,[ebp-10h]
  00000059: 51                 push        ecx
  0000005A: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000005D: 8B 42 4C           mov         eax,dword ptr [edx+4Ch]
  00000060: 50                 push        eax
  00000061: E8 00 00 00 00     call        00000066
  00000066: 83 C4 08           add         esp,8
  00000069: 85 C0              test        eax,eax
  0000006B: 75 36              jne         000000A3
  0000006D: 83 7D E8 00        cmp         dword ptr [ebp-18h],0
  00000071: 74 19              je          0000008C
  00000073: 6A 01              push        1
  00000075: 8B 4D E8           mov         ecx,dword ptr [ebp-18h]
  00000078: 51                 push        ecx
  00000079: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000007C: 8B 42 4C           mov         eax,dword ptr [edx+4Ch]
  0000007F: 50                 push        eax
  00000080: E8 00 00 00 00     call        00000085
  00000085: 83 C4 0C           add         esp,0Ch
  00000088: 85 C0              test        eax,eax
  0000008A: 75 17              jne         000000A3
  0000008C: 8D 4D F0           lea         ecx,[ebp-10h]
  0000008F: 51                 push        ecx
  00000090: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000093: 8B 42 4C           mov         eax,dword ptr [edx+4Ch]
  00000096: 50                 push        eax
  00000097: E8 00 00 00 00     call        0000009C
  0000009C: 83 C4 08           add         esp,8
  0000009F: 85 C0              test        eax,eax
  000000A1: 74 14              je          000000B7
  000000A3: 8B 0D 00 00 00 00  mov         ecx,dword ptr [?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z]
  000000A9: 51                 push        ecx
  000000AA: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  000000AD: E8 00 00 00 00     call        000000B2
  000000B2: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000000B5: EB 57              jmp         0000010E
  000000B7: 8D 4D 0C           lea         ecx,[ebp+0Ch]
  000000BA: E8 00 00 00 00     call        000000BF
  000000BF: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  000000C2: 89 42 44           mov         dword ptr [edx+44h],eax
  000000C5: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000000C8: E8 00 00 00 00     call        000000CD
  000000CD: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000000D0: 83 C1 40           add         ecx,40h
  000000D3: 3B C1              cmp         eax,ecx
  000000D5: 75 1D              jne         000000F4
  000000D7: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  000000DA: 83 C2 41           add         edx,41h
  000000DD: 52                 push        edx
  000000DE: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000000E1: 83 C0 41           add         eax,41h
  000000E4: 50                 push        eax
  000000E5: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000000E8: 83 C1 40           add         ecx,40h
  000000EB: 51                 push        ecx
  000000EC: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000000EF: E8 00 00 00 00     call        000000F4
  000000F4: 8B 55 F4           mov         edx,dword ptr [ebp-0Ch]
  000000F7: 52                 push        edx
  000000F8: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  000000FB: 50                 push        eax
  000000FC: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000000FF: 8B 51 44           mov         edx,dword ptr [ecx+44h]
  00000102: 52                 push        edx
  00000103: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000106: E8 00 00 00 00     call        0000010B
  0000010B: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000010E: 52                 push        edx
  0000010F: 8B CD              mov         ecx,ebp
  00000111: 50                 push        eax
  00000112: 8D 15 00 00 00 00  lea         edx,[?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAE?AV?$fpos@H@2@V32@H@Z]
  00000118: E8 00 00 00 00     call        0000011D
  0000011D: 58                 pop         eax
  0000011E: 5A                 pop         edx
  0000011F: 83 C4 18           add         esp,18h
  00000122: 3B EC              cmp         ebp,esp
  00000124: E8 00 00 00 00     call        00000129
  00000129: 8B E5              mov         esp,ebp
  0000012B: 5D                 pop         ebp
  0000012C: C2 20 00           ret         20h
  0000012F: 90                 nop
$LN9:
  00000130: 01 00              add         dword ptr [eax],eax
  00000132: 00 00              add         byte ptr [eax],al
  00000134: 00 00              add         byte ptr [eax],al
  00000136: 00 00              add         byte ptr [eax],al
$LN8:
  00000138: F0
  00000139: FF
  0000013A: FF
  0000013B: FF 08              dec         dword ptr [eax]
  0000013D: 00 00              add         byte ptr [eax],al
  0000013F: 00 00              add         byte ptr [eax],al
  00000141: 00 00              add         byte ptr [eax],al
  00000143: 00 5F 46           add         byte ptr [edi+46h],bl
  00000146: 69 6C 65 70 6F 73  imul        ebp,dword ptr [ebp+70h],7469736Fh
            69 74
  0000014E: 69
  0000014F: 6F                 outs        dx,dword ptr [esi]
  00000150: 6E                 outs        dx,byte ptr [esi]
  00000151: 00

?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PADH@Z (protected: virtual class std::basic_streambuf<char,struct std::char_traits<char> > * __thiscall std::basic_filebuf<char,struct std::char_traits<char> >::setbuf(char *,int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000014: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000017: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001A: 83 78 4C 00        cmp         dword ptr [eax+4Ch],0
  0000001E: 74 3B              je          0000005B
  00000020: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  00000024: 75 0F              jne         00000035
  00000026: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  0000002A: 75 09              jne         00000035
  0000002C: C7 45 F8 04 00 00  mov         dword ptr [ebp-8],4
            00
  00000033: EB 07              jmp         0000003C
  00000035: C7 45 F8 00 00 00  mov         dword ptr [ebp-8],offset ?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PADH@Z
            00
  0000003C: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  0000003F: 51                 push        ecx
  00000040: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  00000043: 52                 push        edx
  00000044: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000047: 50                 push        eax
  00000048: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000004B: 8B 51 4C           mov         edx,dword ptr [ecx+4Ch]
  0000004E: 52                 push        edx
  0000004F: E8 00 00 00 00     call        00000054
  00000054: 83 C4 10           add         esp,10h
  00000057: 85 C0              test        eax,eax
  00000059: 74 06              je          00000061
  0000005B: 33 C0              xor         eax,eax
  0000005D: EB 16              jmp         00000075
  0000005F: EB 14              jmp         00000075
  00000061: 6A 01              push        1
  00000063: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000066: 8B 48 4C           mov         ecx,dword ptr [eax+4Ch]
  00000069: 51                 push        ecx
  0000006A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000006D: E8 00 00 00 00     call        00000072
  00000072: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000075: 83 C4 08           add         esp,8
  00000078: 3B EC              cmp         ebp,esp
  0000007A: E8 00 00 00 00     call        0000007F
  0000007F: 8B E5              mov         esp,ebp
  00000081: 5D                 pop         ebp
  00000082: C2 08 00           ret         8

?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ (protected: virtual int __thiscall std::basic_filebuf<char,struct std::char_traits<char> >::sync(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 10           sub         esp,10h
  00000006: 56                 push        esi
  00000007: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000C: 89 45 F0           mov         dword ptr [ebp-10h],eax
  0000000F: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000012: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000015: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000018: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000001B: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001E: 83 78 4C 00        cmp         dword ptr [eax+4Ch],0
  00000022: 74 5A              je          0000007E
  00000024: E8 00 00 00 00     call        00000029
  00000029: 8B F4              mov         esi,esp
  0000002B: 50                 push        eax
  0000002C: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000002F: 8B 11              mov         edx,dword ptr [ecx]
  00000031: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000034: 8B 42 04           mov         eax,dword ptr [edx+4]
  00000037: FF D0              call        eax
  00000039: 3B F4              cmp         esi,esp
  0000003B: E8 00 00 00 00     call        00000040
  00000040: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000043: E8 00 00 00 00     call        00000048
  00000048: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  0000004B: 8D 4D F8           lea         ecx,[ebp-8]
  0000004E: 51                 push        ecx
  0000004F: 8D 55 F4           lea         edx,[ebp-0Ch]
  00000052: 52                 push        edx
  00000053: E8 00 00 00 00     call        00000058
  00000058: 83 C4 08           add         esp,8
  0000005B: 0F B6 C0           movzx       eax,al
  0000005E: 85 C0              test        eax,eax
  00000060: 75 1C              jne         0000007E
  00000062: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000065: 8B 51 4C           mov         edx,dword ptr [ecx+4Ch]
  00000068: 52                 push        edx
  00000069: E8 00 00 00 00     call        0000006E
  0000006E: 83 C4 04           add         esp,4
  00000071: 85 C0              test        eax,eax
  00000073: 7D 09              jge         0000007E
  00000075: C7 45 F0 FF FF FF  mov         dword ptr [ebp-10h],0FFFFFFFFh
            FF
  0000007C: EB 07              jmp         00000085
  0000007E: C7 45 F0 00 00 00  mov         dword ptr [ebp-10h],offset ?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEHXZ
            00
  00000085: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000088: 5E                 pop         esi
  00000089: 83 C4 10           add         esp,10h
  0000008C: 3B EC              cmp         ebp,esp
  0000008E: E8 00 00 00 00     call        00000093
  00000093: 8B E5              mov         esp,ebp
  00000095: 5D                 pop         ebp
  00000096: C3                 ret

?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MAEXABVlocale@2@@Z (protected: virtual void __thiscall std::basic_filebuf<char,struct std::char_traits<char> >::imbue(class std::locale const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000011: 50                 push        eax
  00000012: E8 00 00 00 00     call        00000017
  00000017: 83 C4 04           add         esp,4
  0000001A: 50                 push        eax
  0000001B: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001E: E8 00 00 00 00     call        00000023
  00000023: 83 C4 04           add         esp,4
  00000026: 3B EC              cmp         ebp,esp
  00000028: E8 00 00 00 00     call        0000002D
  0000002D: 8B E5              mov         esp,ebp
  0000002F: 5D                 pop         ebp
  00000030: C2 04 00           ret         4

??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z (public: __thiscall std::basic_ofstream<char,struct std::char_traits<char> >::basic_ofstream<char,struct std::char_traits<char> >(char const *,int,int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z]
  00000010: 50                 push        eax
  00000011: 83 EC 08           sub         esp,8
  00000014: C7 45 EC CC CC CC  mov         dword ptr [ebp-14h],0CCCCCCCCh
            CC
  0000001B: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000022: A1 00 00 00 00     mov         eax,[??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z]
  00000027: 33 C5              xor         eax,ebp
  00000029: 50                 push        eax
  0000002A: 8D 45 F4           lea         eax,[ebp-0Ch]
  0000002D: 64 A3 00 00 00 00  mov         fs:[??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z],eax
  00000033: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  00000036: C7 45 EC 00 00 00  mov         dword ptr [ebp-14h],offset ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
            00
  0000003D: 83 7D 14 00        cmp         dword ptr [ebp+14h],0
  00000041: 74 24              je          00000067
  00000043: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000046: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
  0000004C: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000004F: 83 C1 54           add         ecx,54h
  00000052: E8 00 00 00 00     call        00000057
  00000057: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
            00
  0000005E: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000061: 83 C9 01           or          ecx,1
  00000064: 89 4D EC           mov         dword ptr [ebp-14h],ecx
  00000067: 6A 00              push        0
  00000069: 6A 00              push        0
  0000006B: 8B 55 F0           mov         edx,dword ptr [ebp-10h]
  0000006E: 83 C2 04           add         edx,4
  00000071: 52                 push        edx
  00000072: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000075: E8 00 00 00 00     call        0000007A
  0000007A: C7 45 FC 01 00 00  mov         dword ptr [ebp-4],1
            00
  00000081: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000084: 8B 08              mov         ecx,dword ptr [eax]
  00000086: 8B 51 04           mov         edx,dword ptr [ecx+4]
  00000089: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  0000008C: C7 04 10 00 00 00  mov         dword ptr [eax+edx],offset ??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
            00
  00000093: 6A 00              push        0
  00000095: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000098: 83 C1 04           add         ecx,4
  0000009B: E8 00 00 00 00     call        000000A0
  000000A0: C6 45 FC 02        mov         byte ptr [ebp-4],2
  000000A4: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  000000A7: 51                 push        ecx
  000000A8: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  000000AB: 83 CA 02           or          edx,2
  000000AE: 52                 push        edx
  000000AF: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000000B2: 50                 push        eax
  000000B3: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  000000B6: 83 C1 04           add         ecx,4
  000000B9: E8 00 00 00 00     call        000000BE
  000000BE: 85 C0              test        eax,eax
  000000C0: 75 14              jne         000000D6
  000000C2: 6A 00              push        0
  000000C4: 6A 02              push        2
  000000C6: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  000000C9: 8B 11              mov         edx,dword ptr [ecx]
  000000CB: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  000000CE: 03 4A 04           add         ecx,dword ptr [edx+4]
  000000D1: E8 00 00 00 00     call        000000D6
  000000D6: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000000DD: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  000000E0: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  000000E3: 64 89 0D 00 00 00  mov         dword ptr fs:[??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z],ecx
            00
  000000EA: 59                 pop         ecx
  000000EB: 83 C4 14           add         esp,14h
  000000EE: 3B EC              cmp         ebp,esp
  000000F0: E8 00 00 00 00     call        000000F5
  000000F5: 8B E5              mov         esp,ebp
  000000F7: 5D                 pop         ebp
  000000F8: C2 10 00           ret         10h

__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0:
  00000000: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000003: 83 E0 01           and         eax,1
  00000006: 0F 84 0F 00 00 00  je          $LN6
  0000000C: 83 65 EC FE        and         dword ptr [ebp-14h],0FEh
  00000010: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000013: 83 C1 54           add         ecx,54h
  00000016: E9 00 00 00 00     jmp         $LN6
$LN6:
  0000001B: C3                 ret
__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$1:
  0000001C: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000001F: 83 C1 04           add         ecx,4
  00000022: E9 00 00 00 00     jmp         __unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2
__unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$2:
  00000027: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000002A: 83 C1 04           add         ecx,4
  0000002D: E9 00 00 00 00     jmp         __ehhandler$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z
__ehhandler$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z:
  00000032: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  00000036: 8D 42 0C           lea         eax,[edx+0Ch]
  00000039: 8B 4A F4           mov         ecx,dword ptr [edx-0Ch]
  0000003C: 33 C8              xor         ecx,eax
  0000003E: E8 00 00 00 00     call        00000043
  00000043: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??0?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAE@PBDHH@Z$0
  00000048: E9 00 00 00 00     jmp         0000004D

??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ (public: virtual __thiscall std::basic_ostream<char,struct std::char_traits<char> >::~basic_ostream<char,struct std::char_traits<char> >(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 48 FC           mov         ecx,dword ptr [eax-4]
  00000014: 8B 51 04           mov         edx,dword ptr [ecx+4]
  00000017: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001A: C7 44 10 FC 00 00  mov         dword ptr [eax+edx-4],offset ??1?$basic_ostream@DU?$char_traits@D@std@@@std@@UAE@XZ
            00 00
  00000022: 8B E5              mov         esp,ebp
  00000024: 5D                 pop         ebp
  00000025: C3                 ret

??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ (public: virtual __thiscall std::basic_ofstream<char,struct std::char_traits<char> >::~basic_ofstream<char,struct std::char_traits<char> >(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ]
  00000010: 50                 push        eax
  00000011: 51                 push        ecx
  00000012: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000019: A1 00 00 00 00     mov         eax,[??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ]
  0000001E: 33 C5              xor         eax,ebp
  00000020: 50                 push        eax
  00000021: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000024: 64 A3 00 00 00 00  mov         fs:[??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ],eax
  0000002A: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  0000002D: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000030: 8B 48 AC           mov         ecx,dword ptr [eax-54h]
  00000033: 8B 51 04           mov         edx,dword ptr [ecx+4]
  00000036: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000039: C7 44 10 AC 00 00  mov         dword ptr [eax+edx-54h],offset ??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ
            00 00
  00000041: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ
            00
  00000048: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000004B: 83 E9 50           sub         ecx,50h
  0000004E: E8 00 00 00 00     call        00000053
  00000053: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  0000005A: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000005D: 83 E9 50           sub         ecx,50h
  00000060: E8 00 00 00 00     call        00000065
  00000065: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000068: 64 89 0D 00 00 00  mov         dword ptr fs:[??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ],ecx
            00
  0000006F: 59                 pop         ecx
  00000070: 83 C4 10           add         esp,10h
  00000073: 3B EC              cmp         ebp,esp
  00000075: E8 00 00 00 00     call        0000007A
  0000007A: 8B E5              mov         esp,ebp
  0000007C: 5D                 pop         ebp
  0000007D: C3                 ret

__unwindfunclet$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ$0:
  00000000: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000003: 83 E9 50           sub         ecx,50h
  00000006: E9 00 00 00 00     jmp         __ehhandler$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ
__ehhandler$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ:
  0000000B: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000F: 8D 42 0C           lea         eax,[edx+0Ch]
  00000012: 8B 4A F8           mov         ecx,dword ptr [edx-8]
  00000015: 33 C8              xor         ecx,eax
  00000017: E8 00 00 00 00     call        0000001C
  0000001C: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??1?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAE@XZ$0
  00000021: E9 00 00 00 00     jmp         00000026

?is_open@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QBE_NXZ (public: bool __thiscall std::basic_ofstream<char,struct std::char_traits<char> >::is_open(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: 83 C1 04           add         ecx,4
  00000014: E8 00 00 00 00     call        00000019
  00000019: 83 C4 04           add         esp,4
  0000001C: 3B EC              cmp         ebp,esp
  0000001E: E8 00 00 00 00     call        00000023
  00000023: 8B E5              mov         esp,ebp
  00000025: 5D                 pop         ebp
  00000026: C3                 ret

?close@?$basic_ofstream@DU?$char_traits@D@std@@@std@@QAEXXZ (public: void __thiscall std::basic_ofstream<char,struct std::char_traits<char> >::close(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: 83 C1 04           add         ecx,4
  00000014: E8 00 00 00 00     call        00000019
  00000019: 85 C0              test        eax,eax
  0000001B: 75 16              jne         00000033
  0000001D: 6A 00              push        0
  0000001F: 6A 02              push        2
  00000021: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000024: 8B 08              mov         ecx,dword ptr [eax]
  00000026: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000029: 03 51 04           add         edx,dword ptr [ecx+4]
  0000002C: 8B CA              mov         ecx,edx
  0000002E: E8 00 00 00 00     call        00000033
  00000033: 83 C4 04           add         esp,4
  00000036: 3B EC              cmp         ebp,esp
  00000038: E8 00 00 00 00     call        0000003D
  0000003D: 8B E5              mov         esp,ebp
  0000003F: 5D                 pop         ebp
  00000040: C3                 ret

??1?$_String_val@DV?$allocator@D@std@@@std@@QAE@XZ (public: __thiscall std::_String_val<char,class std::allocator<char> >::~_String_val<char,class std::allocator<char> >(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 83 C4 04           add         esp,4
  00000019: 3B EC              cmp         ebp,esp
  0000001B: E8 00 00 00 00     call        00000020
  00000020: 8B E5              mov         esp,ebp
  00000022: 5D                 pop         ebp
  00000023: C3                 ret

??0bad_alloc@std@@QAE@ABV01@@Z (public: __thiscall std::bad_alloc::bad_alloc(class std::bad_alloc const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000011: 50                 push        eax
  00000012: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000015: E8 00 00 00 00     call        0000001A
  0000001A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001D: C7 01 00 00 00 00  mov         dword ptr [ecx],offset ??0bad_alloc@std@@QAE@ABV01@@Z
  00000023: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000026: 83 C4 04           add         esp,4
  00000029: 3B EC              cmp         ebp,esp
  0000002B: E8 00 00 00 00     call        00000030
  00000030: 8B E5              mov         esp,ebp
  00000032: 5D                 pop         ebp
  00000033: C2 04 00           ret         4

??0?$_DebugHeapAllocator@D@std@@QAE@XZ (public: __thiscall std::_DebugHeapAllocator<char>::_DebugHeapAllocator<char>(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000019: 83 C4 04           add         esp,4
  0000001C: 3B EC              cmp         ebp,esp
  0000001E: E8 00 00 00 00     call        00000023
  00000023: 8B E5              mov         esp,ebp
  00000025: 5D                 pop         ebp
  00000026: C3                 ret

??_G?$basic_ostream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z (public: virtual void * __thiscall std::basic_ostream<char,struct std::char_traits<char> >::`scalar deleting destructor'(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: 83 E9 04           sub         ecx,4
  00000014: E8 00 00 00 00     call        00000019
  00000019: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000001C: 83 E0 01           and         eax,1
  0000001F: 74 0F              je          00000030
  00000021: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000024: 83 E9 04           sub         ecx,4
  00000027: 51                 push        ecx
  00000028: E8 00 00 00 00     call        0000002D
  0000002D: 83 C4 04           add         esp,4
  00000030: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000033: 83 E8 04           sub         eax,4
  00000036: 83 C4 04           add         esp,4
  00000039: 3B EC              cmp         ebp,esp
  0000003B: E8 00 00 00 00     call        00000040
  00000040: 8B E5              mov         esp,ebp
  00000042: 5D                 pop         ebp
  00000043: C2 04 00           ret         4

??_G?$basic_ios@DU?$char_traits@D@std@@@std@@UAEPAXI@Z (public: virtual void * __thiscall std::basic_ios<char,struct std::char_traits<char> >::`scalar deleting destructor'(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000019: 83 E0 01           and         eax,1
  0000001C: 74 0C              je          0000002A
  0000001E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000021: 51                 push        ecx
  00000022: E8 00 00 00 00     call        00000027
  00000027: 83 C4 04           add         esp,4
  0000002A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002D: 83 C4 04           add         esp,4
  00000030: 3B EC              cmp         ebp,esp
  00000032: E8 00 00 00 00     call        00000037
  00000037: 8B E5              mov         esp,ebp
  00000039: 5D                 pop         ebp
  0000003A: C2 04 00           ret         4

??_G?$basic_istream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z (public: virtual void * __thiscall std::basic_istream<char,struct std::char_traits<char> >::`scalar deleting destructor'(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: 83 E9 08           sub         ecx,8
  00000014: E8 00 00 00 00     call        00000019
  00000019: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000001C: 83 E0 01           and         eax,1
  0000001F: 74 0F              je          00000030
  00000021: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000024: 83 E9 08           sub         ecx,8
  00000027: 51                 push        ecx
  00000028: E8 00 00 00 00     call        0000002D
  0000002D: 83 C4 04           add         esp,4
  00000030: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000033: 83 E8 08           sub         eax,8
  00000036: 83 C4 04           add         esp,4
  00000039: 3B EC              cmp         ebp,esp
  0000003B: E8 00 00 00 00     call        00000040
  00000040: 8B E5              mov         esp,ebp
  00000042: 5D                 pop         ebp
  00000043: C2 04 00           ret         4

??_G?$basic_streambuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z (public: virtual void * __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::`scalar deleting destructor'(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000019: 83 E0 01           and         eax,1
  0000001C: 74 0C              je          0000002A
  0000001E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000021: 51                 push        ecx
  00000022: E8 00 00 00 00     call        00000027
  00000027: 83 C4 04           add         esp,4
  0000002A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002D: 83 C4 04           add         esp,4
  00000030: 3B EC              cmp         ebp,esp
  00000032: E8 00 00 00 00     call        00000037
  00000037: 8B E5              mov         esp,ebp
  00000039: 5D                 pop         ebp
  0000003A: C2 04 00           ret         4

??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z (public: virtual void * __thiscall std::basic_ifstream<char,struct std::char_traits<char> >::`scalar deleting destructor'(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: 83 E9 58           sub         ecx,58h
  00000014: E8 00 00 00 00     call        00000019
  00000019: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000001C: 83 E0 01           and         eax,1
  0000001F: 74 0F              je          00000030
  00000021: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000024: 83 E9 58           sub         ecx,58h
  00000027: 51                 push        ecx
  00000028: E8 00 00 00 00     call        0000002D
  0000002D: 83 C4 04           add         esp,4
  00000030: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000033: 83 E8 58           sub         eax,58h
  00000036: 83 C4 04           add         esp,4
  00000039: 3B EC              cmp         ebp,esp
  0000003B: E8 00 00 00 00     call        00000040
  00000040: 8B E5              mov         esp,ebp
  00000042: 5D                 pop         ebp
  00000043: C2 04 00           ret         4

??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UAEPAXI@Z (public: virtual void * __thiscall std::basic_filebuf<char,struct std::char_traits<char> >::`scalar deleting destructor'(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000019: 83 E0 01           and         eax,1
  0000001C: 74 0C              je          0000002A
  0000001E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000021: 51                 push        ecx
  00000022: E8 00 00 00 00     call        00000027
  00000027: 83 C4 04           add         esp,4
  0000002A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002D: 83 C4 04           add         esp,4
  00000030: 3B EC              cmp         ebp,esp
  00000032: E8 00 00 00 00     call        00000037
  00000037: 8B E5              mov         esp,ebp
  00000039: 5D                 pop         ebp
  0000003A: C2 04 00           ret         4

??1?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ (public: __thiscall std::_String_iterator<char,struct std::char_traits<char>,class std::allocator<char> >::~_String_iterator<char,struct std::char_traits<char>,class std::allocator<char> >(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 83 C4 04           add         esp,4
  00000019: 3B EC              cmp         ebp,esp
  0000001B: E8 00 00 00 00     call        00000020
  00000020: 8B E5              mov         esp,ebp
  00000022: 5D                 pop         ebp
  00000023: C3                 ret

??_G?$basic_ofstream@DU?$char_traits@D@std@@@std@@UAEPAXI@Z (public: virtual void * __thiscall std::basic_ofstream<char,struct std::char_traits<char> >::`scalar deleting destructor'(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: 83 E9 54           sub         ecx,54h
  00000014: E8 00 00 00 00     call        00000019
  00000019: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000001C: 83 E0 01           and         eax,1
  0000001F: 74 0F              je          00000030
  00000021: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000024: 83 E9 54           sub         ecx,54h
  00000027: 51                 push        ecx
  00000028: E8 00 00 00 00     call        0000002D
  0000002D: 83 C4 04           add         esp,4
  00000030: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000033: 83 E8 54           sub         eax,54h
  00000036: 83 C4 04           add         esp,4
  00000039: 3B EC              cmp         ebp,esp
  0000003B: E8 00 00 00 00     call        00000040
  00000040: 8B E5              mov         esp,ebp
  00000042: 5D                 pop         ebp
  00000043: C2 04 00           ret         4

??1_String_base@std@@QAE@XZ (public: __thiscall std::_String_base::~_String_base(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 83 C4 04           add         esp,4
  00000019: 3B EC              cmp         ebp,esp
  0000001B: E8 00 00 00 00     call        00000020
  00000020: 8B E5              mov         esp,ebp
  00000022: 5D                 pop         ebp
  00000023: C3                 ret

??1_Container_base_secure@std@@QAE@XZ (public: __thiscall std::_Container_base_secure::~_Container_base_secure(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 83 C4 04           add         esp,4
  00000019: 3B EC              cmp         ebp,esp
  0000001B: E8 00 00 00 00     call        00000020
  00000020: 8B E5              mov         esp,ebp
  00000022: 5D                 pop         ebp
  00000023: C3                 ret

?_Orphan_all@_Container_base_secure@std@@QBEXXZ (public: void __thiscall std::_Container_base_secure::_Orphan_all(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 14           sub         esp,14h
  00000006: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000B: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000000E: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000011: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000014: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000017: 89 45 FC           mov         dword ptr [ebp-4],eax
  0000001A: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000001D: 6A 03              push        3
  0000001F: 8D 4D F4           lea         ecx,[ebp-0Ch]
  00000022: E8 00 00 00 00     call        00000027
  00000027: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002A: 83 38 FD           cmp         dword ptr [eax],0FDh
  0000002D: 74 33              je          00000062
  0000002F: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000032: 89 4D EC           mov         dword ptr [ebp-14h],ecx
  00000035: EB 0D              jmp         00000044
  00000037: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  0000003A: 8B 02              mov         eax,dword ptr [edx]
  0000003C: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  0000003F: 8B 50 04           mov         edx,dword ptr [eax+4]
  00000042: 89 11              mov         dword ptr [ecx],edx
  00000044: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000047: 83 38 00           cmp         dword ptr [eax],0
  0000004A: 74 0D              je          00000059
  0000004C: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  0000004F: 8B 11              mov         edx,dword ptr [ecx]
  00000051: C7 02 00 00 00 00  mov         dword ptr [edx],offset ?_Orphan_all@_Container_base_secure@std@@QBEXXZ
  00000057: EB DE              jmp         00000037
  00000059: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000005C: C7 00 00 00 00 00  mov         dword ptr [eax],offset ?_Orphan_all@_Container_base_secure@std@@QBEXXZ
  00000062: 8D 4D F4           lea         ecx,[ebp-0Ch]
  00000065: E8 00 00 00 00     call        0000006A
  0000006A: 52                 push        edx
  0000006B: 8B CD              mov         ecx,ebp
  0000006D: 50                 push        eax
  0000006E: 8D 15 00 00 00 00  lea         edx,[?_Orphan_all@_Container_base_secure@std@@QBEXXZ]
  00000074: E8 00 00 00 00     call        00000079
  00000079: 58                 pop         eax
  0000007A: 5A                 pop         edx
  0000007B: 83 C4 14           add         esp,14h
  0000007E: 3B EC              cmp         ebp,esp
  00000080: E8 00 00 00 00     call        00000085
  00000085: 8B E5              mov         esp,ebp
  00000087: 5D                 pop         ebp
  00000088: C3                 ret
  00000089: 8D 49 00           lea         ecx,[ecx]
$LN10:
  0000008C: 01 00              add         dword ptr [eax],eax
  0000008E: 00 00              add         byte ptr [eax],al
  00000090: 00 00              add         byte ptr [eax],al
  00000092: 00 00              add         byte ptr [eax],al
$LN9:
  00000094: F4                 hlt
  00000095: FF
  00000096: FF
  00000097: FF 04 00           inc         dword ptr [eax+eax]
  0000009A: 00 00              add         byte ptr [eax],al
  0000009C: 00 00              add         byte ptr [eax],al
  0000009E: 00 00              add         byte ptr [eax],al
$LN8:
  000000A0: 5F                 pop         edi
  000000A1: 4C                 dec         esp
  000000A2: 6F                 outs        dx,dword ptr [esi]
  000000A3: 63 6B 00           arpl        word ptr [ebx],bp

??_D?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ (public: void __thiscall std::basic_ostream<char,struct std::char_traits<char> >::`vbase destructor'(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: 83 C1 04           add         ecx,4
  00000014: E8 00 00 00 00     call        00000019
  00000019: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001C: 83 C1 04           add         ecx,4
  0000001F: E8 00 00 00 00     call        00000024
  00000024: 83 C4 04           add         esp,4
  00000027: 3B EC              cmp         ebp,esp
  00000029: E8 00 00 00 00     call        0000002E
  0000002E: 8B E5              mov         esp,ebp
  00000030: 5D                 pop         ebp
  00000031: C3                 ret

??_D?$basic_istream@DU?$char_traits@D@std@@@std@@QAEXXZ (public: void __thiscall std::basic_istream<char,struct std::char_traits<char> >::`vbase destructor'(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: 83 C1 08           add         ecx,8
  00000014: E8 00 00 00 00     call        00000019
  00000019: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001C: 83 C1 08           add         ecx,8
  0000001F: E8 00 00 00 00     call        00000024
  00000024: 83 C4 04           add         esp,4
  00000027: 3B EC              cmp         ebp,esp
  00000029: E8 00 00 00 00     call        0000002E
  0000002E: 8B E5              mov         esp,ebp
  00000030: 5D                 pop         ebp
  00000031: C3                 ret

??1?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ (public: __thiscall std::_String_const_iterator<char,struct std::char_traits<char>,class std::allocator<char> >::~_String_const_iterator<char,struct std::char_traits<char>,class std::allocator<char> >(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 83 C4 04           add         esp,4
  00000019: 3B EC              cmp         ebp,esp
  0000001B: E8 00 00 00 00     call        00000020
  00000020: 8B E5              mov         esp,ebp
  00000022: 5D                 pop         ebp
  00000023: C3                 ret

??1?$_Ranit_base@DHPBDABDV_Iterator_base@std@@@std@@QAE@XZ (public: __thiscall std::_Ranit_base<char,int,char const *,char const &,class std::_Iterator_base>::~_Ranit_base<char,int,char const *,char const &,class std::_Iterator_base>(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 83 C4 04           add         esp,4
  00000019: 3B EC              cmp         ebp,esp
  0000001B: E8 00 00 00 00     call        00000020
  00000020: 8B E5              mov         esp,ebp
  00000022: 5D                 pop         ebp
  00000023: C3                 ret

??1_Iterator_base@std@@QAE@XZ (public: __thiscall std::_Iterator_base::~_Iterator_base(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??1_Iterator_base@std@@QAE@XZ
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??1_Iterator_base@std@@QAE@XZ]
  00000010: 50                 push        eax
  00000011: 83 EC 10           sub         esp,10h
  00000014: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000019: 89 45 E4           mov         dword ptr [ebp-1Ch],eax
  0000001C: 89 45 E8           mov         dword ptr [ebp-18h],eax
  0000001F: 89 45 EC           mov         dword ptr [ebp-14h],eax
  00000022: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000025: A1 00 00 00 00     mov         eax,[??1_Iterator_base@std@@QAE@XZ]
  0000002A: 33 C5              xor         eax,ebp
  0000002C: 50                 push        eax
  0000002D: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000030: 64 A3 00 00 00 00  mov         fs:[??1_Iterator_base@std@@QAE@XZ],eax
  00000036: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  00000039: 6A 03              push        3
  0000003B: 8D 4D E8           lea         ecx,[ebp-18h]
  0000003E: E8 00 00 00 00     call        00000043
  00000043: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??1_Iterator_base@std@@QAE@XZ
            00
  0000004A: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000004D: E8 00 00 00 00     call        00000052
  00000052: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000059: 8D 4D E8           lea         ecx,[ebp-18h]
  0000005C: E8 00 00 00 00     call        00000061
  00000061: 52                 push        edx
  00000062: 8B CD              mov         ecx,ebp
  00000064: 50                 push        eax
  00000065: 8D 15 00 00 00 00  lea         edx,[??1_Iterator_base@std@@QAE@XZ]
  0000006B: E8 00 00 00 00     call        00000070
  00000070: 58                 pop         eax
  00000071: 5A                 pop         edx
  00000072: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000075: 64 89 0D 00 00 00  mov         dword ptr fs:[??1_Iterator_base@std@@QAE@XZ],ecx
            00
  0000007C: 59                 pop         ecx
  0000007D: 83 C4 1C           add         esp,1Ch
  00000080: 3B EC              cmp         ebp,esp
  00000082: E8 00 00 00 00     call        00000087
  00000087: 8B E5              mov         esp,ebp
  00000089: 5D                 pop         ebp
  0000008A: C3                 ret
  0000008B: 90                 nop
$LN7:
  0000008C: 01 00              add         dword ptr [eax],eax
  0000008E: 00 00              add         byte ptr [eax],al
  00000090: 00 00              add         byte ptr [eax],al
  00000092: 00 00              add         byte ptr [eax],al
$LN6:
  00000094: E8 FF FF FF 04     call        05000098
  00000099: 00 00              add         byte ptr [eax],al
  0000009B: 00 00              add         byte ptr [eax],al
  0000009D: 00 00              add         byte ptr [eax],al
  0000009F: 00 5F 4C           add         byte ptr [edi+4Ch],bl
  000000A2: 6F                 outs        dx,dword ptr [esi]
  000000A3: 63 6B 00           arpl        word ptr [ebx],bp

__unwindfunclet$??1_Iterator_base@std@@QAE@XZ$0:
  00000000: 8D 4D E8           lea         ecx,[ebp-18h]
  00000003: E9 00 00 00 00     jmp         __ehhandler$??1_Iterator_base@std@@QAE@XZ
__ehhandler$??1_Iterator_base@std@@QAE@XZ:
  00000008: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000000F: 8B 4A EC           mov         ecx,dword ptr [edx-14h]
  00000012: 33 C8              xor         ecx,eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??1_Iterator_base@std@@QAE@XZ$0
  0000001E: E9 00 00 00 00     jmp         00000023

?_Orphan_me@_Iterator_base@std@@QAEXXZ (public: void __thiscall std::_Iterator_base::_Orphan_me(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000014: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000017: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001A: 83 38 00           cmp         dword ptr [eax],0
  0000001D: 74 64              je          00000083
  0000001F: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000022: 8B 11              mov         edx,dword ptr [ecx]
  00000024: 83 3A FD           cmp         dword ptr [edx],0FDh
  00000027: 74 5A              je          00000083
  00000029: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002C: 8B 08              mov         ecx,dword ptr [eax]
  0000002E: 89 4D F8           mov         dword ptr [ebp-8],ecx
  00000031: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  00000034: 83 3A 00           cmp         dword ptr [edx],0
  00000037: 74 17              je          00000050
  00000039: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  0000003C: 8B 08              mov         ecx,dword ptr [eax]
  0000003E: 3B 4D FC           cmp         ecx,dword ptr [ebp-4]
  00000041: 74 0D              je          00000050
  00000043: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  00000046: 8B 02              mov         eax,dword ptr [edx]
  00000048: 83 C0 04           add         eax,4
  0000004B: 89 45 F8           mov         dword ptr [ebp-8],eax
  0000004E: EB E1              jmp         00000031
  00000050: 8B 4D F8           mov         ecx,dword ptr [ebp-8]
  00000053: 83 39 00           cmp         dword ptr [ecx],0
  00000056: 75 17              jne         0000006F
  00000058: 68 BD 00 00 00     push        0BDh
  0000005D: 68 00 00 00 00     push        offset ?_Orphan_me@_Iterator_base@std@@QAEXXZ
  00000062: 68 00 00 00 00     push        offset ?_Orphan_me@_Iterator_base@std@@QAEXXZ
  00000067: E8 00 00 00 00     call        0000006C
  0000006C: 83 C4 0C           add         esp,0Ch
  0000006F: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  00000072: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000075: 8B 48 04           mov         ecx,dword ptr [eax+4]
  00000078: 89 0A              mov         dword ptr [edx],ecx
  0000007A: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000007D: C7 02 00 00 00 00  mov         dword ptr [edx],offset ?_Orphan_me@_Iterator_base@std@@QAEXXZ
  00000083: 83 C4 08           add         esp,8
  00000086: 3B EC              cmp         ebp,esp
  00000088: E8 00 00 00 00     call        0000008D
  0000008D: 8B E5              mov         esp,ebp
  0000008F: 5D                 pop         ebp
  00000090: C3                 ret

??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z (public: __thiscall std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(unsigned int,char)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z]
  00000010: 50                 push        eax
  00000011: 83 EC 08           sub         esp,8
  00000014: C7 45 EC CC CC CC  mov         dword ptr [ebp-14h],0CCCCCCCCh
            CC
  0000001B: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000022: A1 00 00 00 00     mov         eax,[??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z]
  00000027: 33 C5              xor         eax,ebp
  00000029: 50                 push        eax
  0000002A: 8D 45 F4           lea         eax,[ebp-0Ch]
  0000002D: 64 A3 00 00 00 00  mov         fs:[??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z],eax
  00000033: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  00000036: 51                 push        ecx
  00000037: 8B CC              mov         ecx,esp
  00000039: 89 65 EC           mov         dword ptr [ebp-14h],esp
  0000003C: E8 00 00 00 00     call        00000041
  00000041: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000044: E8 00 00 00 00     call        00000049
  00000049: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
            00
  00000050: 6A 00              push        0
  00000052: 6A 00              push        0
  00000054: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000057: E8 00 00 00 00     call        0000005C
  0000005C: 0F B6 45 0C        movzx       eax,byte ptr [ebp+0Ch]
  00000060: 50                 push        eax
  00000061: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000064: 51                 push        ecx
  00000065: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000068: E8 00 00 00 00     call        0000006D
  0000006D: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000074: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000077: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  0000007A: 64 89 0D 00 00 00  mov         dword ptr fs:[??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z],ecx
            00
  00000081: 59                 pop         ecx
  00000082: 83 C4 14           add         esp,14h
  00000085: 3B EC              cmp         ebp,esp
  00000087: E8 00 00 00 00     call        0000008C
  0000008C: 8B E5              mov         esp,ebp
  0000008E: 5D                 pop         ebp
  0000008F: C2 08 00           ret         8

__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z$0:
  00000000: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000003: E9 00 00 00 00     jmp         __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z:
  00000008: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000000F: 8B 4A F4           mov         ecx,dword ptr [edx-0Ch]
  00000012: 33 C8              xor         ecx,eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ID@Z$0
  0000001E: E9 00 00 00 00     jmp         00000023

?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z (public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __thiscall std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::append(unsigned int,char)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000014: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000017: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001A: 8B 0D 00 00 00 00  mov         ecx,dword ptr [?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z]
  00000020: 2B 48 18           sub         ecx,dword ptr [eax+18h]
  00000023: 3B 4D 08           cmp         ecx,dword ptr [ebp+8]
  00000026: 77 05              ja          0000002D
  00000028: E8 00 00 00 00     call        0000002D
  0000002D: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  00000031: 76 45              jbe         00000078
  00000033: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000036: 8B 42 18           mov         eax,dword ptr [edx+18h]
  00000039: 03 45 08           add         eax,dword ptr [ebp+8]
  0000003C: 89 45 F8           mov         dword ptr [ebp-8],eax
  0000003F: 6A 00              push        0
  00000041: 8B 4D F8           mov         ecx,dword ptr [ebp-8]
  00000044: 51                 push        ecx
  00000045: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000048: E8 00 00 00 00     call        0000004D
  0000004D: 0F B6 D0           movzx       edx,al
  00000050: 85 D2              test        edx,edx
  00000052: 74 24              je          00000078
  00000054: 0F B6 45 0C        movzx       eax,byte ptr [ebp+0Ch]
  00000058: 50                 push        eax
  00000059: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000005C: 51                 push        ecx
  0000005D: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000060: 8B 42 18           mov         eax,dword ptr [edx+18h]
  00000063: 50                 push        eax
  00000064: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000067: E8 00 00 00 00     call        0000006C
  0000006C: 8B 4D F8           mov         ecx,dword ptr [ebp-8]
  0000006F: 51                 push        ecx
  00000070: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000073: E8 00 00 00 00     call        00000078
  00000078: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000007B: 83 C4 08           add         esp,8
  0000007E: 3B EC              cmp         ebp,esp
  00000080: E8 00 00 00 00     call        00000085
  00000085: 8B E5              mov         esp,ebp
  00000087: 5D                 pop         ebp
  00000088: C2 08 00           ret         8

?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z (public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __thiscall std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::erase(unsigned int,unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000014: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000017: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001A: 8B 48 18           mov         ecx,dword ptr [eax+18h]
  0000001D: 3B 4D 08           cmp         ecx,dword ptr [ebp+8]
  00000020: 73 05              jae         00000027
  00000022: E8 00 00 00 00     call        00000027
  00000027: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000002A: 8B 42 18           mov         eax,dword ptr [edx+18h]
  0000002D: 2B 45 08           sub         eax,dword ptr [ebp+8]
  00000030: 3B 45 0C           cmp         eax,dword ptr [ebp+0Ch]
  00000033: 73 0C              jae         00000041
  00000035: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000038: 8B 51 18           mov         edx,dword ptr [ecx+18h]
  0000003B: 2B 55 08           sub         edx,dword ptr [ebp+8]
  0000003E: 89 55 0C           mov         dword ptr [ebp+0Ch],edx
  00000041: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  00000045: 76 52              jbe         00000099
  00000047: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000004A: 8B 48 18           mov         ecx,dword ptr [eax+18h]
  0000004D: 2B 4D 08           sub         ecx,dword ptr [ebp+8]
  00000050: 2B 4D 0C           sub         ecx,dword ptr [ebp+0Ch]
  00000053: 51                 push        ecx
  00000054: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000057: E8 00 00 00 00     call        0000005C
  0000005C: 03 45 08           add         eax,dword ptr [ebp+8]
  0000005F: 03 45 0C           add         eax,dword ptr [ebp+0Ch]
  00000062: 50                 push        eax
  00000063: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000066: 8B 42 1C           mov         eax,dword ptr [edx+1Ch]
  00000069: 2B 45 08           sub         eax,dword ptr [ebp+8]
  0000006C: 50                 push        eax
  0000006D: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000070: E8 00 00 00 00     call        00000075
  00000075: 03 45 08           add         eax,dword ptr [ebp+8]
  00000078: 50                 push        eax
  00000079: E8 00 00 00 00     call        0000007E
  0000007E: 83 C4 10           add         esp,10h
  00000081: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000084: 8B 51 18           mov         edx,dword ptr [ecx+18h]
  00000087: 2B 55 0C           sub         edx,dword ptr [ebp+0Ch]
  0000008A: 89 55 F8           mov         dword ptr [ebp-8],edx
  0000008D: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  00000090: 50                 push        eax
  00000091: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000094: E8 00 00 00 00     call        00000099
  00000099: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000009C: 83 C4 08           add         esp,8
  0000009F: 3B EC              cmp         ebp,esp
  000000A1: E8 00 00 00 00     call        000000A6
  000000A6: 8B E5              mov         esp,ebp
  000000A8: 5D                 pop         ebp
  000000A9: C2 08 00           ret         8

?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ (public: class std::_String_iterator<char,struct std::char_traits<char>,class std::allocator<char> > __thiscall std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::begin(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000014: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000017: C7 45 F8 00 00 00  mov         dword ptr [ebp-8],offset ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
            00
  0000001E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000021: 50                 push        eax
  00000022: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000025: E8 00 00 00 00     call        0000002A
  0000002A: 50                 push        eax
  0000002B: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000002E: E8 00 00 00 00     call        00000033
  00000033: 8B 4D F8           mov         ecx,dword ptr [ebp-8]
  00000036: 83 C9 01           or          ecx,1
  00000039: 89 4D F8           mov         dword ptr [ebp-8],ecx
  0000003C: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000003F: 83 C4 08           add         esp,8
  00000042: 3B EC              cmp         ebp,esp
  00000044: E8 00 00 00 00     call        00000049
  00000049: 8B E5              mov         esp,ebp
  0000004B: 5D                 pop         ebp
  0000004C: C2 04 00           ret         4

?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEX_NI@Z (protected: void __thiscall std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy(bool,unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000014: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000017: 0F B6 45 08        movzx       eax,byte ptr [ebp+8]
  0000001B: 85 C0              test        eax,eax
  0000001D: 75 02              jne         00000021
  0000001F: EB 4A              jmp         0000006B
  00000021: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000024: 83 79 1C 10        cmp         dword ptr [ecx+1Ch],10h
  00000028: 72 41              jb          0000006B
  0000002A: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000002D: 8B 42 08           mov         eax,dword ptr [edx+8]
  00000030: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000033: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  00000037: 76 19              jbe         00000052
  00000039: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  0000003C: 51                 push        ecx
  0000003D: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  00000040: 52                 push        edx
  00000041: 6A 10              push        10h
  00000043: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000046: 83 C0 08           add         eax,8
  00000049: 50                 push        eax
  0000004A: E8 00 00 00 00     call        0000004F
  0000004F: 83 C4 10           add         esp,10h
  00000052: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000055: 8B 51 1C           mov         edx,dword ptr [ecx+1Ch]
  00000058: 83 C2 01           add         edx,1
  0000005B: 52                 push        edx
  0000005C: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  0000005F: 50                 push        eax
  00000060: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000063: 83 C1 04           add         ecx,4
  00000066: E8 00 00 00 00     call        0000006B
  0000006B: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000006E: C7 41 1C 0F 00 00  mov         dword ptr [ecx+1Ch],0Fh
            00
  00000075: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  00000078: 52                 push        edx
  00000079: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000007C: E8 00 00 00 00     call        00000081
  00000081: 83 C4 08           add         esp,8
  00000084: 3B EC              cmp         ebp,esp
  00000086: E8 00 00 00 00     call        0000008B
  0000008B: 8B E5              mov         esp,ebp
  0000008D: 5D                 pop         ebp
  0000008E: C2 08 00           ret         8

??0?$_String_val@DV?$allocator@D@std@@@std@@IAE@V?$allocator@D@1@@Z (protected: __thiscall std::_String_val<char,class std::allocator<char> >::_String_val<char,class std::allocator<char> >(class std::allocator<char>)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8D 45 08           lea         eax,[ebp+8]
  00000019: 50                 push        eax
  0000001A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001D: 83 C1 04           add         ecx,4
  00000020: E8 00 00 00 00     call        00000025
  00000025: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000028: 83 C4 04           add         esp,4
  0000002B: 3B EC              cmp         ebp,esp
  0000002D: E8 00 00 00 00     call        00000032
  00000032: 8B E5              mov         esp,ebp
  00000034: 5D                 pop         ebp
  00000035: C2 04 00           ret         4

??0?$allocator@D@std@@QAE@XZ (public: __thiscall std::allocator<char>::allocator<char>(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B E5              mov         esp,ebp
  00000013: 5D                 pop         ebp
  00000014: C3                 ret

??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z (public: __thiscall std::basic_ostream<char,struct std::char_traits<char> >::basic_ostream<char,struct std::char_traits<char> >(class std::basic_streambuf<char,struct std::char_traits<char> > *,bool)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z]
  00000010: 50                 push        eax
  00000011: 83 EC 08           sub         esp,8
  00000014: C7 45 EC CC CC CC  mov         dword ptr [ebp-14h],0CCCCCCCCh
            CC
  0000001B: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000022: A1 00 00 00 00     mov         eax,[??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z]
  00000027: 33 C5              xor         eax,ebp
  00000029: 50                 push        eax
  0000002A: 8D 45 F4           lea         eax,[ebp-0Ch]
  0000002D: 64 A3 00 00 00 00  mov         fs:[??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z],eax
  00000033: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  00000036: C7 45 EC 00 00 00  mov         dword ptr [ebp-14h],offset ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
            00
  0000003D: 83 7D 10 00        cmp         dword ptr [ebp+10h],0
  00000041: 74 24              je          00000067
  00000043: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000046: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  0000004C: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000004F: 83 C1 04           add         ecx,4
  00000052: E8 00 00 00 00     call        00000057
  00000057: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
            00
  0000005E: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000061: 83 C9 01           or          ecx,1
  00000064: 89 4D EC           mov         dword ptr [ebp-14h],ecx
  00000067: 8B 55 F0           mov         edx,dword ptr [ebp-10h]
  0000006A: 8B 02              mov         eax,dword ptr [edx]
  0000006C: 8B 48 04           mov         ecx,dword ptr [eax+4]
  0000006F: 8B 55 F0           mov         edx,dword ptr [ebp-10h]
  00000072: C7 04 0A 00 00 00  mov         dword ptr [edx+ecx],offset ??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
            00
  00000079: 0F B6 45 0C        movzx       eax,byte ptr [ebp+0Ch]
  0000007D: 50                 push        eax
  0000007E: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000081: 51                 push        ecx
  00000082: 8B 55 F0           mov         edx,dword ptr [ebp-10h]
  00000085: 8B 02              mov         eax,dword ptr [edx]
  00000087: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000008A: 03 48 04           add         ecx,dword ptr [eax+4]
  0000008D: E8 00 00 00 00     call        00000092
  00000092: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000099: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  0000009C: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  0000009F: 64 89 0D 00 00 00  mov         dword ptr fs:[??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z],ecx
            00
  000000A6: 59                 pop         ecx
  000000A7: 83 C4 14           add         esp,14h
  000000AA: 3B EC              cmp         ebp,esp
  000000AC: E8 00 00 00 00     call        000000B1
  000000B1: 8B E5              mov         esp,ebp
  000000B3: 5D                 pop         ebp
  000000B4: C2 0C 00           ret         0Ch

__unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0:
  00000000: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000003: 83 E0 01           and         eax,1
  00000006: 0F 84 0F 00 00 00  je          $LN5
  0000000C: 83 65 EC FE        and         dword ptr [ebp-14h],0FEh
  00000010: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000013: 83 C1 04           add         ecx,4
  00000016: E9 00 00 00 00     jmp         $LN5
$LN5:
  0000001B: C3                 ret
__ehhandler$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:
  0000001C: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  00000020: 8D 42 0C           lea         eax,[edx+0Ch]
  00000023: 8B 4A F4           mov         ecx,dword ptr [edx-0Ch]
  00000026: 33 C8              xor         ecx,eax
  00000028: E8 00 00 00 00     call        0000002D
  0000002D: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??0?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0
  00000032: E9 00 00 00 00     jmp         00000037

?clear@?$basic_ios@DU?$char_traits@D@std@@@std@@QAEXH_N@Z (public: void __thiscall std::basic_ios<char,struct std::char_traits<char> >::clear(int,bool)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000014: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000017: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001A: 83 78 28 00        cmp         dword ptr [eax+28h],0
  0000001E: 75 0B              jne         0000002B
  00000020: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000023: 83 C9 04           or          ecx,4
  00000026: 89 4D F8           mov         dword ptr [ebp-8],ecx
  00000029: EB 06              jmp         00000031
  0000002B: 8B 55 08           mov         edx,dword ptr [ebp+8]
  0000002E: 89 55 F8           mov         dword ptr [ebp-8],edx
  00000031: 0F B6 45 0C        movzx       eax,byte ptr [ebp+0Ch]
  00000035: 50                 push        eax
  00000036: 8B 4D F8           mov         ecx,dword ptr [ebp-8]
  00000039: 51                 push        ecx
  0000003A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000003D: E8 00 00 00 00     call        00000042
  00000042: 83 C4 08           add         esp,8
  00000045: 3B EC              cmp         ebp,esp
  00000047: E8 00 00 00 00     call        0000004C
  0000004C: 8B E5              mov         esp,ebp
  0000004E: 5D                 pop         ebp
  0000004F: C2 08 00           ret         8

?clear@ios_base@std@@QAEXH_N@Z (public: void __thiscall std::ios_base::clear(int,bool)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ?clear@ios_base@std@@QAEXH_N@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[?clear@ios_base@std@@QAEXH_N@Z]
  00000010: 50                 push        eax
  00000011: 81 EC E8 00 00 00  sub         esp,0E8h
  00000017: 57                 push        edi
  00000018: 51                 push        ecx
  00000019: 8D BD 0C FF FF FF  lea         edi,[ebp-0F4h]
  0000001F: B9 3A 00 00 00     mov         ecx,3Ah
  00000024: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000029: F3 AB              rep stos    dword ptr [edi]
  0000002B: 59                 pop         ecx
  0000002C: A1 00 00 00 00     mov         eax,[?clear@ios_base@std@@QAEXH_N@Z]
  00000031: 33 C5              xor         eax,ebp
  00000033: 50                 push        eax
  00000034: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000037: 64 A3 00 00 00 00  mov         fs:[?clear@ios_base@std@@QAEXH_N@Z],eax
  0000003D: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  00000040: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000043: 83 E0 17           and         eax,17h
  00000046: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000049: 89 41 08           mov         dword ptr [ecx+8],eax
  0000004C: 8B 55 F0           mov         edx,dword ptr [ebp-10h]
  0000004F: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000052: 8B 4A 08           mov         ecx,dword ptr [edx+8]
  00000055: 23 48 0C           and         ecx,dword ptr [eax+0Ch]
  00000058: 75 05              jne         0000005F
  0000005A: E9 14 01 00 00     jmp         00000173
  0000005F: 0F B6 55 0C        movzx       edx,byte ptr [ebp+0Ch]
  00000063: 85 D2              test        edx,edx
  00000065: 74 0E              je          00000075
  00000067: 6A 00              push        0
  00000069: 6A 00              push        0
  0000006B: E8 00 00 00 00     call        00000070
  00000070: E9 FE 00 00 00     jmp         00000173
  00000075: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000078: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000007B: 8B 50 08           mov         edx,dword ptr [eax+8]
  0000007E: 23 51 0C           and         edx,dword ptr [ecx+0Ch]
  00000081: 83 E2 04           and         edx,4
  00000084: 74 42              je          000000C8
  00000086: 68 00 00 00 00     push        offset ?clear@ios_base@std@@QAEXH_N@Z
  0000008B: 8D 4D A4           lea         ecx,[ebp-5Ch]
  0000008E: E8 00 00 00 00     call        00000093
  00000093: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?clear@ios_base@std@@QAEXH_N@Z
            00
  0000009A: 8D 45 A4           lea         eax,[ebp-5Ch]
  0000009D: 50                 push        eax
  0000009E: 8D 4D C4           lea         ecx,[ebp-3Ch]
  000000A1: E8 00 00 00 00     call        000000A6
  000000A6: 68 00 00 00 00     push        offset ?clear@ios_base@std@@QAEXH_N@Z
  000000AB: 8D 4D C4           lea         ecx,[ebp-3Ch]
  000000AE: 51                 push        ecx
  000000AF: E8 00 00 00 00     call        000000B4
  000000B4: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000000BB: 8D 4D A4           lea         ecx,[ebp-5Ch]
  000000BE: E8 00 00 00 00     call        000000C3
  000000C3: E9 AB 00 00 00     jmp         00000173
  000000C8: 8B 55 F0           mov         edx,dword ptr [ebp-10h]
  000000CB: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  000000CE: 8B 4A 08           mov         ecx,dword ptr [edx+8]
  000000D1: 23 48 0C           and         ecx,dword ptr [eax+0Ch]
  000000D4: 83 E1 02           and         ecx,2
  000000D7: 74 4E              je          00000127
  000000D9: 68 00 00 00 00     push        offset ?clear@ios_base@std@@QAEXH_N@Z
  000000DE: 8D 8D 58 FF FF FF  lea         ecx,[ebp-0A8h]
  000000E4: E8 00 00 00 00     call        000000E9
  000000E9: C7 45 FC 01 00 00  mov         dword ptr [ebp-4],1
            00
  000000F0: 8D 95 58 FF FF FF  lea         edx,[ebp-0A8h]
  000000F6: 52                 push        edx
  000000F7: 8D 8D 78 FF FF FF  lea         ecx,[ebp-88h]
  000000FD: E8 00 00 00 00     call        00000102
  00000102: 68 00 00 00 00     push        offset ?clear@ios_base@std@@QAEXH_N@Z
  00000107: 8D 85 78 FF FF FF  lea         eax,[ebp-88h]
  0000010D: 50                 push        eax
  0000010E: E8 00 00 00 00     call        00000113
  00000113: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  0000011A: 8D 8D 58 FF FF FF  lea         ecx,[ebp-0A8h]
  00000120: E8 00 00 00 00     call        00000125
  00000125: EB 4C              jmp         00000173
  00000127: 68 00 00 00 00     push        offset ?clear@ios_base@std@@QAEXH_N@Z
  0000012C: 8D 8D 0C FF FF FF  lea         ecx,[ebp-0F4h]
  00000132: E8 00 00 00 00     call        00000137
  00000137: C7 45 FC 02 00 00  mov         dword ptr [ebp-4],2
            00
  0000013E: 8D 8D 0C FF FF FF  lea         ecx,[ebp-0F4h]
  00000144: 51                 push        ecx
  00000145: 8D 8D 2C FF FF FF  lea         ecx,[ebp-0D4h]
  0000014B: E8 00 00 00 00     call        00000150
  00000150: 68 00 00 00 00     push        offset ?clear@ios_base@std@@QAEXH_N@Z
  00000155: 8D 95 2C FF FF FF  lea         edx,[ebp-0D4h]
  0000015B: 52                 push        edx
  0000015C: E8 00 00 00 00     call        00000161
  00000161: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000168: 8D 8D 0C FF FF FF  lea         ecx,[ebp-0F4h]
  0000016E: E8 00 00 00 00     call        00000173
  00000173: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000176: 64 89 0D 00 00 00  mov         dword ptr fs:[?clear@ios_base@std@@QAEXH_N@Z],ecx
            00
  0000017D: 59                 pop         ecx
  0000017E: 5F                 pop         edi
  0000017F: 81 C4 F4 00 00 00  add         esp,0F4h
  00000185: 3B EC              cmp         ebp,esp
  00000187: E8 00 00 00 00     call        0000018C
  0000018C: 8B E5              mov         esp,ebp
  0000018E: 5D                 pop         ebp
  0000018F: C2 08 00           ret         8

__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$0:
  00000000: 8D 4D A4           lea         ecx,[ebp-5Ch]
  00000003: E9 00 00 00 00     jmp         __unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$1
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$1:
  00000008: 8D 8D 58 FF FF FF  lea         ecx,[ebp-0A8h]
  0000000E: E9 00 00 00 00     jmp         __unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$2
__unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$2:
  00000013: 8D 8D 0C FF FF FF  lea         ecx,[ebp-0F4h]
  00000019: E9 00 00 00 00     jmp         __ehhandler$?clear@ios_base@std@@QAEXH_N@Z
__ehhandler$?clear@ios_base@std@@QAEXH_N@Z:
  0000001E: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  00000022: 8D 42 0C           lea         eax,[edx+0Ch]
  00000025: 8B 8A 10 FF FF FF  mov         ecx,dword ptr [edx-0F0h]
  0000002B: 33 C8              xor         ecx,eax
  0000002D: E8 00 00 00 00     call        00000032
  00000032: B8 00 00 00 00     mov         eax,offset __unwindfunclet$?clear@ios_base@std@@QAEXH_N@Z$0
  00000037: E9 00 00 00 00     jmp         0000003C

??0runtime_error@std@@QAE@ABV01@@Z (public: __thiscall std::runtime_error::runtime_error(class std::runtime_error const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??0runtime_error@std@@QAE@ABV01@@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??0runtime_error@std@@QAE@ABV01@@Z]
  00000010: 50                 push        eax
  00000011: 51                 push        ecx
  00000012: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000019: A1 00 00 00 00     mov         eax,[??0runtime_error@std@@QAE@ABV01@@Z]
  0000001E: 33 C5              xor         eax,ebp
  00000020: 50                 push        eax
  00000021: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000024: 64 A3 00 00 00 00  mov         fs:[??0runtime_error@std@@QAE@ABV01@@Z],eax
  0000002A: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  0000002D: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000030: 50                 push        eax
  00000031: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000034: E8 00 00 00 00     call        00000039
  00000039: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0runtime_error@std@@QAE@ABV01@@Z
            00
  00000040: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000043: C7 01 00 00 00 00  mov         dword ptr [ecx],offset ??0runtime_error@std@@QAE@ABV01@@Z
  00000049: 8B 55 08           mov         edx,dword ptr [ebp+8]
  0000004C: 83 C2 0C           add         edx,0Ch
  0000004F: 52                 push        edx
  00000050: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000053: 83 C1 0C           add         ecx,0Ch
  00000056: E8 00 00 00 00     call        0000005B
  0000005B: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000062: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000065: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000068: 64 89 0D 00 00 00  mov         dword ptr fs:[??0runtime_error@std@@QAE@ABV01@@Z],ecx
            00
  0000006F: 59                 pop         ecx
  00000070: 83 C4 10           add         esp,10h
  00000073: 3B EC              cmp         ebp,esp
  00000075: E8 00 00 00 00     call        0000007A
  0000007A: 8B E5              mov         esp,ebp
  0000007C: 5D                 pop         ebp
  0000007D: C2 04 00           ret         4

__unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0:
  00000000: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000003: E9 00 00 00 00     jmp         __ehhandler$??0runtime_error@std@@QAE@ABV01@@Z
__ehhandler$??0runtime_error@std@@QAE@ABV01@@Z:
  00000008: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000000F: 8B 4A F8           mov         ecx,dword ptr [edx-8]
  00000012: 33 C8              xor         ecx,eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0
  0000001E: E9 00 00 00 00     jmp         00000023

?what@runtime_error@std@@UBEPBDXZ (public: virtual char const * __thiscall std::runtime_error::what(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: 83 C1 0C           add         ecx,0Ch
  00000014: E8 00 00 00 00     call        00000019
  00000019: 83 C4 04           add         esp,4
  0000001C: 3B EC              cmp         ebp,esp
  0000001E: E8 00 00 00 00     call        00000023
  00000023: 8B E5              mov         esp,ebp
  00000025: 5D                 pop         ebp
  00000026: C3                 ret

??_Gruntime_error@std@@UAEPAXI@Z (public: virtual void * __thiscall std::runtime_error::`scalar deleting destructor'(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000019: 83 E0 01           and         eax,1
  0000001C: 74 0C              je          0000002A
  0000001E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000021: 51                 push        ecx
  00000022: E8 00 00 00 00     call        00000027
  00000027: 83 C4 04           add         esp,4
  0000002A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002D: 83 C4 04           add         esp,4
  00000030: 3B EC              cmp         ebp,esp
  00000032: E8 00 00 00 00     call        00000037
  00000037: 8B E5              mov         esp,ebp
  00000039: 5D                 pop         ebp
  0000003A: C2 04 00           ret         4

??1runtime_error@std@@UAE@XZ (public: virtual __thiscall std::runtime_error::~runtime_error(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??1runtime_error@std@@UAE@XZ
  00000017: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001A: 83 C1 0C           add         ecx,0Ch
  0000001D: E8 00 00 00 00     call        00000022
  00000022: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000025: E8 00 00 00 00     call        0000002A
  0000002A: 83 C4 04           add         esp,4
  0000002D: 3B EC              cmp         ebp,esp
  0000002F: E8 00 00 00 00     call        00000034
  00000034: 8B E5              mov         esp,ebp
  00000036: 5D                 pop         ebp
  00000037: C3                 ret

??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z (public: __thiscall std::ios_base::failure::failure(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000011: 50                 push        eax
  00000012: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000015: E8 00 00 00 00     call        0000001A
  0000001A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001D: C7 01 00 00 00 00  mov         dword ptr [ecx],offset ??0failure@ios_base@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
  00000023: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000026: 83 C4 04           add         esp,4
  00000029: 3B EC              cmp         ebp,esp
  0000002B: E8 00 00 00 00     call        00000030
  00000030: 8B E5              mov         esp,ebp
  00000032: 5D                 pop         ebp
  00000033: C2 04 00           ret         4

??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z (public: __thiscall std::runtime_error::runtime_error(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z]
  00000010: 50                 push        eax
  00000011: 51                 push        ecx
  00000012: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000019: A1 00 00 00 00     mov         eax,[??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z]
  0000001E: 33 C5              xor         eax,ebp
  00000020: 50                 push        eax
  00000021: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000024: 64 A3 00 00 00 00  mov         fs:[??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z],eax
  0000002A: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  0000002D: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000030: E8 00 00 00 00     call        00000035
  00000035: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
            00
  0000003C: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  0000003F: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  00000045: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000048: 51                 push        ecx
  00000049: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000004C: 83 C1 0C           add         ecx,0Ch
  0000004F: E8 00 00 00 00     call        00000054
  00000054: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  0000005B: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  0000005E: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000061: 64 89 0D 00 00 00  mov         dword ptr fs:[??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z],ecx
            00
  00000068: 59                 pop         ecx
  00000069: 83 C4 10           add         esp,10h
  0000006C: 3B EC              cmp         ebp,esp
  0000006E: E8 00 00 00 00     call        00000073
  00000073: 8B E5              mov         esp,ebp
  00000075: 5D                 pop         ebp
  00000076: C2 04 00           ret         4

__unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000000: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000003: E9 00 00 00 00     jmp         __ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
__ehhandler$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00000008: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000000F: 8B 4A F8           mov         ecx,dword ptr [edx-8]
  00000012: 33 C8              xor         ecx,eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??0runtime_error@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
  0000001E: E9 00 00 00 00     jmp         00000023

??1failure@ios_base@std@@UAE@XZ (public: virtual __thiscall std::ios_base::failure::~failure(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??1failure@ios_base@std@@UAE@XZ
  00000017: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001A: E8 00 00 00 00     call        0000001F
  0000001F: 83 C4 04           add         esp,4
  00000022: 3B EC              cmp         ebp,esp
  00000024: E8 00 00 00 00     call        00000029
  00000029: 8B E5              mov         esp,ebp
  0000002B: 5D                 pop         ebp
  0000002C: C3                 ret

??_Gfailure@ios_base@std@@UAEPAXI@Z (public: virtual void * __thiscall std::ios_base::failure::`scalar deleting destructor'(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000019: 83 E0 01           and         eax,1
  0000001C: 74 0C              je          0000002A
  0000001E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000021: 51                 push        ecx
  00000022: E8 00 00 00 00     call        00000027
  00000027: 83 C4 04           add         esp,4
  0000002A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002D: 83 C4 04           add         esp,4
  00000030: 3B EC              cmp         ebp,esp
  00000032: E8 00 00 00 00     call        00000037
  00000037: 8B E5              mov         esp,ebp
  00000039: 5D                 pop         ebp
  0000003A: C2 04 00           ret         4

??0failure@ios_base@std@@QAE@ABV012@@Z (public: __thiscall std::ios_base::failure::failure(class std::ios_base::failure const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000011: 50                 push        eax
  00000012: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000015: E8 00 00 00 00     call        0000001A
  0000001A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001D: C7 01 00 00 00 00  mov         dword ptr [ecx],offset ??0failure@ios_base@std@@QAE@ABV012@@Z
  00000023: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000026: 83 C4 04           add         esp,4
  00000029: 3B EC              cmp         ebp,esp
  0000002B: E8 00 00 00 00     call        00000030
  00000030: 8B E5              mov         esp,ebp
  00000032: 5D                 pop         ebp
  00000033: C2 04 00           ret         4

??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z (public: __thiscall std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(char const *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z]
  00000010: 50                 push        eax
  00000011: 83 EC 08           sub         esp,8
  00000014: C7 45 EC CC CC CC  mov         dword ptr [ebp-14h],0CCCCCCCCh
            CC
  0000001B: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000022: A1 00 00 00 00     mov         eax,[??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z]
  00000027: 33 C5              xor         eax,ebp
  00000029: 50                 push        eax
  0000002A: 8D 45 F4           lea         eax,[ebp-0Ch]
  0000002D: 64 A3 00 00 00 00  mov         fs:[??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z],eax
  00000033: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  00000036: 51                 push        ecx
  00000037: 8B CC              mov         ecx,esp
  00000039: 89 65 EC           mov         dword ptr [ebp-14h],esp
  0000003C: E8 00 00 00 00     call        00000041
  00000041: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000044: E8 00 00 00 00     call        00000049
  00000049: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
            00
  00000050: 6A 00              push        0
  00000052: 6A 00              push        0
  00000054: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000057: E8 00 00 00 00     call        0000005C
  0000005C: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000005F: 50                 push        eax
  00000060: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000063: E8 00 00 00 00     call        00000068
  00000068: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  0000006F: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000072: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000075: 64 89 0D 00 00 00  mov         dword ptr fs:[??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z],ecx
            00
  0000007C: 59                 pop         ecx
  0000007D: 83 C4 14           add         esp,14h
  00000080: 3B EC              cmp         ebp,esp
  00000082: E8 00 00 00 00     call        00000087
  00000087: 8B E5              mov         esp,ebp
  00000089: 5D                 pop         ebp
  0000008A: C2 04 00           ret         4

__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0:
  00000000: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000003: E9 00 00 00 00     jmp         __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z:
  00000008: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000000F: 8B 4A F4           mov         ecx,dword ptr [edx-0Ch]
  00000012: 33 C8              xor         ecx,eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
  0000001E: E9 00 00 00 00     jmp         00000023

??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z (public: __thiscall std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z]
  00000010: 50                 push        eax
  00000011: 51                 push        ecx
  00000012: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000019: A1 00 00 00 00     mov         eax,[??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z]
  0000001E: 33 C5              xor         eax,ebp
  00000020: 50                 push        eax
  00000021: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000024: 64 A3 00 00 00 00  mov         fs:[??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z],eax
  0000002A: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  0000002D: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000030: 50                 push        eax
  00000031: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000034: E8 00 00 00 00     call        00000039
  00000039: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
            00
  00000040: 6A 00              push        0
  00000042: 6A 00              push        0
  00000044: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000047: E8 00 00 00 00     call        0000004C
  0000004C: 8B 0D 00 00 00 00  mov         ecx,dword ptr [??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z]
  00000052: 51                 push        ecx
  00000053: 6A 00              push        0
  00000055: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000058: 52                 push        edx
  00000059: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000005C: E8 00 00 00 00     call        00000061
  00000061: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000068: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  0000006B: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  0000006E: 64 89 0D 00 00 00  mov         dword ptr fs:[??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z],ecx
            00
  00000075: 59                 pop         ecx
  00000076: 83 C4 10           add         esp,10h
  00000079: 3B EC              cmp         ebp,esp
  0000007B: E8 00 00 00 00     call        00000080
  00000080: 8B E5              mov         esp,ebp
  00000082: 5D                 pop         ebp
  00000083: C2 04 00           ret         4

__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0:
  00000000: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000003: E9 00 00 00 00     jmp         __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z:
  00000008: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000000F: 8B 4A F8           mov         ecx,dword ptr [edx-8]
  00000012: 33 C8              xor         ecx,eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@ABV01@@Z$0
  0000001E: E9 00 00 00 00     jmp         00000023

?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ (public: char const * __thiscall std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 83 C4 04           add         esp,4
  00000019: 3B EC              cmp         ebp,esp
  0000001B: E8 00 00 00 00     call        00000020
  00000020: 8B E5              mov         esp,ebp
  00000022: 5D                 pop         ebp
  00000023: C3                 ret

?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z (public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __thiscall std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned int,unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000014: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000017: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000001A: E8 00 00 00 00     call        0000001F
  0000001F: 3B 45 0C           cmp         eax,dword ptr [ebp+0Ch]
  00000022: 73 05              jae         00000029
  00000024: E8 00 00 00 00     call        00000029
  00000029: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000002C: E8 00 00 00 00     call        00000031
  00000031: 2B 45 0C           sub         eax,dword ptr [ebp+0Ch]
  00000034: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000037: 8B 45 10           mov         eax,dword ptr [ebp+10h]
  0000003A: 3B 45 F8           cmp         eax,dword ptr [ebp-8]
  0000003D: 73 06              jae         00000045
  0000003F: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  00000042: 89 4D F8           mov         dword ptr [ebp-8],ecx
  00000045: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000048: 3B 55 08           cmp         edx,dword ptr [ebp+8]
  0000004B: 75 25              jne         00000072
  0000004D: A1 00 00 00 00     mov         eax,[?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z]
  00000052: 50                 push        eax
  00000053: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000056: 03 4D F8           add         ecx,dword ptr [ebp-8]
  00000059: 51                 push        ecx
  0000005A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000005D: E8 00 00 00 00     call        00000062
  00000062: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  00000065: 52                 push        edx
  00000066: 6A 00              push        0
  00000068: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000006B: E8 00 00 00 00     call        00000070
  00000070: EB 49              jmp         000000BB
  00000072: 6A 00              push        0
  00000074: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  00000077: 50                 push        eax
  00000078: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000007B: E8 00 00 00 00     call        00000080
  00000080: 0F B6 C8           movzx       ecx,al
  00000083: 85 C9              test        ecx,ecx
  00000085: 74 34              je          000000BB
  00000087: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  0000008A: 52                 push        edx
  0000008B: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000008E: E8 00 00 00 00     call        00000093
  00000093: 03 45 0C           add         eax,dword ptr [ebp+0Ch]
  00000096: 50                 push        eax
  00000097: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000009A: 8B 48 1C           mov         ecx,dword ptr [eax+1Ch]
  0000009D: 51                 push        ecx
  0000009E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000000A1: E8 00 00 00 00     call        000000A6
  000000A6: 50                 push        eax
  000000A7: E8 00 00 00 00     call        000000AC
  000000AC: 83 C4 10           add         esp,10h
  000000AF: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  000000B2: 52                 push        edx
  000000B3: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000000B6: E8 00 00 00 00     call        000000BB
  000000BB: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000000BE: 83 C4 08           add         esp,8
  000000C1: 3B EC              cmp         ebp,esp
  000000C3: E8 00 00 00 00     call        000000C8
  000000C8: 8B E5              mov         esp,ebp
  000000CA: 5D                 pop         ebp
  000000CB: C2 0C 00           ret         0Ch

?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z (public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __thiscall std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign(char const *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 68 3C 04 00 00     push        43Ch
  00000013: 68 00 00 00 00     push        offset ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
  00000018: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000001B: 50                 push        eax
  0000001C: E8 00 00 00 00     call        00000021
  00000021: 83 C4 0C           add         esp,0Ch
  00000024: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000027: 51                 push        ecx
  00000028: E8 00 00 00 00     call        0000002D
  0000002D: 83 C4 04           add         esp,4
  00000030: 50                 push        eax
  00000031: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000034: 52                 push        edx
  00000035: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000038: E8 00 00 00 00     call        0000003D
  0000003D: 83 C4 04           add         esp,4
  00000040: 3B EC              cmp         ebp,esp
  00000042: E8 00 00 00 00     call        00000047
  00000047: 8B E5              mov         esp,ebp
  00000049: 5D                 pop         ebp
  0000004A: C2 04 00           ret         4

?length@?$char_traits@D@std@@SAIPBD@Z (public: static unsigned int __cdecl std::char_traits<char>::length(char const *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000006: 50                 push        eax
  00000007: E8 00 00 00 00     call        0000000C
  0000000C: 83 C4 04           add         esp,4
  0000000F: 3B EC              cmp         ebp,esp
  00000011: E8 00 00 00 00     call        00000016
  00000016: 5D                 pop         ebp
  00000017: C3                 ret

?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IBEPBDXZ (protected: char const * __thiscall std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Myptr(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000014: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000017: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001A: 83 78 1C 10        cmp         dword ptr [eax+1Ch],10h
  0000001E: 72 0B              jb          0000002B
  00000020: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000023: 8B 51 08           mov         edx,dword ptr [ecx+8]
  00000026: 89 55 F8           mov         dword ptr [ebp-8],edx
  00000029: EB 09              jmp         00000034
  0000002B: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002E: 83 C0 08           add         eax,8
  00000031: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000034: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  00000037: 8B E5              mov         esp,ebp
  00000039: 5D                 pop         ebp
  0000003A: C3                 ret

??0?$_String_val@DV?$allocator@D@std@@@std@@QAE@ABV01@@Z (public: __thiscall std::_String_val<char,class std::allocator<char> >::_String_val<char,class std::allocator<char> >(class std::_String_val<char,class std::allocator<char> > const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000019: 83 C0 04           add         eax,4
  0000001C: 50                 push        eax
  0000001D: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000020: 83 C1 04           add         ecx,4
  00000023: E8 00 00 00 00     call        00000028
  00000028: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000002B: 83 39 FD           cmp         dword ptr [ecx],0FDh
  0000002E: 75 09              jne         00000039
  00000030: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000033: C7 02 FD FF FF FF  mov         dword ptr [edx],0FFFFFFFDh
  00000039: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000003C: 83 C4 04           add         esp,4
  0000003F: 3B EC              cmp         ebp,esp
  00000041: E8 00 00 00 00     call        00000046
  00000046: 8B E5              mov         esp,ebp
  00000048: 5D                 pop         ebp
  00000049: C2 04 00           ret         4

?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z (public: char __thiscall std::basic_ios<char,struct std::char_traits<char> >::widen(char)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z]
  00000010: 50                 push        eax
  00000011: 83 EC 14           sub         esp,14h
  00000014: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000019: 89 45 E0           mov         dword ptr [ebp-20h],eax
  0000001C: 89 45 E4           mov         dword ptr [ebp-1Ch],eax
  0000001F: 89 45 E8           mov         dword ptr [ebp-18h],eax
  00000022: 89 45 EC           mov         dword ptr [ebp-14h],eax
  00000025: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000028: A1 00 00 00 00     mov         eax,[?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z]
  0000002D: 33 C5              xor         eax,ebp
  0000002F: 50                 push        eax
  00000030: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000033: 64 A3 00 00 00 00  mov         fs:[?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z],eax
  00000039: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  0000003C: 8D 45 E8           lea         eax,[ebp-18h]
  0000003F: 50                 push        eax
  00000040: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000043: E8 00 00 00 00     call        00000048
  00000048: 89 45 E4           mov         dword ptr [ebp-1Ch],eax
  0000004B: 8B 4D E4           mov         ecx,dword ptr [ebp-1Ch]
  0000004E: 89 4D E0           mov         dword ptr [ebp-20h],ecx
  00000051: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
            00
  00000058: 8B 55 E0           mov         edx,dword ptr [ebp-20h]
  0000005B: 52                 push        edx
  0000005C: E8 00 00 00 00     call        00000061
  00000061: 83 C4 04           add         esp,4
  00000064: 89 45 EC           mov         dword ptr [ebp-14h],eax
  00000067: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  0000006E: 8D 4D E8           lea         ecx,[ebp-18h]
  00000071: E8 00 00 00 00     call        00000076
  00000076: 0F B6 45 08        movzx       eax,byte ptr [ebp+8]
  0000007A: 50                 push        eax
  0000007B: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  0000007E: E8 00 00 00 00     call        00000083
  00000083: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000086: 64 89 0D 00 00 00  mov         dword ptr fs:[?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z],ecx
            00
  0000008D: 59                 pop         ecx
  0000008E: 83 C4 20           add         esp,20h
  00000091: 3B EC              cmp         ebp,esp
  00000093: E8 00 00 00 00     call        00000098
  00000098: 8B E5              mov         esp,ebp
  0000009A: 5D                 pop         ebp
  0000009B: C2 04 00           ret         4

__unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0:
  00000000: 8D 4D E8           lea         ecx,[ebp-18h]
  00000003: E9 00 00 00 00     jmp         __ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z
__ehhandler$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z:
  00000008: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000000F: 8B 4A E8           mov         ecx,dword ptr [edx-18h]
  00000012: 33 C8              xor         ecx,eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: B8 00 00 00 00     mov         eax,offset __unwindfunclet$?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEDD@Z$0
  0000001E: E9 00 00 00 00     jmp         00000023

??1locale@std@@QAE@XZ (public: __thiscall std::locale::~locale(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 83 38 00           cmp         dword ptr [eax],0
  00000014: 74 13              je          00000029
  00000016: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000019: 8B 09              mov         ecx,dword ptr [ecx]
  0000001B: E8 00 00 00 00     call        00000020
  00000020: 50                 push        eax
  00000021: E8 00 00 00 00     call        00000026
  00000026: 83 C4 04           add         esp,4
  00000029: 83 C4 04           add         esp,4
  0000002C: 3B EC              cmp         ebp,esp
  0000002E: E8 00 00 00 00     call        00000033
  00000033: 8B E5              mov         esp,ebp
  00000035: 5D                 pop         ebp
  00000036: C3                 ret

?_Decref@facet@locale@std@@QAEPAV123@XZ (public: class std::locale::facet * __thiscall std::locale::facet::_Decref(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 14           sub         esp,14h
  00000006: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000B: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000000E: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000011: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000014: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000017: 89 45 FC           mov         dword ptr [ebp-4],eax
  0000001A: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000001D: 6A 00              push        0
  0000001F: 8D 4D F4           lea         ecx,[ebp-0Ch]
  00000022: E8 00 00 00 00     call        00000027
  00000027: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002A: 83 78 04 00        cmp         dword ptr [eax+4],0
  0000002E: 76 18              jbe         00000048
  00000030: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000033: 83 79 04 FF        cmp         dword ptr [ecx+4],0FFh
  00000037: 73 0F              jae         00000048
  00000039: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000003C: 8B 42 04           mov         eax,dword ptr [edx+4]
  0000003F: 83 E8 01           sub         eax,1
  00000042: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000045: 89 41 04           mov         dword ptr [ecx+4],eax
  00000048: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000004B: 8B 42 04           mov         eax,dword ptr [edx+4]
  0000004E: F7 D8              neg         eax
  00000050: 1B C0              sbb         eax,eax
  00000052: F7 D0              not         eax
  00000054: 23 45 FC           and         eax,dword ptr [ebp-4]
  00000057: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000005A: 8D 4D F4           lea         ecx,[ebp-0Ch]
  0000005D: E8 00 00 00 00     call        00000062
  00000062: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000065: 52                 push        edx
  00000066: 8B CD              mov         ecx,ebp
  00000068: 50                 push        eax
  00000069: 8D 15 00 00 00 00  lea         edx,[?_Decref@facet@locale@std@@QAEPAV123@XZ]
  0000006F: E8 00 00 00 00     call        00000074
  00000074: 58                 pop         eax
  00000075: 5A                 pop         edx
  00000076: 83 C4 14           add         esp,14h
  00000079: 3B EC              cmp         ebp,esp
  0000007B: E8 00 00 00 00     call        00000080
  00000080: 8B E5              mov         esp,ebp
  00000082: 5D                 pop         ebp
  00000083: C3                 ret
$LN7:
  00000084: 01 00              add         dword ptr [eax],eax
  00000086: 00 00              add         byte ptr [eax],al
  00000088: 00 00              add         byte ptr [eax],al
  0000008A: 00 00              add         byte ptr [eax],al
$LN6:
  0000008C: F4                 hlt
  0000008D: FF
  0000008E: FF
  0000008F: FF 04 00           inc         dword ptr [eax+eax]
  00000092: 00 00              add         byte ptr [eax],al
  00000094: 00 00              add         byte ptr [eax],al
  00000096: 00 00              add         byte ptr [eax],al
$LN5:
  00000098: 5F                 pop         edi
  00000099: 4C                 dec         esp
  0000009A: 6F                 outs        dx,dword ptr [esi]
  0000009B: 63 6B 00           arpl        word ptr [ebx],bp

?widen@?$ctype@D@std@@QBEDD@Z (public: char __thiscall std::ctype<char>::widen(char)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: 56                 push        esi
  00000005: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000C: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000F: 8B F4              mov         esi,esp
  00000011: 0F B6 45 08        movzx       eax,byte ptr [ebp+8]
  00000015: 50                 push        eax
  00000016: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000019: 8B 11              mov         edx,dword ptr [ecx]
  0000001B: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001E: 8B 42 18           mov         eax,dword ptr [edx+18h]
  00000021: FF D0              call        eax
  00000023: 3B F4              cmp         esi,esp
  00000025: E8 00 00 00 00     call        0000002A
  0000002A: 5E                 pop         esi
  0000002B: 83 C4 04           add         esp,4
  0000002E: 3B EC              cmp         ebp,esp
  00000030: E8 00 00 00 00     call        00000035
  00000035: 8B E5              mov         esp,ebp
  00000037: 5D                 pop         ebp
  00000038: C2 04 00           ret         4

?getloc@ios_base@std@@QBE?AVlocale@2@XZ (public: class std::locale __thiscall std::ios_base::getloc(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000014: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000017: C7 45 F8 00 00 00  mov         dword ptr [ebp-8],offset ?getloc@ios_base@std@@QBE?AVlocale@2@XZ
            00
  0000001E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000021: 8B 48 24           mov         ecx,dword ptr [eax+24h]
  00000024: 51                 push        ecx
  00000025: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000028: E8 00 00 00 00     call        0000002D
  0000002D: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  00000030: 83 CA 01           or          edx,1
  00000033: 89 55 F8           mov         dword ptr [ebp-8],edx
  00000036: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000039: 83 C4 08           add         esp,8
  0000003C: 3B EC              cmp         ebp,esp
  0000003E: E8 00 00 00 00     call        00000043
  00000043: 8B E5              mov         esp,ebp
  00000045: 5D                 pop         ebp
  00000046: C2 04 00           ret         4

??0locale@std@@QAE@ABV01@@Z (public: __thiscall std::locale::locale(class std::locale const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000014: 8B 11              mov         edx,dword ptr [ecx]
  00000016: 89 10              mov         dword ptr [eax],edx
  00000018: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001B: 8B 08              mov         ecx,dword ptr [eax]
  0000001D: E8 00 00 00 00     call        00000022
  00000022: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000025: 83 C4 04           add         esp,4
  00000028: 3B EC              cmp         ebp,esp
  0000002A: E8 00 00 00 00     call        0000002F
  0000002F: 8B E5              mov         esp,ebp
  00000031: 5D                 pop         ebp
  00000032: C2 04 00           ret         4

?_Incref@facet@locale@std@@QAEXXZ (public: void __thiscall std::locale::facet::_Incref(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 10           sub         esp,10h
  00000006: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000B: 89 45 F0           mov         dword ptr [ebp-10h],eax
  0000000E: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000011: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000014: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000017: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000001A: 6A 00              push        0
  0000001C: 8D 4D F4           lea         ecx,[ebp-0Ch]
  0000001F: E8 00 00 00 00     call        00000024
  00000024: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000027: 83 78 04 FF        cmp         dword ptr [eax+4],0FFh
  0000002B: 73 0F              jae         0000003C
  0000002D: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000030: 8B 51 04           mov         edx,dword ptr [ecx+4]
  00000033: 83 C2 01           add         edx,1
  00000036: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000039: 89 50 04           mov         dword ptr [eax+4],edx
  0000003C: 8D 4D F4           lea         ecx,[ebp-0Ch]
  0000003F: E8 00 00 00 00     call        00000044
  00000044: 52                 push        edx
  00000045: 8B CD              mov         ecx,ebp
  00000047: 50                 push        eax
  00000048: 8D 15 00 00 00 00  lea         edx,[?_Incref@facet@locale@std@@QAEXXZ]
  0000004E: E8 00 00 00 00     call        00000053
  00000053: 58                 pop         eax
  00000054: 5A                 pop         edx
  00000055: 83 C4 10           add         esp,10h
  00000058: 3B EC              cmp         ebp,esp
  0000005A: E8 00 00 00 00     call        0000005F
  0000005F: 8B E5              mov         esp,ebp
  00000061: 5D                 pop         ebp
  00000062: C3                 ret
  00000063: 90                 nop
$LN7:
  00000064: 01 00              add         dword ptr [eax],eax
  00000066: 00 00              add         byte ptr [eax],al
  00000068: 00 00              add         byte ptr [eax],al
  0000006A: 00 00              add         byte ptr [eax],al
$LN6:
  0000006C: F4                 hlt
  0000006D: FF
  0000006E: FF
  0000006F: FF 04 00           inc         dword ptr [eax+eax]
  00000072: 00 00              add         byte ptr [eax],al
  00000074: 00 00              add         byte ptr [eax],al
  00000076: 00 00              add         byte ptr [eax],al
$LN5:
  00000078: 5F                 pop         edi
  00000079: 4C                 dec         esp
  0000007A: 6F                 outs        dx,dword ptr [esi]
  0000007B: 63 6B 00           arpl        word ptr [ebx],bp

??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ (protected: __thiscall std::basic_ios<char,struct std::char_traits<char> >::basic_ios<char,struct std::char_traits<char> >(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000019: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??0?$basic_ios@DU?$char_traits@D@std@@@std@@IAE@XZ
  0000001F: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000022: 83 C4 04           add         esp,4
  00000025: 3B EC              cmp         ebp,esp
  00000027: E8 00 00 00 00     call        0000002C
  0000002C: 8B E5              mov         esp,ebp
  0000002E: 5D                 pop         ebp
  0000002F: C3                 ret

??0ios_base@std@@IAE@XZ (protected: __thiscall std::ios_base::ios_base(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??0ios_base@std@@IAE@XZ
  00000017: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001A: 8B E5              mov         esp,ebp
  0000001C: 5D                 pop         ebp
  0000001D: C3                 ret

??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z (public: __thiscall std::basic_istream<char,struct std::char_traits<char> >::basic_istream<char,struct std::char_traits<char> >(class std::basic_streambuf<char,struct std::char_traits<char> > *,bool)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z]
  00000010: 50                 push        eax
  00000011: 83 EC 08           sub         esp,8
  00000014: C7 45 EC CC CC CC  mov         dword ptr [ebp-14h],0CCCCCCCCh
            CC
  0000001B: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000022: A1 00 00 00 00     mov         eax,[??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z]
  00000027: 33 C5              xor         eax,ebp
  00000029: 50                 push        eax
  0000002A: 8D 45 F4           lea         eax,[ebp-0Ch]
  0000002D: 64 A3 00 00 00 00  mov         fs:[??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z],eax
  00000033: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  00000036: C7 45 EC 00 00 00  mov         dword ptr [ebp-14h],offset ??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
            00
  0000003D: 83 7D 10 00        cmp         dword ptr [ebp+10h],0
  00000041: 74 24              je          00000067
  00000043: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000046: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
  0000004C: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000004F: 83 C1 08           add         ecx,8
  00000052: E8 00 00 00 00     call        00000057
  00000057: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
            00
  0000005E: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000061: 83 C9 01           or          ecx,1
  00000064: 89 4D EC           mov         dword ptr [ebp-14h],ecx
  00000067: 8B 55 F0           mov         edx,dword ptr [ebp-10h]
  0000006A: 8B 02              mov         eax,dword ptr [edx]
  0000006C: 8B 48 04           mov         ecx,dword ptr [eax+4]
  0000006F: 8B 55 F0           mov         edx,dword ptr [ebp-10h]
  00000072: C7 04 0A 00 00 00  mov         dword ptr [edx+ecx],offset ??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
            00
  00000079: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  0000007C: C7 40 04 00 00 00  mov         dword ptr [eax+4],offset ??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z
            00
  00000083: 0F B6 4D 0C        movzx       ecx,byte ptr [ebp+0Ch]
  00000087: 51                 push        ecx
  00000088: 8B 55 08           mov         edx,dword ptr [ebp+8]
  0000008B: 52                 push        edx
  0000008C: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  0000008F: 8B 08              mov         ecx,dword ptr [eax]
  00000091: 8B 55 F0           mov         edx,dword ptr [ebp-10h]
  00000094: 03 51 04           add         edx,dword ptr [ecx+4]
  00000097: 8B CA              mov         ecx,edx
  00000099: E8 00 00 00 00     call        0000009E
  0000009E: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000000A5: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  000000A8: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  000000AB: 64 89 0D 00 00 00  mov         dword ptr fs:[??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z],ecx
            00
  000000B2: 59                 pop         ecx
  000000B3: 83 C4 14           add         esp,14h
  000000B6: 3B EC              cmp         ebp,esp
  000000B8: E8 00 00 00 00     call        000000BD
  000000BD: 8B E5              mov         esp,ebp
  000000BF: 5D                 pop         ebp
  000000C0: C2 0C 00           ret         0Ch

__unwindfunclet$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0:
  00000000: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000003: 83 E0 01           and         eax,1
  00000006: 0F 84 0F 00 00 00  je          $LN5
  0000000C: 83 65 EC FE        and         dword ptr [ebp-14h],0FEh
  00000010: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000013: 83 C1 08           add         ecx,8
  00000016: E9 00 00 00 00     jmp         $LN5
$LN5:
  0000001B: C3                 ret
__ehhandler$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z:
  0000001C: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  00000020: 8D 42 0C           lea         eax,[edx+0Ch]
  00000023: 8B 4A F4           mov         ecx,dword ptr [edx-0Ch]
  00000026: 33 C8              xor         ecx,eax
  00000028: E8 00 00 00 00     call        0000002D
  0000002D: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??0?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@PAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z$0
  00000032: E9 00 00 00 00     jmp         00000037

?getline@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PADHD@Z (public: class std::basic_istream<char,struct std::char_traits<char> > & __thiscall std::basic_istream<char,struct std::char_traits<char> >::getline(char *,int,char)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ?getline@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PADHD@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[?getline@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PADHD@Z]
  00000010: 50                 push        eax
  00000011: 51                 push        ecx
  00000012: 83 EC 54           sub         esp,54h
  00000015: 53                 push        ebx
  00000016: 56                 push        esi
  00000017: 57                 push        edi
  00000018: 51                 push        ecx
  00000019: 8D 7D 9C           lea         edi,[ebp-64h]
  0000001C: B9 15 00 00 00     mov         ecx,15h
  00000021: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000026: F3 AB              rep stos    dword ptr [edi]
  00000028: 59                 pop         ecx
  00000029: A1 00 00 00 00     mov         eax,[?getline@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PADHD@Z]
  0000002E: 33 C5              xor         eax,ebp
  00000030: 50                 push        eax
  00000031: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000034: 64 A3 00 00 00 00  mov         fs:[?getline@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PADHD@Z],eax
  0000003A: 89 65 F0           mov         dword ptr [ebp-10h],esp
  0000003D: 89 4D EC           mov         dword ptr [ebp-14h],ecx
  00000040: 68 59 02 00 00     push        259h
  00000045: 68 00 00 00 00     push        offset ?getline@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PADHD@Z
  0000004A: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000004D: 50                 push        eax
  0000004E: E8 00 00 00 00     call        00000053
  00000053: 83 C4 0C           add         esp,0Ch
  00000056: C7 45 E8 00 00 00  mov         dword ptr [ebp-18h],offset ?getline@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PADHD@Z
            00
  0000005D: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000060: C7 41 04 00 00 00  mov         dword ptr [ecx+4],offset ?getline@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PADHD@Z
            00
  00000067: 6A 01              push        1
  00000069: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  0000006C: 52                 push        edx
  0000006D: 8D 4D DC           lea         ecx,[ebp-24h]
  00000070: E8 00 00 00 00     call        00000075
  00000075: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?getline@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PADHD@Z
            00
  0000007C: 8D 4D DC           lea         ecx,[ebp-24h]
  0000007F: E8 00 00 00 00     call        00000084
  00000084: 0F B6 C0           movzx       eax,al
  00000087: 85 C0              test        eax,eax
  00000089: 0F 84 53 01 00 00  je          $LN11
  0000008F: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  00000093: 0F 8E 49 01 00 00  jle         $LN11
  00000099: 8D 4D 10           lea         ecx,[ebp+10h]
  0000009C: 51                 push        ecx
  0000009D: E8 00 00 00 00     call        000000A2
  000000A2: 83 C4 04           add         esp,4
  000000A5: 89 45 D4           mov         dword ptr [ebp-2Ch],eax
  000000A8: C6 45 FC 01        mov         byte ptr [ebp-4],1
  000000AC: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  000000AF: 8B 02              mov         eax,dword ptr [edx]
  000000B1: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000000B4: 03 48 04           add         ecx,dword ptr [eax+4]
  000000B7: E8 00 00 00 00     call        000000BC
  000000BC: 89 45 BC           mov         dword ptr [ebp-44h],eax
  000000BF: 8B 4D BC           mov         ecx,dword ptr [ebp-44h]
  000000C2: E8 00 00 00 00     call        000000C7
  000000C7: 89 45 B8           mov         dword ptr [ebp-48h],eax
  000000CA: 8B 4D B8           mov         ecx,dword ptr [ebp-48h]
  000000CD: 89 4D CC           mov         dword ptr [ebp-34h],ecx
  000000D0: EB 24              jmp         000000F6
  000000D2: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  000000D5: 8B 02              mov         eax,dword ptr [edx]
  000000D7: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000000DA: 03 48 04           add         ecx,dword ptr [eax+4]
  000000DD: E8 00 00 00 00     call        000000E2
  000000E2: 89 45 B4           mov         dword ptr [ebp-4Ch],eax
  000000E5: 8B 4D B4           mov         ecx,dword ptr [ebp-4Ch]
  000000E8: E8 00 00 00 00     call        000000ED
  000000ED: 89 45 B0           mov         dword ptr [ebp-50h],eax
  000000F0: 8B 4D B0           mov         ecx,dword ptr [ebp-50h]
  000000F3: 89 4D CC           mov         dword ptr [ebp-34h],ecx
  000000F6: E8 00 00 00 00     call        000000FB
  000000FB: 89 45 AC           mov         dword ptr [ebp-54h],eax
  000000FE: 8B 55 AC           mov         edx,dword ptr [ebp-54h]
  00000101: 89 55 C4           mov         dword ptr [ebp-3Ch],edx
  00000104: 8D 45 CC           lea         eax,[ebp-34h]
  00000107: 50                 push        eax
  00000108: 8D 4D C4           lea         ecx,[ebp-3Ch]
  0000010B: 51                 push        ecx
  0000010C: E8 00 00 00 00     call        00000111
  00000111: 83 C4 08           add         esp,8
  00000114: 88 45 AB           mov         byte ptr [ebp-55h],al
  00000117: 0F B6 55 AB        movzx       edx,byte ptr [ebp-55h]
  0000011B: 85 D2              test        edx,edx
  0000011D: 74 13              je          00000132
  0000011F: 8B 45 E8           mov         eax,dword ptr [ebp-18h]
  00000122: 83 C8 01           or          eax,1
  00000125: 89 45 E8           mov         dword ptr [ebp-18h],eax
  00000128: E9 8B 00 00 00     jmp         000001B8
  0000012D: E9 81 00 00 00     jmp         000001B3
  00000132: 8B 4D CC           mov         ecx,dword ptr [ebp-34h]
  00000135: 3B 4D D4           cmp         ecx,dword ptr [ebp-2Ch]
  00000138: 75 2E              jne         00000168
  0000013A: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  0000013D: 8B 42 04           mov         eax,dword ptr [edx+4]
  00000140: 83 C0 01           add         eax,1
  00000143: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000146: 89 41 04           mov         dword ptr [ecx+4],eax
  00000149: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  0000014C: 8B 02              mov         eax,dword ptr [edx]
  0000014E: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000151: 03 48 04           add         ecx,dword ptr [eax+4]
  00000154: E8 00 00 00 00     call        00000159
  00000159: 89 45 A4           mov         dword ptr [ebp-5Ch],eax
  0000015C: 8B 4D A4           mov         ecx,dword ptr [ebp-5Ch]
  0000015F: E8 00 00 00 00     call        00000164
  00000164: EB 52              jmp         000001B8
  00000166: EB 4B              jmp         000001B3
  00000168: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  0000016B: 83 E9 01           sub         ecx,1
  0000016E: 89 4D 0C           mov         dword ptr [ebp+0Ch],ecx
  00000171: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  00000175: 7F 0D              jg          00000184
  00000177: 8B 55 E8           mov         edx,dword ptr [ebp-18h]
  0000017A: 83 CA 02           or          edx,2
  0000017D: 89 55 E8           mov         dword ptr [ebp-18h],edx
  00000180: EB 36              jmp         000001B8
  00000182: EB 2F              jmp         000001B3
  00000184: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000187: 8B 48 04           mov         ecx,dword ptr [eax+4]
  0000018A: 83 C1 01           add         ecx,1
  0000018D: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  00000190: 89 4A 04           mov         dword ptr [edx+4],ecx
  00000193: 8D 45 CC           lea         eax,[ebp-34h]
  00000196: 50                 push        eax
  00000197: E8 00 00 00 00     call        0000019C
  0000019C: 83 C4 04           add         esp,4
  0000019F: 88 45 A3           mov         byte ptr [ebp-5Dh],al
  000001A2: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  000001A5: 8A 55 A3           mov         dl,byte ptr [ebp-5Dh]
  000001A8: 88 11              mov         byte ptr [ecx],dl
  000001AA: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000001AD: 83 C0 01           add         eax,1
  000001B0: 89 45 08           mov         dword ptr [ebp+8],eax
  000001B3: E9 1A FF FF FF     jmp         000000D2
  000001B8: EB 21              jmp         000001DB
__catch$?getline@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PADHD@Z$0:
  000001BA: 6A 01              push        1
  000001BC: 6A 04              push        4
  000001BE: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000001C1: 8B 11              mov         edx,dword ptr [ecx]
  000001C3: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000001C6: 03 4A 04           add         ecx,dword ptr [edx+4]
  000001C9: E8 00 00 00 00     call        000001CE
  000001CE: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?getline@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PADHD@Z
            00
  000001D5: B8 00 00 00 00     mov         eax,offset ?getline@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PADHD@Z
  000001DA: C3                 ret
  000001DB: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?getline@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PADHD@Z
            00
$LN11:
  000001E2: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000001E5: C6 00 00           mov         byte ptr [eax],0
  000001E8: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000001EB: 83 79 04 00        cmp         dword ptr [ecx+4],0
  000001EF: 75 0B              jne         000001FC
  000001F1: 8B 55 E8           mov         edx,dword ptr [ebp-18h]
  000001F4: 83 CA 02           or          edx,2
  000001F7: 89 55 9C           mov         dword ptr [ebp-64h],edx
  000001FA: EB 06              jmp         00000202
  000001FC: 8B 45 E8           mov         eax,dword ptr [ebp-18h]
  000001FF: 89 45 9C           mov         dword ptr [ebp-64h],eax
  00000202: 6A 00              push        0
  00000204: 8B 4D 9C           mov         ecx,dword ptr [ebp-64h]
  00000207: 51                 push        ecx
  00000208: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  0000020B: 8B 02              mov         eax,dword ptr [edx]
  0000020D: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000210: 03 48 04           add         ecx,dword ptr [eax+4]
  00000213: E8 00 00 00 00     call        00000218
  00000218: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  0000021B: 89 4D C0           mov         dword ptr [ebp-40h],ecx
  0000021E: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000225: 8D 4D DC           lea         ecx,[ebp-24h]
  00000228: E8 00 00 00 00     call        0000022D
  0000022D: 8B 45 C0           mov         eax,dword ptr [ebp-40h]
  00000230: 52                 push        edx
  00000231: 8B CD              mov         ecx,ebp
  00000233: 50                 push        eax
  00000234: 8D 15 00 00 00 00  lea         edx,[?getline@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PADHD@Z]
  0000023A: E8 00 00 00 00     call        0000023F
  0000023F: 58                 pop         eax
  00000240: 5A                 pop         edx
  00000241: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000244: 64 89 0D 00 00 00  mov         dword ptr fs:[?getline@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PADHD@Z],ecx
            00
  0000024B: 59                 pop         ecx
  0000024C: 5F                 pop         edi
  0000024D: 5E                 pop         esi
  0000024E: 5B                 pop         ebx
  0000024F: 83 C4 64           add         esp,64h
  00000252: 3B EC              cmp         ebp,esp
  00000254: E8 00 00 00 00     call        00000259
  00000259: 8B E5              mov         esp,ebp
  0000025B: 5D                 pop         ebp
  0000025C: C2 0C 00           ret         0Ch
  0000025F: 90                 nop
$LN26:
  00000260: 02 00              add         al,byte ptr [eax]
  00000262: 00 00              add         byte ptr [eax],al
  00000264: 00 00              add         byte ptr [eax],al
  00000266: 00 00              add         byte ptr [eax],al
$LN25:
  00000268: DC FF              fdiv        st(7),st
  0000026A: FF
  0000026B: FF 08              dec         dword ptr [eax]
  0000026D: 00 00              add         byte ptr [eax],al
  0000026F: 00 00              add         byte ptr [eax],al
  00000271: 00 00              add         byte ptr [eax],al
  00000273: 00 CC              add         ah,cl
  00000275: FF
  00000276: FF
  00000277: FF 04 00           inc         dword ptr [eax+eax]
  0000027A: 00 00              add         byte ptr [eax],al
  0000027C: 00 00              add         byte ptr [eax],al
  0000027E: 00 00              add         byte ptr [eax],al
$LN23:
  00000280: 5F                 pop         edi
  00000281: 4D                 dec         ebp
  00000282: 65 74 61           je          000002E6
  00000285: 00 5F 4F           add         byte ptr [edi+4Fh],bl
  00000288: 6B
  00000289: 00

__unwindfunclet$?getline@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PADHD@Z$2:
  00000000: 8D 4D DC           lea         ecx,[ebp-24h]
  00000003: E9 00 00 00 00     jmp         __ehhandler$?getline@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PADHD@Z
__ehhandler$?getline@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PADHD@Z:
  00000008: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000000F: 8B 4A 98           mov         ecx,dword ptr [edx-68h]
  00000012: 33 C8              xor         ecx,eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: B8 00 00 00 00     mov         eax,offset __unwindfunclet$?getline@?$basic_istream@DU?$char_traits@D@std@@@std@@QAEAAV12@PADHD@Z$2
  0000001E: E9 00 00 00 00     jmp         00000023

??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ (public: __thiscall std::basic_istream<char,struct std::char_traits<char> >::sentry::~sentry(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 83 C4 04           add         esp,4
  00000019: 3B EC              cmp         ebp,esp
  0000001B: E8 00 00 00 00     call        00000020
  00000020: 8B E5              mov         esp,ebp
  00000022: 5D                 pop         ebp
  00000023: C3                 ret

??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z (public: __thiscall std::basic_istream<char,struct std::char_traits<char> >::sentry::sentry(class std::basic_istream<char,struct std::char_traits<char> > &,bool)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z]
  00000010: 50                 push        eax
  00000011: 51                 push        ecx
  00000012: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000019: A1 00 00 00 00     mov         eax,[??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z]
  0000001E: 33 C5              xor         eax,ebp
  00000020: 50                 push        eax
  00000021: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000024: 64 A3 00 00 00 00  mov         fs:[??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z],eax
  0000002A: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  0000002D: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000030: 50                 push        eax
  00000031: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000034: E8 00 00 00 00     call        00000039
  00000039: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
            00
  00000040: 0F B6 4D 0C        movzx       ecx,byte ptr [ebp+0Ch]
  00000044: 51                 push        ecx
  00000045: 8B 55 F0           mov         edx,dword ptr [ebp-10h]
  00000048: 8B 0A              mov         ecx,dword ptr [edx]
  0000004A: E8 00 00 00 00     call        0000004F
  0000004F: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000052: 88 41 04           mov         byte ptr [ecx+4],al
  00000055: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  0000005C: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  0000005F: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000062: 64 89 0D 00 00 00  mov         dword ptr fs:[??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z],ecx
            00
  00000069: 59                 pop         ecx
  0000006A: 83 C4 10           add         esp,10h
  0000006D: 3B EC              cmp         ebp,esp
  0000006F: E8 00 00 00 00     call        00000074
  00000074: 8B E5              mov         esp,ebp
  00000076: 5D                 pop         ebp
  00000077: C2 08 00           ret         8

__unwindfunclet$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z$0:
  00000000: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000003: E9 00 00 00 00     jmp         __ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z
__ehhandler$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z:
  00000008: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000000F: 8B 4A F8           mov         ecx,dword ptr [edx-8]
  00000012: 33 C8              xor         ecx,eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??0sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@_N@Z$0
  0000001E: E9 00 00 00 00     jmp         00000023

??Bsentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QBE_NXZ (public: __thiscall std::basic_istream<char,struct std::char_traits<char> >::sentry::operator bool(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8A 40 04           mov         al,byte ptr [eax+4]
  00000014: 8B E5              mov         esp,ebp
  00000016: 5D                 pop         ebp
  00000017: C3                 ret

??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@XZ (public: __thiscall std::basic_istream<char,struct std::char_traits<char> >::_Sentry_base::~_Sentry_base(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 08              mov         ecx,dword ptr [eax]
  00000013: 8B 11              mov         edx,dword ptr [ecx]
  00000015: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000018: 8B 08              mov         ecx,dword ptr [eax]
  0000001A: 03 4A 04           add         ecx,dword ptr [edx+4]
  0000001D: E8 00 00 00 00     call        00000022
  00000022: 85 C0              test        eax,eax
  00000024: 74 1B              je          00000041
  00000026: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000029: 8B 11              mov         edx,dword ptr [ecx]
  0000002B: 8B 02              mov         eax,dword ptr [edx]
  0000002D: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000030: 8B 09              mov         ecx,dword ptr [ecx]
  00000032: 03 48 04           add         ecx,dword ptr [eax+4]
  00000035: E8 00 00 00 00     call        0000003A
  0000003A: 8B C8              mov         ecx,eax
  0000003C: E8 00 00 00 00     call        00000041
  00000041: 83 C4 04           add         esp,4
  00000044: 3B EC              cmp         ebp,esp
  00000046: E8 00 00 00 00     call        0000004B
  0000004B: 8B E5              mov         esp,ebp
  0000004D: 5D                 pop         ebp
  0000004E: C3                 ret

?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ (public: int __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::sgetc(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: 56                 push        esi
  00000007: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000E: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000015: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000018: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001B: E8 00 00 00 00     call        00000020
  00000020: 85 C0              test        eax,eax
  00000022: 7E 16              jle         0000003A
  00000024: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000027: E8 00 00 00 00     call        0000002C
  0000002C: 50                 push        eax
  0000002D: E8 00 00 00 00     call        00000032
  00000032: 83 C4 04           add         esp,4
  00000035: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000038: EB 19              jmp         00000053
  0000003A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000003D: 8B 10              mov         edx,dword ptr [eax]
  0000003F: 8B F4              mov         esi,esp
  00000041: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000044: 8B 42 10           mov         eax,dword ptr [edx+10h]
  00000047: FF D0              call        eax
  00000049: 3B F4              cmp         esi,esp
  0000004B: E8 00 00 00 00     call        00000050
  00000050: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000053: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  00000056: 5E                 pop         esi
  00000057: 83 C4 08           add         esp,8
  0000005A: 3B EC              cmp         ebp,esp
  0000005C: E8 00 00 00 00     call        00000061
  00000061: 8B E5              mov         esp,ebp
  00000063: 5D                 pop         ebp
  00000064: C3                 ret

?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ (public: int __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::snextc(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 14           sub         esp,14h
  00000006: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000B: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000000E: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000011: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000014: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000017: 89 45 FC           mov         dword ptr [ebp-4],eax
  0000001A: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000001D: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000020: E8 00 00 00 00     call        00000025
  00000025: 83 F8 01           cmp         eax,1
  00000028: 7E 16              jle         00000040
  0000002A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000002D: E8 00 00 00 00     call        00000032
  00000032: 50                 push        eax
  00000033: E8 00 00 00 00     call        00000038
  00000038: 83 C4 04           add         esp,4
  0000003B: 89 45 F0           mov         dword ptr [ebp-10h],eax
  0000003E: EB 45              jmp         00000085
  00000040: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000043: E8 00 00 00 00     call        00000048
  00000048: 89 45 F8           mov         dword ptr [ebp-8],eax
  0000004B: E8 00 00 00 00     call        00000050
  00000050: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000053: 8D 45 F8           lea         eax,[ebp-8]
  00000056: 50                 push        eax
  00000057: 8D 4D F4           lea         ecx,[ebp-0Ch]
  0000005A: 51                 push        ecx
  0000005B: E8 00 00 00 00     call        00000060
  00000060: 83 C4 08           add         esp,8
  00000063: 0F B6 D0           movzx       edx,al
  00000066: 85 D2              test        edx,edx
  00000068: 74 0A              je          00000074
  0000006A: E8 00 00 00 00     call        0000006F
  0000006F: 89 45 EC           mov         dword ptr [ebp-14h],eax
  00000072: EB 0B              jmp         0000007F
  00000074: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000077: E8 00 00 00 00     call        0000007C
  0000007C: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000007F: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000082: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000085: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000088: 83 C4 14           add         esp,14h
  0000008B: 3B EC              cmp         ebp,esp
  0000008D: E8 00 00 00 00     call        00000092
  00000092: 8B E5              mov         esp,ebp
  00000094: 5D                 pop         ebp
  00000095: C3                 ret

?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z (public: bool __thiscall std::basic_istream<char,struct std::char_traits<char> >::_Ipfx(bool)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z]
  00000010: 50                 push        eax
  00000011: 51                 push        ecx
  00000012: 83 EC 3C           sub         esp,3Ch
  00000015: 53                 push        ebx
  00000016: 56                 push        esi
  00000017: 57                 push        edi
  00000018: 51                 push        ecx
  00000019: 8D 7D B4           lea         edi,[ebp-4Ch]
  0000001C: B9 0F 00 00 00     mov         ecx,0Fh
  00000021: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000026: F3 AB              rep stos    dword ptr [edi]
  00000028: 59                 pop         ecx
  00000029: A1 00 00 00 00     mov         eax,[?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z]
  0000002E: 33 C5              xor         eax,ebp
  00000030: 50                 push        eax
  00000031: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000034: 64 A3 00 00 00 00  mov         fs:[?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z],eax
  0000003A: 89 65 F0           mov         dword ptr [ebp-10h],esp
  0000003D: 89 4D EC           mov         dword ptr [ebp-14h],ecx
  00000040: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000043: 8B 08              mov         ecx,dword ptr [eax]
  00000045: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  00000048: 03 51 04           add         edx,dword ptr [ecx+4]
  0000004B: 8B CA              mov         ecx,edx
  0000004D: E8 00 00 00 00     call        00000052
  00000052: 0F B6 C0           movzx       eax,al
  00000055: 85 C0              test        eax,eax
  00000057: 0F 84 A1 01 00 00  je          000001FE
  0000005D: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000060: 8B 11              mov         edx,dword ptr [ecx]
  00000062: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000065: 03 4A 04           add         ecx,dword ptr [edx+4]
  00000068: E8 00 00 00 00     call        0000006D
  0000006D: 85 C0              test        eax,eax
  0000006F: 74 19              je          0000008A
  00000071: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000074: 8B 08              mov         ecx,dword ptr [eax]
  00000076: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  00000079: 03 51 04           add         edx,dword ptr [ecx+4]
  0000007C: 8B CA              mov         ecx,edx
  0000007E: E8 00 00 00 00     call        00000083
  00000083: 8B C8              mov         ecx,eax
  00000085: E8 00 00 00 00     call        0000008A
  0000008A: 0F B6 45 08        movzx       eax,byte ptr [ebp+8]
  0000008E: 85 C0              test        eax,eax
  00000090: 0F 85 4B 01 00 00  jne         $LN9
  00000096: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000099: 8B 11              mov         edx,dword ptr [ecx]
  0000009B: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  0000009E: 03 4A 04           add         ecx,dword ptr [edx+4]
  000000A1: E8 00 00 00 00     call        000000A6
  000000A6: 83 E0 01           and         eax,1
  000000A9: 0F 84 32 01 00 00  je          $LN9
  000000AF: 8D 45 D8           lea         eax,[ebp-28h]
  000000B2: 50                 push        eax
  000000B3: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000000B6: 8B 11              mov         edx,dword ptr [ecx]
  000000B8: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000000BB: 03 4A 04           add         ecx,dword ptr [edx+4]
  000000BE: E8 00 00 00 00     call        000000C3
  000000C3: 89 45 D0           mov         dword ptr [ebp-30h],eax
  000000C6: 8B 45 D0           mov         eax,dword ptr [ebp-30h]
  000000C9: 89 45 CC           mov         dword ptr [ebp-34h],eax
  000000CC: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
            00
  000000D3: 8B 4D CC           mov         ecx,dword ptr [ebp-34h]
  000000D6: 51                 push        ecx
  000000D7: E8 00 00 00 00     call        000000DC
  000000DC: 83 C4 04           add         esp,4
  000000DF: 89 45 E8           mov         dword ptr [ebp-18h],eax
  000000E2: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000000E9: 8D 4D D8           lea         ecx,[ebp-28h]
  000000EC: E8 00 00 00 00     call        000000F1
  000000F1: C7 45 FC 01 00 00  mov         dword ptr [ebp-4],1
            00
  000000F8: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  000000FB: 8B 02              mov         eax,dword ptr [edx]
  000000FD: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000100: 03 48 04           add         ecx,dword ptr [eax+4]
  00000103: E8 00 00 00 00     call        00000108
  00000108: 89 45 C8           mov         dword ptr [ebp-38h],eax
  0000010B: 8B 4D C8           mov         ecx,dword ptr [ebp-38h]
  0000010E: E8 00 00 00 00     call        00000113
  00000113: 89 45 C4           mov         dword ptr [ebp-3Ch],eax
  00000116: 8B 4D C4           mov         ecx,dword ptr [ebp-3Ch]
  00000119: 89 4D E0           mov         dword ptr [ebp-20h],ecx
  0000011C: EB 24              jmp         00000142
  0000011E: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  00000121: 8B 02              mov         eax,dword ptr [edx]
  00000123: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000126: 03 48 04           add         ecx,dword ptr [eax+4]
  00000129: E8 00 00 00 00     call        0000012E
  0000012E: 89 45 C0           mov         dword ptr [ebp-40h],eax
  00000131: 8B 4D C0           mov         ecx,dword ptr [ebp-40h]
  00000134: E8 00 00 00 00     call        00000139
  00000139: 89 45 BC           mov         dword ptr [ebp-44h],eax
  0000013C: 8B 4D BC           mov         ecx,dword ptr [ebp-44h]
  0000013F: 89 4D E0           mov         dword ptr [ebp-20h],ecx
  00000142: E8 00 00 00 00     call        00000147
  00000147: 89 45 B8           mov         dword ptr [ebp-48h],eax
  0000014A: 8B 55 B8           mov         edx,dword ptr [ebp-48h]
  0000014D: 89 55 D4           mov         dword ptr [ebp-2Ch],edx
  00000150: 8D 45 E0           lea         eax,[ebp-20h]
  00000153: 50                 push        eax
  00000154: 8D 4D D4           lea         ecx,[ebp-2Ch]
  00000157: 51                 push        ecx
  00000158: E8 00 00 00 00     call        0000015D
  0000015D: 83 C4 08           add         esp,8
  00000160: 88 45 B7           mov         byte ptr [ebp-49h],al
  00000163: 0F B6 55 B7        movzx       edx,byte ptr [ebp-49h]
  00000167: 85 D2              test        edx,edx
  00000169: 74 1A              je          00000185
  0000016B: 6A 00              push        0
  0000016D: 6A 01              push        1
  0000016F: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000172: 8B 08              mov         ecx,dword ptr [eax]
  00000174: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  00000177: 03 51 04           add         edx,dword ptr [ecx+4]
  0000017A: 8B CA              mov         ecx,edx
  0000017C: E8 00 00 00 00     call        00000181
  00000181: EB 32              jmp         000001B5
  00000183: EB 2B              jmp         000001B0
  00000185: 8D 45 E0           lea         eax,[ebp-20h]
  00000188: 50                 push        eax
  00000189: E8 00 00 00 00     call        0000018E
  0000018E: 83 C4 04           add         esp,4
  00000191: 88 45 B6           mov         byte ptr [ebp-4Ah],al
  00000194: 0F B6 4D B6        movzx       ecx,byte ptr [ebp-4Ah]
  00000198: 51                 push        ecx
  00000199: 6A 48              push        48h
  0000019B: 8B 4D E8           mov         ecx,dword ptr [ebp-18h]
  0000019E: E8 00 00 00 00     call        000001A3
  000001A3: 88 45 B5           mov         byte ptr [ebp-4Bh],al
  000001A6: 0F B6 55 B5        movzx       edx,byte ptr [ebp-4Bh]
  000001AA: 85 D2              test        edx,edx
  000001AC: 75 02              jne         000001B0
  000001AE: EB 05              jmp         000001B5
  000001B0: E9 69 FF FF FF     jmp         0000011E
  000001B5: EB 23              jmp         000001DA
__catch$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z$0:
  000001B7: 6A 01              push        1
  000001B9: 6A 04              push        4
  000001BB: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  000001BE: 8B 08              mov         ecx,dword ptr [eax]
  000001C0: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  000001C3: 03 51 04           add         edx,dword ptr [ecx+4]
  000001C6: 8B CA              mov         ecx,edx
  000001C8: E8 00 00 00 00     call        000001CD
  000001CD: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000001D4: B8 00 00 00 00     mov         eax,offset ?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
  000001D9: C3                 ret
  000001DA: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
$LN9:
  000001E1: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  000001E4: 8B 08              mov         ecx,dword ptr [eax]
  000001E6: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  000001E9: 03 51 04           add         edx,dword ptr [ecx+4]
  000001EC: 8B CA              mov         ecx,edx
  000001EE: E8 00 00 00 00     call        000001F3
  000001F3: 0F B6 C0           movzx       eax,al
  000001F6: 85 C0              test        eax,eax
  000001F8: 74 04              je          000001FE
  000001FA: B0 01              mov         al,1
  000001FC: EB 16              jmp         00000214
  000001FE: 6A 00              push        0
  00000200: 6A 02              push        2
  00000202: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000205: 8B 11              mov         edx,dword ptr [ecx]
  00000207: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  0000020A: 03 4A 04           add         ecx,dword ptr [edx+4]
  0000020D: E8 00 00 00 00     call        00000212
  00000212: 32 C0              xor         al,al
  00000214: 52                 push        edx
  00000215: 8B CD              mov         ecx,ebp
  00000217: 50                 push        eax
  00000218: 8D 15 00 00 00 00  lea         edx,[?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z]
  0000021E: E8 00 00 00 00     call        00000223
  00000223: 58                 pop         eax
  00000224: 5A                 pop         edx
  00000225: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000228: 64 89 0D 00 00 00  mov         dword ptr fs:[?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z],ecx
            00
  0000022F: 59                 pop         ecx
  00000230: 5F                 pop         edi
  00000231: 5E                 pop         esi
  00000232: 5B                 pop         ebx
  00000233: 83 C4 4C           add         esp,4Ch
  00000236: 3B EC              cmp         ebp,esp
  00000238: E8 00 00 00 00     call        0000023D
  0000023D: 8B E5              mov         esp,ebp
  0000023F: 5D                 pop         ebp
  00000240: C2 04 00           ret         4
  00000243: 90                 nop
$LN23:
  00000244: 01 00              add         dword ptr [eax],eax
  00000246: 00 00              add         byte ptr [eax],al
  00000248: 00 00              add         byte ptr [eax],al
  0000024A: 00 00              add         byte ptr [eax],al
$LN22:
  0000024C: E0 FF              loopne      0000024D
  0000024E: FF
  0000024F: FF 04 00           inc         dword ptr [eax+eax]
  00000252: 00 00              add         byte ptr [eax],al
  00000254: 00 00              add         byte ptr [eax],al
  00000256: 00 00              add         byte ptr [eax],al
$LN20:
  00000258: 5F                 pop         edi
  00000259: 4D                 dec         ebp
  0000025A: 65 74 61           je          000002BE
  0000025D: 00

__unwindfunclet$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z$2:
  00000000: 8D 4D D8           lea         ecx,[ebp-28h]
  00000003: E9 00 00 00 00     jmp         __ehhandler$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z
__ehhandler$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z:
  00000008: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000000F: 8B 4A B0           mov         ecx,dword ptr [edx-50h]
  00000012: 33 C8              xor         ecx,eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: B8 00 00 00 00     mov         eax,offset __unwindfunclet$?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE_N_N@Z$2
  0000001E: E9 00 00 00 00     jmp         00000023

?is@?$ctype@D@std@@QBE_NFD@Z (public: bool __thiscall std::ctype<char>::is(short,char)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 0F B6 45 0C        movzx       eax,byte ptr [ebp+0Ch]
  00000012: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000015: 8B 51 10           mov         edx,dword ptr [ecx+10h]
  00000018: 0F BF 04 42        movsx       eax,word ptr [edx+eax*2]
  0000001C: 0F BF 4D 08        movsx       ecx,word ptr [ebp+8]
  00000020: 23 C1              and         eax,ecx
  00000022: F7 D8              neg         eax
  00000024: 1B C0              sbb         eax,eax
  00000026: F7 D8              neg         eax
  00000028: 8B E5              mov         esp,ebp
  0000002A: 5D                 pop         ebp
  0000002B: C2 08 00           ret         8

?good@ios_base@std@@QBE_NXZ (public: bool __thiscall std::ios_base::good(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: F7 D8              neg         eax
  00000018: 1B C0              sbb         eax,eax
  0000001A: 83 C0 01           add         eax,1
  0000001D: 83 C4 04           add         esp,4
  00000020: 3B EC              cmp         ebp,esp
  00000022: E8 00 00 00 00     call        00000027
  00000027: 8B E5              mov         esp,ebp
  00000029: 5D                 pop         ebp
  0000002A: C3                 ret

?flags@ios_base@std@@QBEHXZ (public: int __thiscall std::ios_base::flags(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 40 10           mov         eax,dword ptr [eax+10h]
  00000014: 8B E5              mov         esp,ebp
  00000016: 5D                 pop         ebp
  00000017: C3                 ret

?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ (public: class std::basic_ostream<char,struct std::char_traits<char> > & __thiscall std::basic_ostream<char,struct std::char_traits<char> >::flush(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000014: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000017: C7 45 F8 00 00 00  mov         dword ptr [ebp-8],offset ?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEAAV12@XZ
            00
  0000001E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000021: 8B 08              mov         ecx,dword ptr [eax]
  00000023: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000026: 03 51 04           add         edx,dword ptr [ecx+4]
  00000029: 8B CA              mov         ecx,edx
  0000002B: E8 00 00 00 00     call        00000030
  00000030: 0F B6 C0           movzx       eax,al
  00000033: 85 C0              test        eax,eax
  00000035: 75 25              jne         0000005C
  00000037: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000003A: 8B 11              mov         edx,dword ptr [ecx]
  0000003C: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000003F: 03 4A 04           add         ecx,dword ptr [edx+4]
  00000042: E8 00 00 00 00     call        00000047
  00000047: 8B C8              mov         ecx,eax
  00000049: E8 00 00 00 00     call        0000004E
  0000004E: 83 F8 FF           cmp         eax,0FFh
  00000051: 75 09              jne         0000005C
  00000053: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  00000056: 83 C8 04           or          eax,4
  00000059: 89 45 F8           mov         dword ptr [ebp-8],eax
  0000005C: 6A 00              push        0
  0000005E: 8B 4D F8           mov         ecx,dword ptr [ebp-8]
  00000061: 51                 push        ecx
  00000062: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000065: 8B 02              mov         eax,dword ptr [edx]
  00000067: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000006A: 03 48 04           add         ecx,dword ptr [eax+4]
  0000006D: E8 00 00 00 00     call        00000072
  00000072: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000075: 83 C4 08           add         esp,8
  00000078: 3B EC              cmp         ebp,esp
  0000007A: E8 00 00 00 00     call        0000007F
  0000007F: 8B E5              mov         esp,ebp
  00000081: 5D                 pop         ebp
  00000082: C3                 ret

??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z (public: __thiscall std::basic_istream<char,struct std::char_traits<char> >::_Sentry_base::_Sentry_base(class std::basic_istream<char,struct std::char_traits<char> > &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000014: 89 08              mov         dword ptr [eax],ecx
  00000016: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000019: 8B 02              mov         eax,dword ptr [edx]
  0000001B: 8B 08              mov         ecx,dword ptr [eax]
  0000001D: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000020: 8B 02              mov         eax,dword ptr [edx]
  00000022: 03 41 04           add         eax,dword ptr [ecx+4]
  00000025: 8B C8              mov         ecx,eax
  00000027: E8 00 00 00 00     call        0000002C
  0000002C: 85 C0              test        eax,eax
  0000002E: 74 1B              je          0000004B
  00000030: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000033: 8B 11              mov         edx,dword ptr [ecx]
  00000035: 8B 02              mov         eax,dword ptr [edx]
  00000037: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000003A: 8B 09              mov         ecx,dword ptr [ecx]
  0000003C: 03 48 04           add         ecx,dword ptr [eax+4]
  0000003F: E8 00 00 00 00     call        00000044
  00000044: 8B C8              mov         ecx,eax
  00000046: E8 00 00 00 00     call        0000004B
  0000004B: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000004E: 83 C4 04           add         esp,4
  00000051: 3B EC              cmp         ebp,esp
  00000053: E8 00 00 00 00     call        00000058
  00000058: 8B E5              mov         esp,ebp
  0000005A: 5D                 pop         ebp
  0000005B: C2 04 00           ret         4

?pubseekoff@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAE?AV?$fpos@H@2@JHH@Z (public: class std::fpos<int> __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::pubseekoff(long,int,int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: 56                 push        esi
  00000005: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000C: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000F: 8B F4              mov         esi,esp
  00000011: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  00000014: 50                 push        eax
  00000015: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  00000018: 51                 push        ecx
  00000019: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  0000001C: 52                 push        edx
  0000001D: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000020: 50                 push        eax
  00000021: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000024: 8B 11              mov         edx,dword ptr [ecx]
  00000026: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000029: 8B 42 24           mov         eax,dword ptr [edx+24h]
  0000002C: FF D0              call        eax
  0000002E: 3B F4              cmp         esi,esp
  00000030: E8 00 00 00 00     call        00000035
  00000035: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000038: 5E                 pop         esi
  00000039: 83 C4 04           add         esp,4
  0000003C: 3B EC              cmp         ebp,esp
  0000003E: E8 00 00 00 00     call        00000043
  00000043: 8B E5              mov         esp,ebp
  00000045: 5D                 pop         ebp
  00000046: C2 10 00           ret         10h

?pubsync@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ (public: int __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::pubsync(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: 56                 push        esi
  00000005: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000C: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000F: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000012: 8B 10              mov         edx,dword ptr [eax]
  00000014: 8B F4              mov         esi,esp
  00000016: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000019: 8B 42 30           mov         eax,dword ptr [edx+30h]
  0000001C: FF D0              call        eax
  0000001E: 3B F4              cmp         esi,esp
  00000020: E8 00 00 00 00     call        00000025
  00000025: 5E                 pop         esi
  00000026: 83 C4 04           add         esp,4
  00000029: 3B EC              cmp         ebp,esp
  0000002B: E8 00 00 00 00     call        00000030
  00000030: 8B E5              mov         esp,ebp
  00000032: 5D                 pop         ebp
  00000033: C3                 ret

?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHXZ (public: int __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::sbumpc(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: 56                 push        esi
  00000007: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000E: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000015: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000018: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001B: E8 00 00 00 00     call        00000020
  00000020: 85 C0              test        eax,eax
  00000022: 7E 16              jle         0000003A
  00000024: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000027: E8 00 00 00 00     call        0000002C
  0000002C: 50                 push        eax
  0000002D: E8 00 00 00 00     call        00000032
  00000032: 83 C4 04           add         esp,4
  00000035: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000038: EB 19              jmp         00000053
  0000003A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000003D: 8B 10              mov         edx,dword ptr [eax]
  0000003F: 8B F4              mov         esi,esp
  00000041: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000044: 8B 42 14           mov         eax,dword ptr [edx+14h]
  00000047: FF D0              call        eax
  00000049: 3B F4              cmp         esi,esp
  0000004B: E8 00 00 00 00     call        00000050
  00000050: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000053: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  00000056: 5E                 pop         esi
  00000057: 83 C4 08           add         esp,8
  0000005A: 3B EC              cmp         ebp,esp
  0000005C: E8 00 00 00 00     call        00000061
  00000061: 8B E5              mov         esp,ebp
  00000063: 5D                 pop         ebp
  00000064: C3                 ret

?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEHPBDH@Z (public: int __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::sputn(char const *,int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: 56                 push        esi
  00000005: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000C: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000F: 8B F4              mov         esi,esp
  00000011: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000014: 50                 push        eax
  00000015: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000018: 51                 push        ecx
  00000019: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000001C: 8B 02              mov         eax,dword ptr [edx]
  0000001E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000021: 8B 50 20           mov         edx,dword ptr [eax+20h]
  00000024: FF D2              call        edx
  00000026: 3B F4              cmp         esi,esp
  00000028: E8 00 00 00 00     call        0000002D
  0000002D: 5E                 pop         esi
  0000002E: 83 C4 04           add         esp,4
  00000031: 3B EC              cmp         ebp,esp
  00000033: E8 00 00 00 00     call        00000038
  00000038: 8B E5              mov         esp,ebp
  0000003A: 5D                 pop         ebp
  0000003B: C2 08 00           ret         8

?_Unlock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ (public: void __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::_Unlock(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: 83 C1 04           add         ecx,4
  00000014: E8 00 00 00 00     call        00000019
  00000019: 83 C4 04           add         esp,4
  0000001C: 3B EC              cmp         ebp,esp
  0000001E: E8 00 00 00 00     call        00000023
  00000023: 8B E5              mov         esp,ebp
  00000025: 5D                 pop         ebp
  00000026: C3                 ret

?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ (protected: char * __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::eback(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 48 10           mov         ecx,dword ptr [eax+10h]
  00000014: 8B 01              mov         eax,dword ptr [ecx]
  00000016: 8B E5              mov         esp,ebp
  00000018: 5D                 pop         ebp
  00000019: C3                 ret

?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ (protected: char * __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::gptr(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 48 20           mov         ecx,dword ptr [eax+20h]
  00000014: 8B 01              mov         eax,dword ptr [ecx]
  00000016: 8B E5              mov         esp,ebp
  00000018: 5D                 pop         ebp
  00000019: C3                 ret

?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ (protected: char * __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::pptr(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 48 24           mov         ecx,dword ptr [eax+24h]
  00000014: 8B 01              mov         eax,dword ptr [ecx]
  00000016: 8B E5              mov         esp,ebp
  00000018: 5D                 pop         ebp
  00000019: C3                 ret

?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ (protected: char * __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::egptr(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 48 20           mov         ecx,dword ptr [eax+20h]
  00000014: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000017: 8B 42 30           mov         eax,dword ptr [edx+30h]
  0000001A: 8B 09              mov         ecx,dword ptr [ecx]
  0000001C: 03 08              add         ecx,dword ptr [eax]
  0000001E: 8B C1              mov         eax,ecx
  00000020: 8B E5              mov         esp,ebp
  00000022: 5D                 pop         ebp
  00000023: C3                 ret

?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z (protected: void __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::gbump(int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 48 30           mov         ecx,dword ptr [eax+30h]
  00000014: 8B 11              mov         edx,dword ptr [ecx]
  00000016: 2B 55 08           sub         edx,dword ptr [ebp+8]
  00000019: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001C: 8B 48 30           mov         ecx,dword ptr [eax+30h]
  0000001F: 89 11              mov         dword ptr [ecx],edx
  00000021: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000024: 8B 42 20           mov         eax,dword ptr [edx+20h]
  00000027: 8B 08              mov         ecx,dword ptr [eax]
  00000029: 03 4D 08           add         ecx,dword ptr [ebp+8]
  0000002C: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000002F: 8B 42 20           mov         eax,dword ptr [edx+20h]
  00000032: 89 08              mov         dword ptr [eax],ecx
  00000034: 8B E5              mov         esp,ebp
  00000036: 5D                 pop         ebp
  00000037: C2 04 00           ret         4

?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD00@Z (protected: void __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::setg(char *,char *,char *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 48 10           mov         ecx,dword ptr [eax+10h]
  00000014: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000017: 89 11              mov         dword ptr [ecx],edx
  00000019: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001C: 8B 48 20           mov         ecx,dword ptr [eax+20h]
  0000001F: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  00000022: 89 11              mov         dword ptr [ecx],edx
  00000024: 8B 45 10           mov         eax,dword ptr [ebp+10h]
  00000027: 2B 45 0C           sub         eax,dword ptr [ebp+0Ch]
  0000002A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000002D: 8B 51 30           mov         edx,dword ptr [ecx+30h]
  00000030: 89 02              mov         dword ptr [edx],eax
  00000032: 8B E5              mov         esp,ebp
  00000034: 5D                 pop         ebp
  00000035: C2 0C 00           ret         0Ch

?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEPADXZ (protected: char * __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::epptr(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 48 24           mov         ecx,dword ptr [eax+24h]
  00000014: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000017: 8B 42 34           mov         eax,dword ptr [edx+34h]
  0000001A: 8B 09              mov         ecx,dword ptr [ecx]
  0000001C: 03 08              add         ecx,dword ptr [eax]
  0000001E: 8B C1              mov         eax,ecx
  00000020: 8B E5              mov         esp,ebp
  00000022: 5D                 pop         ebp
  00000023: C3                 ret

?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ (protected: char * __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::_Gndec(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 48 30           mov         ecx,dword ptr [eax+30h]
  00000014: 8B 11              mov         edx,dword ptr [ecx]
  00000016: 83 C2 01           add         edx,1
  00000019: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001C: 8B 48 30           mov         ecx,dword ptr [eax+30h]
  0000001F: 89 11              mov         dword ptr [ecx],edx
  00000021: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000024: 8B 42 20           mov         eax,dword ptr [edx+20h]
  00000027: 8B 08              mov         ecx,dword ptr [eax]
  00000029: 83 E9 01           sub         ecx,1
  0000002C: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000002F: 8B 42 20           mov         eax,dword ptr [edx+20h]
  00000032: 89 08              mov         dword ptr [eax],ecx
  00000034: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000037: 8B 51 20           mov         edx,dword ptr [ecx+20h]
  0000003A: 8B 02              mov         eax,dword ptr [edx]
  0000003C: 8B E5              mov         esp,ebp
  0000003E: 5D                 pop         ebp
  0000003F: C3                 ret

?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ (protected: char * __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::_Gninc(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000014: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000017: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001A: 8B 48 30           mov         ecx,dword ptr [eax+30h]
  0000001D: 8B 11              mov         edx,dword ptr [ecx]
  0000001F: 83 EA 01           sub         edx,1
  00000022: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000025: 8B 48 30           mov         ecx,dword ptr [eax+30h]
  00000028: 89 11              mov         dword ptr [ecx],edx
  0000002A: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000002D: 8B 42 20           mov         eax,dword ptr [edx+20h]
  00000030: 8B 08              mov         ecx,dword ptr [eax]
  00000032: 89 4D F8           mov         dword ptr [ebp-8],ecx
  00000035: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000038: 8B 42 20           mov         eax,dword ptr [edx+20h]
  0000003B: 8B 08              mov         ecx,dword ptr [eax]
  0000003D: 83 C1 01           add         ecx,1
  00000040: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000043: 8B 42 20           mov         eax,dword ptr [edx+20h]
  00000046: 89 08              mov         dword ptr [eax],ecx
  00000048: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  0000004B: 8B E5              mov         esp,ebp
  0000004D: 5D                 pop         ebp
  0000004E: C3                 ret

?_Gnpreinc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ (protected: char * __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::_Gnpreinc(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 48 30           mov         ecx,dword ptr [eax+30h]
  00000014: 8B 11              mov         edx,dword ptr [ecx]
  00000016: 83 EA 01           sub         edx,1
  00000019: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001C: 8B 48 30           mov         ecx,dword ptr [eax+30h]
  0000001F: 89 11              mov         dword ptr [ecx],edx
  00000021: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000024: 8B 42 20           mov         eax,dword ptr [edx+20h]
  00000027: 8B 08              mov         ecx,dword ptr [eax]
  00000029: 83 C1 01           add         ecx,1
  0000002C: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000002F: 8B 42 20           mov         eax,dword ptr [edx+20h]
  00000032: 89 08              mov         dword ptr [eax],ecx
  00000034: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000037: 8B 51 20           mov         edx,dword ptr [ecx+20h]
  0000003A: 8B 02              mov         eax,dword ptr [edx]
  0000003C: 8B E5              mov         esp,ebp
  0000003E: 5D                 pop         ebp
  0000003F: C3                 ret

?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ (protected: int __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::_Gnavail(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000014: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000017: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001A: 8B 48 20           mov         ecx,dword ptr [eax+20h]
  0000001D: 83 39 00           cmp         dword ptr [ecx],0
  00000020: 74 0D              je          0000002F
  00000022: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000025: 8B 42 30           mov         eax,dword ptr [edx+30h]
  00000028: 8B 08              mov         ecx,dword ptr [eax]
  0000002A: 89 4D F8           mov         dword ptr [ebp-8],ecx
  0000002D: EB 07              jmp         00000036
  0000002F: C7 45 F8 00 00 00  mov         dword ptr [ebp-8],offset ?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ
            00
  00000036: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  00000039: 8B E5              mov         esp,ebp
  0000003B: 5D                 pop         ebp
  0000003C: C3                 ret

?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXH@Z (protected: void __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::pbump(int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 48 34           mov         ecx,dword ptr [eax+34h]
  00000014: 8B 11              mov         edx,dword ptr [ecx]
  00000016: 2B 55 08           sub         edx,dword ptr [ebp+8]
  00000019: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001C: 8B 48 34           mov         ecx,dword ptr [eax+34h]
  0000001F: 89 11              mov         dword ptr [ecx],edx
  00000021: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000024: 8B 42 24           mov         eax,dword ptr [edx+24h]
  00000027: 8B 08              mov         ecx,dword ptr [eax]
  00000029: 03 4D 08           add         ecx,dword ptr [ebp+8]
  0000002C: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000002F: 8B 42 24           mov         eax,dword ptr [edx+24h]
  00000032: 89 08              mov         dword ptr [eax],ecx
  00000034: 8B E5              mov         esp,ebp
  00000036: 5D                 pop         ebp
  00000037: C2 04 00           ret         4

?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEPADXZ (protected: char * __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::_Pninc(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000014: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000017: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001A: 8B 48 34           mov         ecx,dword ptr [eax+34h]
  0000001D: 8B 11              mov         edx,dword ptr [ecx]
  0000001F: 83 EA 01           sub         edx,1
  00000022: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000025: 8B 48 34           mov         ecx,dword ptr [eax+34h]
  00000028: 89 11              mov         dword ptr [ecx],edx
  0000002A: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000002D: 8B 42 24           mov         eax,dword ptr [edx+24h]
  00000030: 8B 08              mov         ecx,dword ptr [eax]
  00000032: 89 4D F8           mov         dword ptr [ebp-8],ecx
  00000035: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000038: 8B 42 24           mov         eax,dword ptr [edx+24h]
  0000003B: 8B 08              mov         ecx,dword ptr [eax]
  0000003D: 83 C1 01           add         ecx,1
  00000040: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000043: 8B 42 24           mov         eax,dword ptr [edx+24h]
  00000046: 89 08              mov         dword ptr [eax],ecx
  00000048: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  0000004B: 8B E5              mov         esp,ebp
  0000004D: 5D                 pop         ebp
  0000004E: C3                 ret

?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ (protected: int __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::_Pnavail(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000014: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000017: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001A: 8B 48 24           mov         ecx,dword ptr [eax+24h]
  0000001D: 83 39 00           cmp         dword ptr [ecx],0
  00000020: 74 0D              je          0000002F
  00000022: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000025: 8B 42 34           mov         eax,dword ptr [edx+34h]
  00000028: 8B 08              mov         ecx,dword ptr [eax]
  0000002A: 89 4D F8           mov         dword ptr [ebp-8],ecx
  0000002D: EB 07              jmp         00000036
  0000002F: C7 45 F8 00 00 00  mov         dword ptr [ebp-8],offset ?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IBEHXZ
            00
  00000036: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  00000039: 8B E5              mov         esp,ebp
  0000003B: 5D                 pop         ebp
  0000003C: C3                 ret

??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z (public: __thiscall std::basic_filebuf<char,struct std::char_traits<char> >::basic_filebuf<char,struct std::char_traits<char> >(struct _iobuf *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z]
  00000010: 50                 push        eax
  00000011: 51                 push        ecx
  00000012: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000019: A1 00 00 00 00     mov         eax,[??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z]
  0000001E: 33 C5              xor         eax,ebp
  00000020: 50                 push        eax
  00000021: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000024: 64 A3 00 00 00 00  mov         fs:[??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z],eax
  0000002A: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  0000002D: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000030: E8 00 00 00 00     call        00000035
  00000035: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
            00
  0000003C: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  0000003F: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
  00000045: 6A 00              push        0
  00000047: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000004A: 51                 push        ecx
  0000004B: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000004E: E8 00 00 00 00     call        00000053
  00000053: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  0000005A: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  0000005D: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000060: 64 89 0D 00 00 00  mov         dword ptr fs:[??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z],ecx
            00
  00000067: 59                 pop         ecx
  00000068: 83 C4 10           add         esp,10h
  0000006B: 3B EC              cmp         ebp,esp
  0000006D: E8 00 00 00 00     call        00000072
  00000072: 8B E5              mov         esp,ebp
  00000074: 5D                 pop         ebp
  00000075: C2 04 00           ret         4

__unwindfunclet$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z$0:
  00000000: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000003: E9 00 00 00 00     jmp         __ehhandler$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z
__ehhandler$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z:
  00000008: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000000F: 8B 4A F8           mov         ecx,dword ptr [edx-8]
  00000012: 33 C8              xor         ecx,eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??0?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAE@PAU_iobuf@@@Z$0
  0000001E: E9 00 00 00 00     jmp         00000023

?is_open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QBE_NXZ (public: bool __thiscall std::basic_filebuf<char,struct std::char_traits<char> >::is_open(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 33 C9              xor         ecx,ecx
  00000013: 83 78 4C 00        cmp         dword ptr [eax+4Ch],0
  00000017: 0F 95 C1           setne       cl
  0000001A: 8A C1              mov         al,cl
  0000001C: 8B E5              mov         esp,ebp
  0000001E: 5D                 pop         ebp
  0000001F: C3                 ret

?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z (public: class std::basic_filebuf<char,struct std::char_traits<char> > * __thiscall std::basic_filebuf<char,struct std::char_traits<char> >::open(char const *,int,int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z]
  00000010: 50                 push        eax
  00000011: 83 EC 14           sub         esp,14h
  00000014: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000019: 89 45 E0           mov         dword ptr [ebp-20h],eax
  0000001C: 89 45 E4           mov         dword ptr [ebp-1Ch],eax
  0000001F: 89 45 E8           mov         dword ptr [ebp-18h],eax
  00000022: 89 45 EC           mov         dword ptr [ebp-14h],eax
  00000025: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000028: A1 00 00 00 00     mov         eax,[?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z]
  0000002D: 33 C5              xor         eax,ebp
  0000002F: 50                 push        eax
  00000030: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000033: 64 A3 00 00 00 00  mov         fs:[?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z],eax
  00000039: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  0000003C: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  0000003F: 83 78 4C 00        cmp         dword ptr [eax+4Ch],0
  00000043: 75 1D              jne         00000062
  00000045: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  00000048: 51                 push        ecx
  00000049: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  0000004C: 52                 push        edx
  0000004D: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000050: 50                 push        eax
  00000051: E8 00 00 00 00     call        00000056
  00000056: 83 C4 0C           add         esp,0Ch
  00000059: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000005C: 83 7D EC 00        cmp         dword ptr [ebp-14h],0
  00000060: 75 04              jne         00000066
  00000062: 33 C0              xor         eax,eax
  00000064: EB 51              jmp         000000B7
  00000066: 6A 01              push        1
  00000068: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  0000006B: 51                 push        ecx
  0000006C: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000006F: E8 00 00 00 00     call        00000074
  00000074: 8D 55 E8           lea         edx,[ebp-18h]
  00000077: 52                 push        edx
  00000078: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000007B: E8 00 00 00 00     call        00000080
  00000080: 89 45 E4           mov         dword ptr [ebp-1Ch],eax
  00000083: 8B 45 E4           mov         eax,dword ptr [ebp-1Ch]
  00000086: 89 45 E0           mov         dword ptr [ebp-20h],eax
  00000089: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
            00
  00000090: 8B 4D E0           mov         ecx,dword ptr [ebp-20h]
  00000093: 51                 push        ecx
  00000094: E8 00 00 00 00     call        00000099
  00000099: 83 C4 04           add         esp,4
  0000009C: 50                 push        eax
  0000009D: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  000000A0: E8 00 00 00 00     call        000000A5
  000000A5: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000000AC: 8D 4D E8           lea         ecx,[ebp-18h]
  000000AF: E8 00 00 00 00     call        000000B4
  000000B4: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  000000B7: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  000000BA: 64 89 0D 00 00 00  mov         dword ptr fs:[?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z],ecx
            00
  000000C1: 59                 pop         ecx
  000000C2: 83 C4 20           add         esp,20h
  000000C5: 3B EC              cmp         ebp,esp
  000000C7: E8 00 00 00 00     call        000000CC
  000000CC: 8B E5              mov         esp,ebp
  000000CE: 5D                 pop         ebp
  000000CF: C2 0C 00           ret         0Ch

__unwindfunclet$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z$0:
  00000000: 8D 4D E8           lea         ecx,[ebp-18h]
  00000003: E9 00 00 00 00     jmp         __ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z
__ehhandler$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z:
  00000008: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000000F: 8B 4A E8           mov         ecx,dword ptr [edx-18h]
  00000012: 33 C8              xor         ecx,eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: B8 00 00 00 00     mov         eax,offset __unwindfunclet$?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@PBDHH@Z$0
  0000001E: E9 00 00 00 00     jmp         00000023

?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ (public: class std::basic_filebuf<char,struct std::char_traits<char> > * __thiscall std::basic_filebuf<char,struct std::char_traits<char> >::close(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000014: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000017: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001A: 89 45 F8           mov         dword ptr [ebp-8],eax
  0000001D: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000020: 83 79 4C 00        cmp         dword ptr [ecx+4Ch],0
  00000024: 75 09              jne         0000002F
  00000026: C7 45 F8 00 00 00  mov         dword ptr [ebp-8],offset ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ
            00
  0000002D: EB 30              jmp         0000005F
  0000002F: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000032: E8 00 00 00 00     call        00000037
  00000037: 0F B6 D0           movzx       edx,al
  0000003A: 85 D2              test        edx,edx
  0000003C: 75 07              jne         00000045
  0000003E: C7 45 F8 00 00 00  mov         dword ptr [ebp-8],offset ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ
            00
  00000045: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000048: 8B 48 4C           mov         ecx,dword ptr [eax+4Ch]
  0000004B: 51                 push        ecx
  0000004C: E8 00 00 00 00     call        00000051
  00000051: 83 C4 04           add         esp,4
  00000054: 85 C0              test        eax,eax
  00000056: 74 07              je          0000005F
  00000058: C7 45 F8 00 00 00  mov         dword ptr [ebp-8],offset ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QAEPAV12@XZ
            00
  0000005F: 6A 02              push        2
  00000061: 6A 00              push        0
  00000063: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000066: E8 00 00 00 00     call        0000006B
  0000006B: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  0000006E: 83 C4 08           add         esp,8
  00000071: 3B EC              cmp         ebp,esp
  00000073: E8 00 00 00 00     call        00000078
  00000078: 8B E5              mov         esp,ebp
  0000007A: 5D                 pop         ebp
  0000007B: C3                 ret

?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z (protected: void __thiscall std::basic_filebuf<char,struct std::char_traits<char> >::_Init(struct _iobuf *,enum std::basic_filebuf<char,struct std::char_traits<char> >::_Initfl)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 14           sub         esp,14h
  00000006: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000B: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000000E: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000011: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000014: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000017: 89 45 FC           mov         dword ptr [ebp-4],eax
  0000001A: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000001D: 33 C0              xor         eax,eax
  0000001F: 83 7D 0C 01        cmp         dword ptr [ebp+0Ch],1
  00000023: 0F 94 C0           sete        al
  00000026: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000029: 88 41 48           mov         byte ptr [ecx+48h],al
  0000002C: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000002F: C6 42 41 00        mov         byte ptr [edx+41h],0
  00000033: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000036: E8 00 00 00 00     call        0000003B
  0000003B: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  0000003F: 74 4A              je          0000008B
  00000041: B8 01 00 00 00     mov         eax,1
  00000046: 85 C0              test        eax,eax
  00000048: 74 41              je          0000008B
  0000004A: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000004D: 83 C1 08           add         ecx,8
  00000050: 89 4D F8           mov         dword ptr [ebp-8],ecx
  00000053: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000056: 89 55 F4           mov         dword ptr [ebp-0Ch],edx
  00000059: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000005C: 83 C0 04           add         eax,4
  0000005F: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000062: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000065: 83 C1 04           add         ecx,4
  00000068: 89 4D EC           mov         dword ptr [ebp-14h],ecx
  0000006B: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  0000006E: 52                 push        edx
  0000006F: 8B 45 F4           mov         eax,dword ptr [ebp-0Ch]
  00000072: 50                 push        eax
  00000073: 8B 4D F8           mov         ecx,dword ptr [ebp-8]
  00000076: 51                 push        ecx
  00000077: 8B 55 F0           mov         edx,dword ptr [ebp-10h]
  0000007A: 52                 push        edx
  0000007B: 8B 45 F4           mov         eax,dword ptr [ebp-0Ch]
  0000007E: 50                 push        eax
  0000007F: 8B 4D F8           mov         ecx,dword ptr [ebp-8]
  00000082: 51                 push        ecx
  00000083: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000086: E8 00 00 00 00     call        0000008B
  0000008B: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000008E: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000091: 89 42 4C           mov         dword ptr [edx+4Ch],eax
  00000094: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000097: 8B 15 00 00 00 00  mov         edx,dword ptr [?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z]
  0000009D: 89 51 44           mov         dword ptr [ecx+44h],edx
  000000A0: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000000A3: C7 40 3C 00 00 00  mov         dword ptr [eax+3Ch],offset ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAU_iobuf@@W4_Initfl@12@@Z
            00
  000000AA: 83 C4 14           add         esp,14h
  000000AD: 3B EC              cmp         ebp,esp
  000000AF: E8 00 00 00 00     call        000000B4
  000000B4: 8B E5              mov         esp,ebp
  000000B6: 5D                 pop         ebp
  000000B7: C2 08 00           ret         8

?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ (protected: bool __thiscall std::basic_filebuf<char,struct std::char_traits<char> >::_Endwrite(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ]
  00000010: 50                 push        eax
  00000011: 81 EC B4 00 00 00  sub         esp,0B4h
  00000017: 56                 push        esi
  00000018: 57                 push        edi
  00000019: 51                 push        ecx
  0000001A: 8D BD 40 FF FF FF  lea         edi,[ebp-0C0h]
  00000020: B9 2D 00 00 00     mov         ecx,2Dh
  00000025: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000002A: F3 AB              rep stos    dword ptr [edi]
  0000002C: 59                 pop         ecx
  0000002D: A1 00 00 00 00     mov         eax,[?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ]
  00000032: 33 C5              xor         eax,ebp
  00000034: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000037: 50                 push        eax
  00000038: 8D 45 F4           lea         eax,[ebp-0Ch]
  0000003B: 64 A3 00 00 00 00  mov         fs:[?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ],eax
  00000041: 89 4D EC           mov         dword ptr [ebp-14h],ecx
  00000044: C7 85 68 FF FF FF  mov         dword ptr [ebp-98h],offset ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
            00 00 00 00
  0000004E: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000051: 83 78 3C 00        cmp         dword ptr [eax+3Ch],0
  00000055: 74 0B              je          00000062
  00000057: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  0000005A: 0F B6 51 41        movzx       edx,byte ptr [ecx+41h]
  0000005E: 85 D2              test        edx,edx
  00000060: 75 0C              jne         0000006E
  00000062: B0 01              mov         al,1
  00000064: E9 D1 02 00 00     jmp         0000033A
  00000069: E9 CC 02 00 00     jmp         0000033A
  0000006E: C7 45 E8 08 00 00  mov         dword ptr [ebp-18h],8
            00
  00000075: E8 00 00 00 00     call        0000007A
  0000007A: 8B F4              mov         esi,esp
  0000007C: 50                 push        eax
  0000007D: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000080: 8B 10              mov         edx,dword ptr [eax]
  00000082: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000085: 8B 42 04           mov         eax,dword ptr [edx+4]
  00000088: FF D0              call        eax
  0000008A: 3B F4              cmp         esi,esp
  0000008C: E8 00 00 00 00     call        00000091
  00000091: 89 45 AC           mov         dword ptr [ebp-54h],eax
  00000094: E8 00 00 00 00     call        00000099
  00000099: 89 45 A8           mov         dword ptr [ebp-58h],eax
  0000009C: 8D 4D AC           lea         ecx,[ebp-54h]
  0000009F: 51                 push        ecx
  000000A0: 8D 55 A8           lea         edx,[ebp-58h]
  000000A3: 52                 push        edx
  000000A4: E8 00 00 00 00     call        000000A9
  000000A9: 83 C4 08           add         esp,8
  000000AC: 0F B6 C0           movzx       eax,al
  000000AF: 85 C0              test        eax,eax
  000000B1: 74 07              je          000000BA
  000000B3: 32 C0              xor         al,al
  000000B5: E9 80 02 00 00     jmp         0000033A
  000000BA: 6A 00              push        0
  000000BC: 6A 08              push        8
  000000BE: 8D 4D B8           lea         ecx,[ebp-48h]
  000000C1: E8 00 00 00 00     call        000000C6
  000000C6: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
            00
  000000CD: 8D 4D E0           lea         ecx,[ebp-20h]
  000000D0: 51                 push        ecx
  000000D1: 8D 55 98           lea         edx,[ebp-68h]
  000000D4: 52                 push        edx
  000000D5: 8D 4D B8           lea         ecx,[ebp-48h]
  000000D8: E8 00 00 00 00     call        000000DD
  000000DD: 89 85 64 FF FF FF  mov         dword ptr [ebp-9Ch],eax
  000000E3: 8B 85 64 FF FF FF  mov         eax,dword ptr [ebp-9Ch]
  000000E9: 89 85 60 FF FF FF  mov         dword ptr [ebp-0A0h],eax
  000000EF: C6 45 FC 01        mov         byte ptr [ebp-4],1
  000000F3: 8B 8D 60 FF FF FF  mov         ecx,dword ptr [ebp-0A0h]
  000000F9: E8 00 00 00 00     call        000000FE
  000000FE: 8B F0              mov         esi,eax
  00000100: 8D 4D B8           lea         ecx,[ebp-48h]
  00000103: E8 00 00 00 00     call        00000108
  00000108: 03 F0              add         esi,eax
  0000010A: 56                 push        esi
  0000010B: 8D 4D 8C           lea         ecx,[ebp-74h]
  0000010E: 51                 push        ecx
  0000010F: 8D 4D B8           lea         ecx,[ebp-48h]
  00000112: E8 00 00 00 00     call        00000117
  00000117: 89 85 5C FF FF FF  mov         dword ptr [ebp-0A4h],eax
  0000011D: 8B 95 5C FF FF FF  mov         edx,dword ptr [ebp-0A4h]
  00000123: 89 95 58 FF FF FF  mov         dword ptr [ebp-0A8h],edx
  00000129: C6 45 FC 02        mov         byte ptr [ebp-4],2
  0000012D: 8B 8D 58 FF FF FF  mov         ecx,dword ptr [ebp-0A8h]
  00000133: E8 00 00 00 00     call        00000138
  00000138: 50                 push        eax
  00000139: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  0000013C: 83 C0 44           add         eax,44h
  0000013F: 50                 push        eax
  00000140: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000143: 8B 49 3C           mov         ecx,dword ptr [ecx+3Ch]
  00000146: E8 00 00 00 00     call        0000014B
  0000014B: 89 45 A4           mov         dword ptr [ebp-5Ch],eax
  0000014E: C6 45 FC 01        mov         byte ptr [ebp-4],1
  00000152: 8D 4D 8C           lea         ecx,[ebp-74h]
  00000155: E8 00 00 00 00     call        0000015A
  0000015A: C6 45 FC 00        mov         byte ptr [ebp-4],0
  0000015E: 8D 4D 98           lea         ecx,[ebp-68h]
  00000161: E8 00 00 00 00     call        00000166
  00000166: 8B 55 A4           mov         edx,dword ptr [ebp-5Ch]
  00000169: 89 95 54 FF FF FF  mov         dword ptr [ebp-0ACh],edx
  0000016F: 83 BD 54 FF FF FF  cmp         dword ptr [ebp-0ACh],0
            00
  00000176: 74 1B              je          00000193
  00000178: 83 BD 54 FF FF FF  cmp         dword ptr [ebp-0ACh],1
            01
  0000017F: 74 19              je          0000019A
  00000181: 83 BD 54 FF FF FF  cmp         dword ptr [ebp-0ACh],3
            03
  00000188: 0F 84 5C 01 00 00  je          000002EA
  0000018E: E9 75 01 00 00     jmp         00000308
  00000193: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000196: C6 40 41 00        mov         byte ptr [eax+41h],0
  0000019A: 8D 4D 80           lea         ecx,[ebp-80h]
  0000019D: 51                 push        ecx
  0000019E: 8D 4D B8           lea         ecx,[ebp-48h]
  000001A1: E8 00 00 00 00     call        000001A6
  000001A6: 89 85 50 FF FF FF  mov         dword ptr [ebp-0B0h],eax
  000001AC: 8B 95 50 FF FF FF  mov         edx,dword ptr [ebp-0B0h]
  000001B2: 89 95 4C FF FF FF  mov         dword ptr [ebp-0B4h],edx
  000001B8: C6 45 FC 03        mov         byte ptr [ebp-4],3
  000001BC: 8B 8D 4C FF FF FF  mov         ecx,dword ptr [ebp-0B4h]
  000001C2: E8 00 00 00 00     call        000001C7
  000001C7: 8B 4D E0           mov         ecx,dword ptr [ebp-20h]
  000001CA: 2B C8              sub         ecx,eax
  000001CC: 89 4D B0           mov         dword ptr [ebp-50h],ecx
  000001CF: C6 45 FC 00        mov         byte ptr [ebp-4],0
  000001D3: 8D 4D 80           lea         ecx,[ebp-80h]
  000001D6: E8 00 00 00 00     call        000001DB
  000001DB: 83 7D B0 00        cmp         dword ptr [ebp-50h],0
  000001DF: 76 66              jbe         00000247
  000001E1: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  000001E4: 8B 42 4C           mov         eax,dword ptr [edx+4Ch]
  000001E7: 50                 push        eax
  000001E8: 8B 4D B0           mov         ecx,dword ptr [ebp-50h]
  000001EB: 51                 push        ecx
  000001EC: 6A 01              push        1
  000001EE: 8D 95 70 FF FF FF  lea         edx,[ebp-90h]
  000001F4: 52                 push        edx
  000001F5: 8D 4D B8           lea         ecx,[ebp-48h]
  000001F8: E8 00 00 00 00     call        000001FD
  000001FD: 89 85 48 FF FF FF  mov         dword ptr [ebp-0B8h],eax
  00000203: 8B 85 48 FF FF FF  mov         eax,dword ptr [ebp-0B8h]
  00000209: 89 85 44 FF FF FF  mov         dword ptr [ebp-0BCh],eax
  0000020F: C6 45 FC 04        mov         byte ptr [ebp-4],4
  00000213: 8B 8D 68 FF FF FF  mov         ecx,dword ptr [ebp-98h]
  00000219: 83 C9 01           or          ecx,1
  0000021C: 89 8D 68 FF FF FF  mov         dword ptr [ebp-98h],ecx
  00000222: 8B 8D 44 FF FF FF  mov         ecx,dword ptr [ebp-0BCh]
  00000228: E8 00 00 00 00     call        0000022D
  0000022D: 50                 push        eax
  0000022E: E8 00 00 00 00     call        00000233
  00000233: 83 C4 10           add         esp,10h
  00000236: 39 45 B0           cmp         dword ptr [ebp-50h],eax
  00000239: 74 0C              je          00000247
  0000023B: C7 85 40 FF FF FF  mov         dword ptr [ebp-0C0h],1
            01 00 00 00
  00000245: EB 0A              jmp         00000251
  00000247: C7 85 40 FF FF FF  mov         dword ptr [ebp-0C0h],offset ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
            00 00 00 00
  00000251: 8A 95 40 FF FF FF  mov         dl,byte ptr [ebp-0C0h]
  00000257: 88 95 7F FF FF FF  mov         byte ptr [ebp-81h],dl
  0000025D: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ
            00
  00000264: 8B 85 68 FF FF FF  mov         eax,dword ptr [ebp-98h]
  0000026A: 83 E0 01           and         eax,1
  0000026D: 74 12              je          00000281
  0000026F: 83 A5 68 FF FF FF  and         dword ptr [ebp-98h],0FEh
            FE
  00000276: 8D 8D 70 FF FF FF  lea         ecx,[ebp-90h]
  0000027C: E8 00 00 00 00     call        00000281
  00000281: 0F B6 8D 7F FF FF  movzx       ecx,byte ptr [ebp-81h]
            FF
  00000288: 85 C9              test        ecx,ecx
  0000028A: 74 21              je          000002AD
  0000028C: C6 85 6F FF FF FF  mov         byte ptr [ebp-91h],0
            00
  00000293: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  0000029A: 8D 4D B8           lea         ecx,[ebp-48h]
  0000029D: E8 00 00 00 00     call        000002A2
  000002A2: 8A 85 6F FF FF FF  mov         al,byte ptr [ebp-91h]
  000002A8: E9 8D 00 00 00     jmp         0000033A
  000002AD: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  000002B0: 0F B6 42 41        movzx       eax,byte ptr [edx+41h]
  000002B4: 85 C0              test        eax,eax
  000002B6: 75 1E              jne         000002D6
  000002B8: C6 85 6E FF FF FF  mov         byte ptr [ebp-92h],1
            01
  000002BF: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000002C6: 8D 4D B8           lea         ecx,[ebp-48h]
  000002C9: E8 00 00 00 00     call        000002CE
  000002CE: 8A 85 6E FF FF FF  mov         al,byte ptr [ebp-92h]
  000002D4: EB 64              jmp         0000033A
  000002D6: 83 7D B0 00        cmp         dword ptr [ebp-50h],0
  000002DA: 75 0C              jne         000002E8
  000002DC: 6A 00              push        0
  000002DE: 6A 08              push        8
  000002E0: 8D 4D B8           lea         ecx,[ebp-48h]
  000002E3: E8 00 00 00 00     call        000002E8
  000002E8: EB 3C              jmp         00000326
  000002EA: C6 85 6D FF FF FF  mov         byte ptr [ebp-93h],1
            01
  000002F1: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000002F8: 8D 4D B8           lea         ecx,[ebp-48h]
  000002FB: E8 00 00 00 00     call        00000300
  00000300: 8A 85 6D FF FF FF  mov         al,byte ptr [ebp-93h]
  00000306: EB 32              jmp         0000033A
  00000308: C6 85 6C FF FF FF  mov         byte ptr [ebp-94h],0
            00
  0000030F: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000316: 8D 4D B8           lea         ecx,[ebp-48h]
  00000319: E8 00 00 00 00     call        0000031E
  0000031E: 8A 85 6C FF FF FF  mov         al,byte ptr [ebp-94h]
  00000324: EB 14              jmp         0000033A
  00000326: E9 A2 FD FF FF     jmp         000000CD
  0000032B: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000332: 8D 4D B8           lea         ecx,[ebp-48h]
  00000335: E8 00 00 00 00     call        0000033A
  0000033A: 52                 push        edx
  0000033B: 8B CD              mov         ecx,ebp
  0000033D: 50                 push        eax
  0000033E: 8D 15 00 00 00 00  lea         edx,[?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ]
  00000344: E8 00 00 00 00     call        00000349
  00000349: 58                 pop         eax
  0000034A: 5A                 pop         edx
  0000034B: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  0000034E: 64 89 0D 00 00 00  mov         dword ptr fs:[?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ],ecx
            00
  00000355: 59                 pop         ecx
  00000356: 5F                 pop         edi
  00000357: 5E                 pop         esi
  00000358: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000035B: 33 CD              xor         ecx,ebp
  0000035D: E8 00 00 00 00     call        00000362
  00000362: 81 C4 C0 00 00 00  add         esp,0C0h
  00000368: 3B EC              cmp         ebp,esp
  0000036A: E8 00 00 00 00     call        0000036F
  0000036F: 8B E5              mov         esp,ebp
  00000371: 5D                 pop         ebp
  00000372: C3                 ret
  00000373: 90                 nop
$LN31:
  00000374: 02 00              add         al,byte ptr [eax]
  00000376: 00 00              add         byte ptr [eax],al
  00000378: 00 00              add         byte ptr [eax],al
  0000037A: 00 00              add         byte ptr [eax],al
$LN30:
  0000037C: E0 FF              loopne      0000037D
  0000037E: FF
  0000037F: FF 04 00           inc         dword ptr [eax+eax]
  00000382: 00 00              add         byte ptr [eax],al
  00000384: 00 00              add         byte ptr [eax],al
  00000386: 00 00              add         byte ptr [eax],al
  00000388: B8 FF FF FF 20     mov         eax,20FFFFFFh
  0000038D: 00 00              add         byte ptr [eax],al
  0000038F: 00 00              add         byte ptr [eax],al
  00000391: 00 00              add         byte ptr [eax],al
  00000393: 00 5F 53           add         byte ptr [edi+53h],bl
  00000396: 74 72              je          0000040A
  00000398: 00 5F 44           add         byte ptr [edi+44h],bl
  0000039B: 65 73 74           jae         00000412
  0000039E: 00

__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$0:
  00000000: 8D 4D B8           lea         ecx,[ebp-48h]
  00000003: E9 00 00 00 00     jmp         __unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$1
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$1:
  00000008: 8D 4D 98           lea         ecx,[ebp-68h]
  0000000B: E9 00 00 00 00     jmp         __unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$2
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$2:
  00000010: 8D 4D 8C           lea         ecx,[ebp-74h]
  00000013: E9 00 00 00 00     jmp         __unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$3
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$3:
  00000018: 8D 4D 80           lea         ecx,[ebp-80h]
  0000001B: E9 00 00 00 00     jmp         __unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$4
__unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$4:
  00000020: 8B 85 68 FF FF FF  mov         eax,dword ptr [ebp-98h]
  00000026: 83 E0 01           and         eax,1
  00000029: 0F 84 12 00 00 00  je          $LN25
  0000002F: 83 A5 68 FF FF FF  and         dword ptr [ebp-98h],0FEh
            FE
  00000036: 8D 8D 70 FF FF FF  lea         ecx,[ebp-90h]
  0000003C: E9 00 00 00 00     jmp         $LN25
$LN25:
  00000041: C3                 ret
__ehhandler$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ:
  00000042: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  00000046: 8D 42 0C           lea         eax,[edx+0Ch]
  00000049: 8B 8A 40 FF FF FF  mov         ecx,dword ptr [edx-0C0h]
  0000004F: 33 C8              xor         ecx,eax
  00000051: E8 00 00 00 00     call        00000056
  00000056: 8B 4A FC           mov         ecx,dword ptr [edx-4]
  00000059: 33 C8              xor         ecx,eax
  0000005B: E8 00 00 00 00     call        00000060
  00000060: B8 00 00 00 00     mov         eax,offset __unwindfunclet$?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAE_NXZ$0
  00000065: E9 00 00 00 00     jmp         0000006A

?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAV?$codecvt@DDH@2@@Z (protected: void __thiscall std::basic_filebuf<char,struct std::char_traits<char> >::_Initcvt(class std::codecvt<char,char,int> *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 0F B6 C0           movzx       eax,al
  00000019: 85 C0              test        eax,eax
  0000001B: 74 0C              je          00000029
  0000001D: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000020: C7 41 3C 00 00 00  mov         dword ptr [ecx+3Ch],offset ?_Initcvt@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IAEXPAV?$codecvt@DDH@2@@Z
            00
  00000027: EB 11              jmp         0000003A
  00000029: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000002C: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000002F: 89 42 3C           mov         dword ptr [edx+3Ch],eax
  00000032: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000035: E8 00 00 00 00     call        0000003A
  0000003A: 83 C4 04           add         esp,4
  0000003D: 3B EC              cmp         ebp,esp
  0000003F: E8 00 00 00 00     call        00000044
  00000044: 8B E5              mov         esp,ebp
  00000046: 5D                 pop         ebp
  00000047: C2 04 00           ret         4

?always_noconv@codecvt_base@std@@QBE_NXZ (public: bool __thiscall std::codecvt_base::always_noconv(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: 56                 push        esi
  00000005: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000C: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000F: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000012: 8B 10              mov         edx,dword ptr [eax]
  00000014: 8B F4              mov         esi,esp
  00000016: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000019: 8B 42 04           mov         eax,dword ptr [edx+4]
  0000001C: FF D0              call        eax
  0000001E: 3B F4              cmp         esi,esp
  00000020: E8 00 00 00 00     call        00000025
  00000025: 5E                 pop         esi
  00000026: 83 C4 04           add         esp,4
  00000029: 3B EC              cmp         ebp,esp
  0000002B: E8 00 00 00 00     call        00000030
  00000030: 8B E5              mov         esp,ebp
  00000032: 5D                 pop         ebp
  00000033: C3                 ret

??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z (public: __thiscall std::basic_ostream<char,struct std::char_traits<char> >::sentry::sentry(class std::basic_ostream<char,struct std::char_traits<char> > &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z]
  00000010: 50                 push        eax
  00000011: 51                 push        ecx
  00000012: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000019: A1 00 00 00 00     mov         eax,[??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z]
  0000001E: 33 C5              xor         eax,ebp
  00000020: 50                 push        eax
  00000021: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000024: 64 A3 00 00 00 00  mov         fs:[??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z],eax
  0000002A: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  0000002D: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000030: 50                 push        eax
  00000031: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000034: E8 00 00 00 00     call        00000039
  00000039: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
            00
  00000040: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000043: 8B 11              mov         edx,dword ptr [ecx]
  00000045: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000048: 03 4A 04           add         ecx,dword ptr [edx+4]
  0000004B: E8 00 00 00 00     call        00000050
  00000050: 0F B6 C0           movzx       eax,al
  00000053: 85 C0              test        eax,eax
  00000055: 74 2D              je          00000084
  00000057: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000005A: 8B 11              mov         edx,dword ptr [ecx]
  0000005C: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000005F: 03 4A 04           add         ecx,dword ptr [edx+4]
  00000062: E8 00 00 00 00     call        00000067
  00000067: 85 C0              test        eax,eax
  00000069: 74 19              je          00000084
  0000006B: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000006E: 8B 08              mov         ecx,dword ptr [eax]
  00000070: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000073: 03 51 04           add         edx,dword ptr [ecx+4]
  00000076: 8B CA              mov         ecx,edx
  00000078: E8 00 00 00 00     call        0000007D
  0000007D: 8B C8              mov         ecx,eax
  0000007F: E8 00 00 00 00     call        00000084
  00000084: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000087: 8B 08              mov         ecx,dword ptr [eax]
  00000089: 8B 55 08           mov         edx,dword ptr [ebp+8]
  0000008C: 03 51 04           add         edx,dword ptr [ecx+4]
  0000008F: 8B CA              mov         ecx,edx
  00000091: E8 00 00 00 00     call        00000096
  00000096: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000099: 88 41 04           mov         byte ptr [ecx+4],al
  0000009C: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000000A3: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  000000A6: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  000000A9: 64 89 0D 00 00 00  mov         dword ptr fs:[??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z],ecx
            00
  000000B0: 59                 pop         ecx
  000000B1: 83 C4 10           add         esp,10h
  000000B4: 3B EC              cmp         ebp,esp
  000000B6: E8 00 00 00 00     call        000000BB
  000000BB: 8B E5              mov         esp,ebp
  000000BD: 5D                 pop         ebp
  000000BE: C2 04 00           ret         4

__unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0:
  00000000: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000003: E9 00 00 00 00     jmp         __ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z
__ehhandler$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z:
  00000008: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000000F: 8B 4A F8           mov         ecx,dword ptr [edx-8]
  00000012: 33 C8              xor         ecx,eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z$0
  0000001E: E9 00 00 00 00     jmp         00000023

??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ (public: __thiscall std::basic_ostream<char,struct std::char_traits<char> >::sentry::~sentry(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ]
  00000010: 50                 push        eax
  00000011: 51                 push        ecx
  00000012: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000019: A1 00 00 00 00     mov         eax,[??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ]
  0000001E: 33 C5              xor         eax,ebp
  00000020: 50                 push        eax
  00000021: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000024: 64 A3 00 00 00 00  mov         fs:[??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ],eax
  0000002A: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  0000002D: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
            00
  00000034: E8 00 00 00 00     call        00000039
  00000039: 0F B6 C0           movzx       eax,al
  0000003C: 85 C0              test        eax,eax
  0000003E: 75 0A              jne         0000004A
  00000040: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000043: 8B 09              mov         ecx,dword ptr [ecx]
  00000045: E8 00 00 00 00     call        0000004A
  0000004A: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000051: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000054: E8 00 00 00 00     call        00000059
  00000059: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  0000005C: 64 89 0D 00 00 00  mov         dword ptr fs:[??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ],ecx
            00
  00000063: 59                 pop         ecx
  00000064: 83 C4 10           add         esp,10h
  00000067: 3B EC              cmp         ebp,esp
  00000069: E8 00 00 00 00     call        0000006E
  0000006E: 8B E5              mov         esp,ebp
  00000070: 5D                 pop         ebp
  00000071: C3                 ret

__unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0:
  00000000: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000003: E9 00 00 00 00     jmp         __ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ
__ehhandler$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ:
  00000008: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000000F: 8B 4A F8           mov         ecx,dword ptr [edx-8]
  00000012: 33 C8              xor         ecx,eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ$0
  0000001E: E9 00 00 00 00     jmp         00000023

??Bsentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QBE_NXZ (public: __thiscall std::basic_ostream<char,struct std::char_traits<char> >::sentry::operator bool(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8A 40 04           mov         al,byte ptr [eax+4]
  00000014: 8B E5              mov         esp,ebp
  00000016: 5D                 pop         ebp
  00000017: C3                 ret

??0?$fpos@H@std@@QAE@J@Z (public: __thiscall std::fpos<int>::fpos<int>(long)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000014: 89 08              mov         dword ptr [eax],ecx
  00000016: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000019: C7 42 08 00 00 00  mov         dword ptr [edx+8],offset ??0?$fpos@H@std@@QAE@J@Z
            00
  00000020: C7 42 0C 00 00 00  mov         dword ptr [edx+0Ch],offset ??0?$fpos@H@std@@QAE@J@Z
            00
  00000027: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002A: 8B 0D 00 00 00 00  mov         ecx,dword ptr [??0?$fpos@H@std@@QAE@J@Z]
  00000030: 89 48 10           mov         dword ptr [eax+10h],ecx
  00000033: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000036: 8B E5              mov         esp,ebp
  00000038: 5D                 pop         ebp
  00000039: C2 04 00           ret         4

??0?$fpos@H@std@@QAE@H_J@Z (public: __thiscall std::fpos<int>::fpos<int>(int,__int64)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??0?$fpos@H@std@@QAE@H_J@Z
  00000017: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001A: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  0000001D: 89 51 08           mov         dword ptr [ecx+8],edx
  00000020: 8B 45 10           mov         eax,dword ptr [ebp+10h]
  00000023: 89 41 0C           mov         dword ptr [ecx+0Ch],eax
  00000026: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000029: 8B 55 08           mov         edx,dword ptr [ebp+8]
  0000002C: 89 51 10           mov         dword ptr [ecx+10h],edx
  0000002F: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000032: 8B E5              mov         esp,ebp
  00000034: 5D                 pop         ebp
  00000035: C2 0C 00           ret         0Ch

?state@?$fpos@H@std@@QBEHXZ (public: int __thiscall std::fpos<int>::state(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 40 10           mov         eax,dword ptr [eax+10h]
  00000014: 8B E5              mov         esp,ebp
  00000016: 5D                 pop         ebp
  00000017: C3                 ret

?seekpos@?$fpos@H@std@@QBE_JXZ (public: __int64 __thiscall std::fpos<int>::seekpos(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: 8B 41 08           mov         eax,dword ptr [ecx+8]
  00000014: 8B 51 0C           mov         edx,dword ptr [ecx+0Ch]
  00000017: 8B E5              mov         esp,ebp
  00000019: 5D                 pop         ebp
  0000001A: C3                 ret

??B?$fpos@H@std@@QBEJXZ (public: __thiscall std::fpos<int>::operator long(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 40 08           mov         eax,dword ptr [eax+8]
  00000014: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000017: 03 01              add         eax,dword ptr [ecx]
  00000019: 8B E5              mov         esp,ebp
  0000001B: 5D                 pop         ebp
  0000001C: C3                 ret

?in@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z (public: int __thiscall std::codecvt<char,char,int>::in(int &,char const *,char const *,char const * &,char *,char *,char * &)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: 56                 push        esi
  00000005: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000C: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000F: 8B F4              mov         esi,esp
  00000011: 8B 45 20           mov         eax,dword ptr [ebp+20h]
  00000014: 50                 push        eax
  00000015: 8B 4D 1C           mov         ecx,dword ptr [ebp+1Ch]
  00000018: 51                 push        ecx
  00000019: 8B 55 18           mov         edx,dword ptr [ebp+18h]
  0000001C: 52                 push        edx
  0000001D: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  00000020: 50                 push        eax
  00000021: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  00000024: 51                 push        ecx
  00000025: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  00000028: 52                 push        edx
  00000029: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000002C: 50                 push        eax
  0000002D: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000030: 8B 11              mov         edx,dword ptr [ecx]
  00000032: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000035: 8B 42 10           mov         eax,dword ptr [edx+10h]
  00000038: FF D0              call        eax
  0000003A: 3B F4              cmp         esi,esp
  0000003C: E8 00 00 00 00     call        00000041
  00000041: 5E                 pop         esi
  00000042: 83 C4 04           add         esp,4
  00000045: 3B EC              cmp         ebp,esp
  00000047: E8 00 00 00 00     call        0000004C
  0000004C: 8B E5              mov         esp,ebp
  0000004E: 5D                 pop         ebp
  0000004F: C2 1C 00           ret         1Ch

?out@?$codecvt@DDH@std@@QBEHAAHPBD1AAPBDPAD3AAPAD@Z (public: int __thiscall std::codecvt<char,char,int>::out(int &,char const *,char const *,char const * &,char *,char *,char * &)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: 56                 push        esi
  00000005: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000C: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000F: 8B F4              mov         esi,esp
  00000011: 8B 45 20           mov         eax,dword ptr [ebp+20h]
  00000014: 50                 push        eax
  00000015: 8B 4D 1C           mov         ecx,dword ptr [ebp+1Ch]
  00000018: 51                 push        ecx
  00000019: 8B 55 18           mov         edx,dword ptr [ebp+18h]
  0000001C: 52                 push        edx
  0000001D: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  00000020: 50                 push        eax
  00000021: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  00000024: 51                 push        ecx
  00000025: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  00000028: 52                 push        edx
  00000029: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000002C: 50                 push        eax
  0000002D: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000030: 8B 11              mov         edx,dword ptr [ecx]
  00000032: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000035: 8B 42 14           mov         eax,dword ptr [edx+14h]
  00000038: FF D0              call        eax
  0000003A: 3B F4              cmp         esi,esp
  0000003C: E8 00 00 00 00     call        00000041
  00000041: 5E                 pop         esi
  00000042: 83 C4 04           add         esp,4
  00000045: 3B EC              cmp         ebp,esp
  00000047: E8 00 00 00 00     call        0000004C
  0000004C: 8B E5              mov         esp,ebp
  0000004E: 5D                 pop         ebp
  0000004F: C2 1C 00           ret         1Ch

??D?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEAADXZ (public: char & __thiscall std::_String_iterator<char,struct std::char_traits<char>,class std::allocator<char> >::operator*(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 83 C4 04           add         esp,4
  00000019: 3B EC              cmp         ebp,esp
  0000001B: E8 00 00 00 00     call        00000020
  00000020: 8B E5              mov         esp,ebp
  00000022: 5D                 pop         ebp
  00000023: C3                 ret

??0_String_base@std@@QAE@XZ (public: __thiscall std::_String_base::_String_base(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000019: 83 C4 04           add         esp,4
  0000001C: 3B EC              cmp         ebp,esp
  0000001E: E8 00 00 00 00     call        00000023
  00000023: 8B E5              mov         esp,ebp
  00000025: 5D                 pop         ebp
  00000026: C3                 ret

??0_Container_base_secure@std@@QAE@XZ (public: __thiscall std::_Container_base_secure::_Container_base_secure(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??0_Container_base_secure@std@@QAE@XZ
  00000017: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001A: 8B E5              mov         esp,ebp
  0000001C: 5D                 pop         ebp
  0000001D: C3                 ret

??0?$_DebugHeapAllocator@D@std@@QAE@ABV01@@Z (public: __thiscall std::_DebugHeapAllocator<char>::_DebugHeapAllocator<char>(class std::_DebugHeapAllocator<char> const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000011: 50                 push        eax
  00000012: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000015: E8 00 00 00 00     call        0000001A
  0000001A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001D: 83 C4 04           add         esp,4
  00000020: 3B EC              cmp         ebp,esp
  00000022: E8 00 00 00 00     call        00000027
  00000027: 8B E5              mov         esp,ebp
  00000029: 5D                 pop         ebp
  0000002A: C2 04 00           ret         4

?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z (public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __thiscall std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign(char const *,unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  00000012: 74 16              je          0000002A
  00000014: 68 2C 04 00 00     push        42Ch
  00000019: 68 00 00 00 00     push        offset ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
  0000001E: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000021: 50                 push        eax
  00000022: E8 00 00 00 00     call        00000027
  00000027: 83 C4 0C           add         esp,0Ch
  0000002A: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000002D: 51                 push        ecx
  0000002E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000031: E8 00 00 00 00     call        00000036
  00000036: 0F B6 D0           movzx       edx,al
  00000039: 85 D2              test        edx,edx
  0000003B: 74 20              je          0000005D
  0000003D: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000040: 50                 push        eax
  00000041: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000044: E8 00 00 00 00     call        00000049
  00000049: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000004C: 2B C8              sub         ecx,eax
  0000004E: 51                 push        ecx
  0000004F: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000052: 52                 push        edx
  00000053: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000056: E8 00 00 00 00     call        0000005B
  0000005B: EB 44              jmp         000000A1
  0000005D: 6A 00              push        0
  0000005F: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000062: 50                 push        eax
  00000063: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000066: E8 00 00 00 00     call        0000006B
  0000006B: 0F B6 C8           movzx       ecx,al
  0000006E: 85 C9              test        ecx,ecx
  00000070: 74 2C              je          0000009E
  00000072: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  00000075: 52                 push        edx
  00000076: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000079: 50                 push        eax
  0000007A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000007D: 8B 51 1C           mov         edx,dword ptr [ecx+1Ch]
  00000080: 52                 push        edx
  00000081: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000084: E8 00 00 00 00     call        00000089
  00000089: 50                 push        eax
  0000008A: E8 00 00 00 00     call        0000008F
  0000008F: 83 C4 10           add         esp,10h
  00000092: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000095: 50                 push        eax
  00000096: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000099: E8 00 00 00 00     call        0000009E
  0000009E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000000A1: 83 C4 04           add         esp,4
  000000A4: 3B EC              cmp         ebp,esp
  000000A6: E8 00 00 00 00     call        000000AB
  000000AB: 8B E5              mov         esp,ebp
  000000AD: 5D                 pop         ebp
  000000AE: C2 08 00           ret         8

?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z (public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __thiscall std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::assign(unsigned int,char)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000011: 3B 05 00 00 00 00  cmp         eax,dword ptr [?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z]
  00000017: 75 05              jne         0000001E
  00000019: E8 00 00 00 00     call        0000001E
  0000001E: 6A 00              push        0
  00000020: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000023: 51                 push        ecx
  00000024: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000027: E8 00 00 00 00     call        0000002C
  0000002C: 0F B6 D0           movzx       edx,al
  0000002F: 85 D2              test        edx,edx
  00000031: 74 1F              je          00000052
  00000033: 0F B6 45 0C        movzx       eax,byte ptr [ebp+0Ch]
  00000037: 50                 push        eax
  00000038: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000003B: 51                 push        ecx
  0000003C: 6A 00              push        0
  0000003E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000041: E8 00 00 00 00     call        00000046
  00000046: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000049: 52                 push        edx
  0000004A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000004D: E8 00 00 00 00     call        00000052
  00000052: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000055: 83 C4 04           add         esp,4
  00000058: 3B EC              cmp         ebp,esp
  0000005A: E8 00 00 00 00     call        0000005F
  0000005F: 8B E5              mov         esp,ebp
  00000061: 5D                 pop         ebp
  00000062: C2 08 00           ret         8

?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXIID@Z (protected: void __thiscall std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Chassign(unsigned int,unsigned int,char)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 83 7D 0C 01        cmp         dword ptr [ebp+0Ch],1
  00000012: 75 1A              jne         0000002E
  00000014: 8D 45 10           lea         eax,[ebp+10h]
  00000017: 50                 push        eax
  00000018: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001B: E8 00 00 00 00     call        00000020
  00000020: 03 45 08           add         eax,dword ptr [ebp+8]
  00000023: 50                 push        eax
  00000024: E8 00 00 00 00     call        00000029
  00000029: 83 C4 08           add         esp,8
  0000002C: EB 1D              jmp         0000004B
  0000002E: 0F B6 4D 10        movzx       ecx,byte ptr [ebp+10h]
  00000032: 51                 push        ecx
  00000033: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  00000036: 52                 push        edx
  00000037: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000003A: E8 00 00 00 00     call        0000003F
  0000003F: 03 45 08           add         eax,dword ptr [ebp+8]
  00000042: 50                 push        eax
  00000043: E8 00 00 00 00     call        00000048
  00000048: 83 C4 0C           add         esp,0Ch
  0000004B: 83 C4 04           add         esp,4
  0000004E: 3B EC              cmp         ebp,esp
  00000050: E8 00 00 00 00     call        00000055
  00000055: 8B E5              mov         esp,ebp
  00000057: 5D                 pop         ebp
  00000058: C2 0C 00           ret         0Ch

?assign@?$char_traits@D@std@@SAXAADABD@Z (public: static void __cdecl std::char_traits<char>::assign(char &,char const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000006: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000009: 8A 11              mov         dl,byte ptr [ecx]
  0000000B: 88 10              mov         byte ptr [eax],dl
  0000000D: 5D                 pop         ebp
  0000000E: C3                 ret

?assign@?$char_traits@D@std@@SAPADPADID@Z (public: static char * __cdecl std::char_traits<char>::assign(char *,unsigned int,char)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000006: 50                 push        eax
  00000007: 0F BE 4D 10        movsx       ecx,byte ptr [ebp+10h]
  0000000B: 51                 push        ecx
  0000000C: 8B 55 08           mov         edx,dword ptr [ebp+8]
  0000000F: 52                 push        edx
  00000010: E8 00 00 00 00     call        00000015
  00000015: 83 C4 0C           add         esp,0Ch
  00000018: 3B EC              cmp         ebp,esp
  0000001A: E8 00 00 00 00     call        0000001F
  0000001F: 5D                 pop         ebp
  00000020: C3                 ret

?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXI@Z (protected: void __thiscall std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Eos(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000014: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000017: C6 45 FB 00        mov         byte ptr [ebp-5],0
  0000001B: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001E: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000021: 89 48 18           mov         dword ptr [eax+18h],ecx
  00000024: 8D 55 FB           lea         edx,[ebp-5]
  00000027: 52                 push        edx
  00000028: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000002B: E8 00 00 00 00     call        00000030
  00000030: 03 45 08           add         eax,dword ptr [ebp+8]
  00000033: 50                 push        eax
  00000034: E8 00 00 00 00     call        00000039
  00000039: 83 C4 08           add         esp,8
  0000003C: 83 C4 08           add         esp,8
  0000003F: 3B EC              cmp         ebp,esp
  00000041: E8 00 00 00 00     call        00000046
  00000046: 8B E5              mov         esp,ebp
  00000048: 5D                 pop         ebp
  00000049: C2 04 00           ret         4

?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NI_N@Z (protected: bool __thiscall std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Grow(unsigned int,bool)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000014: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000017: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001A: E8 00 00 00 00     call        0000001F
  0000001F: 3B 45 08           cmp         eax,dword ptr [ebp+8]
  00000022: 73 05              jae         00000029
  00000024: E8 00 00 00 00     call        00000029
  00000029: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002C: 8B 48 1C           mov         ecx,dword ptr [eax+1Ch]
  0000002F: 3B 4D 08           cmp         ecx,dword ptr [ebp+8]
  00000032: 73 15              jae         00000049
  00000034: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000037: 8B 42 18           mov         eax,dword ptr [edx+18h]
  0000003A: 50                 push        eax
  0000003B: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000003E: 51                 push        ecx
  0000003F: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000042: E8 00 00 00 00     call        00000047
  00000047: EB 4A              jmp         00000093
  00000049: 0F B6 55 0C        movzx       edx,byte ptr [ebp+0Ch]
  0000004D: 85 D2              test        edx,edx
  0000004F: 74 32              je          00000083
  00000051: 83 7D 08 10        cmp         dword ptr [ebp+8],10h
  00000055: 73 2C              jae         00000083
  00000057: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000005A: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000005D: 3B 48 18           cmp         ecx,dword ptr [eax+18h]
  00000060: 73 08              jae         0000006A
  00000062: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000065: 89 55 F8           mov         dword ptr [ebp-8],edx
  00000068: EB 09              jmp         00000073
  0000006A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000006D: 8B 48 18           mov         ecx,dword ptr [eax+18h]
  00000070: 89 4D F8           mov         dword ptr [ebp-8],ecx
  00000073: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  00000076: 52                 push        edx
  00000077: 6A 01              push        1
  00000079: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000007C: E8 00 00 00 00     call        00000081
  00000081: EB 10              jmp         00000093
  00000083: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  00000087: 75 0A              jne         00000093
  00000089: 6A 00              push        0
  0000008B: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000008E: E8 00 00 00 00     call        00000093
  00000093: 33 C0              xor         eax,eax
  00000095: 3B 45 08           cmp         eax,dword ptr [ebp+8]
  00000098: 1B C0              sbb         eax,eax
  0000009A: F7 D8              neg         eax
  0000009C: 83 C4 08           add         esp,8
  0000009F: 3B EC              cmp         ebp,esp
  000000A1: E8 00 00 00 00     call        000000A6
  000000A6: 8B E5              mov         esp,ebp
  000000A8: 5D                 pop         ebp
  000000A9: C2 08 00           ret         8

?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEPADXZ (protected: char * __thiscall std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Myptr(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000014: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000017: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001A: 83 78 1C 10        cmp         dword ptr [eax+1Ch],10h
  0000001E: 72 0B              jb          0000002B
  00000020: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000023: 8B 51 08           mov         edx,dword ptr [ecx+8]
  00000026: 89 55 F8           mov         dword ptr [ebp-8],edx
  00000029: EB 09              jmp         00000034
  0000002B: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002E: 83 C0 08           add         eax,8
  00000031: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000034: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  00000037: 8B E5              mov         esp,ebp
  00000039: 5D                 pop         ebp
  0000003A: C3                 ret

??0?$allocator@D@std@@QAE@ABV01@@Z (public: __thiscall std::allocator<char>::allocator<char>(class std::allocator<char> const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B E5              mov         esp,ebp
  00000013: 5D                 pop         ebp
  00000014: C2 04 00           ret         4

?deallocate@?$allocator@D@std@@QAEXPADI@Z (public: void __thiscall std::allocator<char>::deallocate(char *,unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000011: 50                 push        eax
  00000012: E8 00 00 00 00     call        00000017
  00000017: 83 C4 04           add         esp,4
  0000001A: 83 C4 04           add         esp,4
  0000001D: 3B EC              cmp         ebp,esp
  0000001F: E8 00 00 00 00     call        00000024
  00000024: 8B E5              mov         esp,ebp
  00000026: 5D                 pop         ebp
  00000027: C2 08 00           ret         8

?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ (public: void __thiscall std::basic_ostream<char,struct std::char_traits<char> >::_Osfx(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ]
  00000010: 50                 push        eax
  00000011: 51                 push        ecx
  00000012: 83 EC 08           sub         esp,8
  00000015: 53                 push        ebx
  00000016: 56                 push        esi
  00000017: 57                 push        edi
  00000018: C7 45 E8 CC CC CC  mov         dword ptr [ebp-18h],0CCCCCCCCh
            CC
  0000001F: C7 45 EC CC CC CC  mov         dword ptr [ebp-14h],0CCCCCCCCh
            CC
  00000026: A1 00 00 00 00     mov         eax,[?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ]
  0000002B: 33 C5              xor         eax,ebp
  0000002D: 50                 push        eax
  0000002E: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000031: 64 A3 00 00 00 00  mov         fs:[?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ],eax
  00000037: 89 65 F0           mov         dword ptr [ebp-10h],esp
  0000003A: 89 4D EC           mov         dword ptr [ebp-14h],ecx
  0000003D: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
            00
  00000044: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000047: 8B 08              mov         ecx,dword ptr [eax]
  00000049: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  0000004C: 03 51 04           add         edx,dword ptr [ecx+4]
  0000004F: 8B CA              mov         ecx,edx
  00000051: E8 00 00 00 00     call        00000056
  00000056: 89 45 E8           mov         dword ptr [ebp-18h],eax
  00000059: 8B 45 E8           mov         eax,dword ptr [ebp-18h]
  0000005C: 83 E0 02           and         eax,2
  0000005F: 74 08              je          00000069
  00000061: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000064: E8 00 00 00 00     call        00000069
  00000069: EB 0D              jmp         00000078
__catch$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ$0:
  0000006B: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000072: B8 00 00 00 00     mov         eax,offset ?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00000077: C3                 ret
  00000078: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
$LN3:
  0000007F: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000082: 64 89 0D 00 00 00  mov         dword ptr fs:[?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ],ecx
            00
  00000089: 59                 pop         ecx
  0000008A: 5F                 pop         edi
  0000008B: 5E                 pop         esi
  0000008C: 5B                 pop         ebx
  0000008D: 83 C4 18           add         esp,18h
  00000090: 3B EC              cmp         ebp,esp
  00000092: E8 00 00 00 00     call        00000097
  00000097: 8B E5              mov         esp,ebp
  00000099: 5D                 pop         ebp
  0000009A: C3                 ret

__ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ:
  00000000: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  00000004: 8D 42 0C           lea         eax,[edx+0Ch]
  00000007: 8B 4A E4           mov         ecx,dword ptr [edx-1Ch]
  0000000A: 33 C8              xor         ecx,eax
  0000000C: E8 00 00 00 00     call        00000011
  00000011: B8 00 00 00 00     mov         eax,offset __ehhandler$?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAEXXZ
  00000016: E9 00 00 00 00     jmp         0000001B

?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QBEPAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ (public: class std::basic_ostream<char,struct std::char_traits<char> > * __thiscall std::basic_ios<char,struct std::char_traits<char> >::tie(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 40 2C           mov         eax,dword ptr [eax+2Ch]
  00000014: 8B E5              mov         esp,ebp
  00000016: 5D                 pop         ebp
  00000017: C3                 ret

?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z (protected: void __thiscall std::basic_ios<char,struct std::char_traits<char> >::init(class std::basic_streambuf<char,struct std::char_traits<char> > *,bool)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000019: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000001C: 89 48 28           mov         dword ptr [eax+28h],ecx
  0000001F: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000022: C7 42 2C 00 00 00  mov         dword ptr [edx+2Ch],offset ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
            00
  00000029: 6A 20              push        20h
  0000002B: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000002E: E8 00 00 00 00     call        00000033
  00000033: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000036: 88 41 30           mov         byte ptr [ecx+30h],al
  00000039: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000003C: 83 7A 28 00        cmp         dword ptr [edx+28h],0
  00000040: 75 0C              jne         0000004E
  00000042: 6A 00              push        0
  00000044: 6A 04              push        4
  00000046: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000049: E8 00 00 00 00     call        0000004E
  0000004E: 0F B6 45 0C        movzx       eax,byte ptr [ebp+0Ch]
  00000052: 85 C0              test        eax,eax
  00000054: 74 0E              je          00000064
  00000056: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000059: 51                 push        ecx
  0000005A: E8 00 00 00 00     call        0000005F
  0000005F: 83 C4 04           add         esp,4
  00000062: EB 0A              jmp         0000006E
  00000064: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000067: C7 42 04 00 00 00  mov         dword ptr [edx+4],offset ?init@?$basic_ios@DU?$char_traits@D@std@@@std@@IAEXPAV?$basic_streambuf@DU?$char_traits@D@std@@@2@_N@Z
            00
  0000006E: 83 C4 04           add         esp,4
  00000071: 3B EC              cmp         ebp,esp
  00000073: E8 00 00 00 00     call        00000078
  00000078: 8B E5              mov         esp,ebp
  0000007A: 5D                 pop         ebp
  0000007B: C2 08 00           ret         8

?_Init@ios_base@std@@IAEXXZ (protected: void __thiscall std::ios_base::_Init(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 0C           sub         esp,0Ch
  00000006: C7 45 F4 CC CC CC  mov         dword ptr [ebp-0Ch],0CCCCCCCCh
            CC
  0000000D: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  00000014: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000001B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000001E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000021: C7 40 24 00 00 00  mov         dword ptr [eax+24h],offset ?_Init@ios_base@std@@IAEXXZ
            00
  00000028: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000002B: C7 41 04 00 00 00  mov         dword ptr [ecx+4],offset ?_Init@ios_base@std@@IAEXXZ
            00
  00000032: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000035: C7 42 0C 00 00 00  mov         dword ptr [edx+0Ch],offset ?_Init@ios_base@std@@IAEXXZ
            00
  0000003C: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000003F: C7 40 10 01 02 00  mov         dword ptr [eax+10h],201h
            00
  00000046: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000049: C7 41 14 06 00 00  mov         dword ptr [ecx+14h],6
            00
  00000050: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000053: C7 42 18 00 00 00  mov         dword ptr [edx+18h],offset ?_Init@ios_base@std@@IAEXXZ
            00
  0000005A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000005D: C7 40 1C 00 00 00  mov         dword ptr [eax+1Ch],offset ?_Init@ios_base@std@@IAEXXZ
            00
  00000064: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000067: C7 41 20 00 00 00  mov         dword ptr [ecx+20h],offset ?_Init@ios_base@std@@IAEXXZ
            00
  0000006E: 6A 00              push        0
  00000070: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000073: E8 00 00 00 00     call        00000078
  00000078: 68 0D 02 00 00     push        20Dh
  0000007D: 68 00 00 00 00     push        offset ?_Init@ios_base@std@@IAEXXZ
  00000082: E8 00 00 00 00     call        00000087
  00000087: 50                 push        eax
  00000088: 6A 04              push        4
  0000008A: E8 00 00 00 00     call        0000008F
  0000008F: 83 C4 10           add         esp,10h
  00000092: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000095: 83 7D F8 00        cmp         dword ptr [ebp-8],0
  00000099: 74 0D              je          000000A8
  0000009B: 8B 4D F8           mov         ecx,dword ptr [ebp-8]
  0000009E: E8 00 00 00 00     call        000000A3
  000000A3: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  000000A6: EB 07              jmp         000000AF
  000000A8: C7 45 F4 00 00 00  mov         dword ptr [ebp-0Ch],offset ?_Init@ios_base@std@@IAEXXZ
            00
  000000AF: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  000000B2: 8B 45 F4           mov         eax,dword ptr [ebp-0Ch]
  000000B5: 89 42 24           mov         dword ptr [edx+24h],eax
  000000B8: 83 C4 0C           add         esp,0Ch
  000000BB: 3B EC              cmp         ebp,esp
  000000BD: E8 00 00 00 00     call        000000C2
  000000C2: 8B E5              mov         esp,ebp
  000000C4: 5D                 pop         ebp
  000000C5: C3                 ret

??0locale@std@@QAE@XZ (public: __thiscall std::locale::locale(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: E8 00 00 00 00     call        00000013
  00000013: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000016: 89 01              mov         dword ptr [ecx],eax
  00000018: E8 00 00 00 00     call        0000001D
  0000001D: 8B C8              mov         ecx,eax
  0000001F: E8 00 00 00 00     call        00000024
  00000024: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000027: 83 C4 04           add         esp,4
  0000002A: 3B EC              cmp         ebp,esp
  0000002C: E8 00 00 00 00     call        00000031
  00000031: 8B E5              mov         esp,ebp
  00000033: 5D                 pop         ebp
  00000034: C3                 ret

?clear@ios_base@std@@QAEXH@Z (public: void __thiscall std::ios_base::clear(int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 6A 00              push        0
  00000010: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000013: 50                 push        eax
  00000014: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000017: E8 00 00 00 00     call        0000001C
  0000001C: 83 C4 04           add         esp,4
  0000001F: 3B EC              cmp         ebp,esp
  00000021: E8 00 00 00 00     call        00000026
  00000026: 8B E5              mov         esp,ebp
  00000028: 5D                 pop         ebp
  00000029: C2 04 00           ret         4

??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ (protected: __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::basic_streambuf<char,struct std::char_traits<char> >(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ]
  00000010: 50                 push        eax
  00000011: 83 EC 0C           sub         esp,0Ch
  00000014: C7 45 E8 CC CC CC  mov         dword ptr [ebp-18h],0CCCCCCCCh
            CC
  0000001B: C7 45 EC CC CC CC  mov         dword ptr [ebp-14h],0CCCCCCCCh
            CC
  00000022: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000029: A1 00 00 00 00     mov         eax,[??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ]
  0000002E: 33 C5              xor         eax,ebp
  00000030: 50                 push        eax
  00000031: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000034: 64 A3 00 00 00 00  mov         fs:[??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ],eax
  0000003A: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  0000003D: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000040: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
  00000046: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000049: 83 C1 04           add         ecx,4
  0000004C: E8 00 00 00 00     call        00000051
  00000051: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
            00
  00000058: 6A 1B              push        1Bh
  0000005A: 68 00 00 00 00     push        offset ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
  0000005F: E8 00 00 00 00     call        00000064
  00000064: 50                 push        eax
  00000065: 6A 04              push        4
  00000067: E8 00 00 00 00     call        0000006C
  0000006C: 83 C4 10           add         esp,10h
  0000006F: 89 45 EC           mov         dword ptr [ebp-14h],eax
  00000072: 83 7D EC 00        cmp         dword ptr [ebp-14h],0
  00000076: 74 0D              je          00000085
  00000078: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  0000007B: E8 00 00 00 00     call        00000080
  00000080: 89 45 E8           mov         dword ptr [ebp-18h],eax
  00000083: EB 07              jmp         0000008C
  00000085: C7 45 E8 00 00 00  mov         dword ptr [ebp-18h],offset ??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
            00
  0000008C: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000008F: 8B 55 E8           mov         edx,dword ptr [ebp-18h]
  00000092: 89 51 38           mov         dword ptr [ecx+38h],edx
  00000095: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000098: E8 00 00 00 00     call        0000009D
  0000009D: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000000A4: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  000000A7: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  000000AA: 64 89 0D 00 00 00  mov         dword ptr fs:[??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ],ecx
            00
  000000B1: 59                 pop         ecx
  000000B2: 83 C4 18           add         esp,18h
  000000B5: 3B EC              cmp         ebp,esp
  000000B7: E8 00 00 00 00     call        000000BC
  000000BC: 8B E5              mov         esp,ebp
  000000BE: 5D                 pop         ebp
  000000BF: C3                 ret

__unwindfunclet$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ$0:
  00000000: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000003: 83 C1 04           add         ecx,4
  00000006: E9 00 00 00 00     jmp         __ehhandler$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ
__ehhandler$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ:
  0000000B: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000F: 8D 42 0C           lea         eax,[edx+0Ch]
  00000012: 8B 4A F0           mov         ecx,dword ptr [edx-10h]
  00000015: 33 C8              xor         ecx,eax
  00000017: E8 00 00 00 00     call        0000001C
  0000001C: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAE@XZ$0
  00000021: E9 00 00 00 00     jmp         00000026

?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ (public: class std::locale __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::getloc(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000014: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000017: C7 45 F8 00 00 00  mov         dword ptr [ebp-8],offset ?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QBE?AVlocale@2@XZ
            00
  0000001E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000021: 8B 48 38           mov         ecx,dword ptr [eax+38h]
  00000024: 51                 push        ecx
  00000025: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000028: E8 00 00 00 00     call        0000002D
  0000002D: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  00000030: 83 CA 01           or          edx,1
  00000033: 89 55 F8           mov         dword ptr [ebp-8],edx
  00000036: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000039: 83 C4 08           add         esp,8
  0000003C: 3B EC              cmp         ebp,esp
  0000003E: E8 00 00 00 00     call        00000043
  00000043: 8B E5              mov         esp,ebp
  00000045: 5D                 pop         ebp
  00000046: C2 04 00           ret         4

?_Lock@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QAEXXZ (public: void __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::_Lock(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: 83 C1 04           add         ecx,4
  00000014: E8 00 00 00 00     call        00000019
  00000019: 83 C4 04           add         esp,4
  0000001C: 3B EC              cmp         ebp,esp
  0000001E: E8 00 00 00 00     call        00000023
  00000023: 8B E5              mov         esp,ebp
  00000025: 5D                 pop         ebp
  00000026: C3                 ret

?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXXZ (protected: void __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::_Init(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 83 C0 08           add         eax,8
  00000014: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000017: 89 41 10           mov         dword ptr [ecx+10h],eax
  0000001A: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000001D: 83 C2 0C           add         edx,0Ch
  00000020: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000023: 89 50 14           mov         dword ptr [eax+14h],edx
  00000026: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000029: 83 C1 18           add         ecx,18h
  0000002C: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000002F: 89 4A 20           mov         dword ptr [edx+20h],ecx
  00000032: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000035: 83 C0 1C           add         eax,1Ch
  00000038: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000003B: 89 41 24           mov         dword ptr [ecx+24h],eax
  0000003E: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000041: 83 C2 28           add         edx,28h
  00000044: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000047: 89 50 30           mov         dword ptr [eax+30h],edx
  0000004A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000004D: 83 C1 2C           add         ecx,2Ch
  00000050: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000053: 89 4A 34           mov         dword ptr [edx+34h],ecx
  00000056: 6A 00              push        0
  00000058: 6A 00              push        0
  0000005A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000005D: E8 00 00 00 00     call        00000062
  00000062: 6A 00              push        0
  00000064: 6A 00              push        0
  00000066: 6A 00              push        0
  00000068: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000006B: E8 00 00 00 00     call        00000070
  00000070: 83 C4 04           add         esp,4
  00000073: 3B EC              cmp         ebp,esp
  00000075: E8 00 00 00 00     call        0000007A
  0000007A: 8B E5              mov         esp,ebp
  0000007C: 5D                 pop         ebp
  0000007D: C3                 ret

?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAPAD0PAH001@Z (protected: void __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::_Init(char * *,char * *,int *,char * *,char * *,int *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000014: 89 48 10           mov         dword ptr [eax+10h],ecx
  00000017: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000001A: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  0000001D: 89 42 14           mov         dword ptr [edx+14h],eax
  00000020: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000023: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  00000026: 89 51 20           mov         dword ptr [ecx+20h],edx
  00000029: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002C: 8B 4D 18           mov         ecx,dword ptr [ebp+18h]
  0000002F: 89 48 24           mov         dword ptr [eax+24h],ecx
  00000032: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000035: 8B 45 10           mov         eax,dword ptr [ebp+10h]
  00000038: 89 42 30           mov         dword ptr [edx+30h],eax
  0000003B: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000003E: 8B 55 1C           mov         edx,dword ptr [ebp+1Ch]
  00000041: 89 51 34           mov         dword ptr [ecx+34h],edx
  00000044: 8B E5              mov         esp,ebp
  00000046: 5D                 pop         ebp
  00000047: C2 18 00           ret         18h

??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@AAV12@@Z (public: __thiscall std::basic_ostream<char,struct std::char_traits<char> >::_Sentry_base::_Sentry_base(class std::basic_ostream<char,struct std::char_traits<char> > &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000014: 89 08              mov         dword ptr [eax],ecx
  00000016: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000019: 8B 02              mov         eax,dword ptr [edx]
  0000001B: 8B 08              mov         ecx,dword ptr [eax]
  0000001D: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000020: 8B 02              mov         eax,dword ptr [edx]
  00000022: 03 41 04           add         eax,dword ptr [ecx+4]
  00000025: 8B C8              mov         ecx,eax
  00000027: E8 00 00 00 00     call        0000002C
  0000002C: 85 C0              test        eax,eax
  0000002E: 74 1B              je          0000004B
  00000030: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000033: 8B 11              mov         edx,dword ptr [ecx]
  00000035: 8B 02              mov         eax,dword ptr [edx]
  00000037: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000003A: 8B 09              mov         ecx,dword ptr [ecx]
  0000003C: 03 48 04           add         ecx,dword ptr [eax+4]
  0000003F: E8 00 00 00 00     call        00000044
  00000044: 8B C8              mov         ecx,eax
  00000046: E8 00 00 00 00     call        0000004B
  0000004B: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000004E: 83 C4 04           add         esp,4
  00000051: 3B EC              cmp         ebp,esp
  00000053: E8 00 00 00 00     call        00000058
  00000058: 8B E5              mov         esp,ebp
  0000005A: 5D                 pop         ebp
  0000005B: C2 04 00           ret         4

??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QAE@XZ (public: __thiscall std::basic_ostream<char,struct std::char_traits<char> >::_Sentry_base::~_Sentry_base(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 08              mov         ecx,dword ptr [eax]
  00000013: 8B 11              mov         edx,dword ptr [ecx]
  00000015: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000018: 8B 08              mov         ecx,dword ptr [eax]
  0000001A: 03 4A 04           add         ecx,dword ptr [edx+4]
  0000001D: E8 00 00 00 00     call        00000022
  00000022: 85 C0              test        eax,eax
  00000024: 74 1B              je          00000041
  00000026: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000029: 8B 11              mov         edx,dword ptr [ecx]
  0000002B: 8B 02              mov         eax,dword ptr [edx]
  0000002D: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000030: 8B 09              mov         ecx,dword ptr [ecx]
  00000032: 03 48 04           add         ecx,dword ptr [eax+4]
  00000035: E8 00 00 00 00     call        0000003A
  0000003A: 8B C8              mov         ecx,eax
  0000003C: E8 00 00 00 00     call        00000041
  00000041: 83 C4 04           add         esp,4
  00000044: 3B EC              cmp         ebp,esp
  00000046: E8 00 00 00 00     call        0000004B
  0000004B: 8B E5              mov         esp,ebp
  0000004D: 5D                 pop         ebp
  0000004E: C3                 ret

??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ (public: char const & __thiscall std::_String_const_iterator<char,struct std::char_traits<char>,class std::allocator<char> >::operator*(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 83 38 00           cmp         dword ptr [eax],0
  00000014: 74 35              je          0000004B
  00000016: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000019: 83 79 08 00        cmp         dword ptr [ecx+8],0
  0000001D: 74 2C              je          0000004B
  0000001F: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000022: 8B 0A              mov         ecx,dword ptr [edx]
  00000024: E8 00 00 00 00     call        00000029
  00000029: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000002C: 39 41 08           cmp         dword ptr [ecx+8],eax
  0000002F: 72 1A              jb          0000004B
  00000031: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000034: 8B 0A              mov         ecx,dword ptr [edx]
  00000036: E8 00 00 00 00     call        0000003B
  0000003B: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000003E: 8B 11              mov         edx,dword ptr [ecx]
  00000040: 03 42 18           add         eax,dword ptr [edx+18h]
  00000043: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000046: 3B 41 08           cmp         eax,dword ptr [ecx+8]
  00000049: 77 51              ja          0000009C
  0000004B: 6A 70              push        70h
  0000004D: 68 00 00 00 00     push        offset ??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ
  00000052: 68 00 00 00 00     push        offset ??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ
  00000057: E8 00 00 00 00     call        0000005C
  0000005C: 83 C4 0C           add         esp,0Ch
  0000005F: 33 D2              xor         edx,edx
  00000061: 75 1E              jne         00000081
  00000063: 68 00 00 00 00     push        offset ??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ
  00000068: 6A 00              push        0
  0000006A: 6A 71              push        71h
  0000006C: 68 00 00 00 00     push        offset ??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ
  00000071: 6A 02              push        2
  00000073: E8 00 00 00 00     call        00000078
  00000078: 83 C4 14           add         esp,14h
  0000007B: 83 F8 01           cmp         eax,1
  0000007E: 75 01              jne         00000081
  00000080: CC                 int         3
  00000081: 6A 00              push        0
  00000083: 6A 71              push        71h
  00000085: 68 00 00 00 00     push        offset ??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ
  0000008A: 68 00 00 00 00     push        offset ??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ
  0000008F: 68 00 00 00 00     push        offset ??D?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEABDXZ
  00000094: E8 00 00 00 00     call        00000099
  00000099: 83 C4 14           add         esp,14h
  0000009C: 33 C9              xor         ecx,ecx
  0000009E: 75 FC              jne         0000009C
  000000A0: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  000000A3: 8B 42 08           mov         eax,dword ptr [edx+8]
  000000A6: 83 C4 04           add         esp,4
  000000A9: 3B EC              cmp         ebp,esp
  000000AB: E8 00 00 00 00     call        000000B0
  000000B0: 8B E5              mov         esp,ebp
  000000B2: 5D                 pop         ebp
  000000B3: C3                 ret

?unshift@?$codecvt@DDH@std@@QBEHAAHPAD1AAPAD@Z (public: int __thiscall std::codecvt<char,char,int>::unshift(int &,char *,char *,char * &)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: 56                 push        esi
  00000005: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000C: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000F: 8B F4              mov         esi,esp
  00000011: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  00000014: 50                 push        eax
  00000015: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  00000018: 51                 push        ecx
  00000019: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  0000001C: 52                 push        edx
  0000001D: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000020: 50                 push        eax
  00000021: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000024: 8B 11              mov         edx,dword ptr [ecx]
  00000026: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000029: 8B 42 18           mov         eax,dword ptr [edx+18h]
  0000002C: FF D0              call        eax
  0000002E: 3B F4              cmp         esi,esp
  00000030: E8 00 00 00 00     call        00000035
  00000035: 5E                 pop         esi
  00000036: 83 C4 04           add         esp,4
  00000039: 3B EC              cmp         ebp,esp
  0000003B: E8 00 00 00 00     call        00000040
  00000040: 8B E5              mov         esp,ebp
  00000042: 5D                 pop         ebp
  00000043: C2 10 00           ret         10h

??0?$_String_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PADPBV_Container_base_secure@1@@Z (public: __thiscall std::_String_iterator<char,struct std::char_traits<char>,class std::allocator<char> >::_String_iterator<char,struct std::char_traits<char>,class std::allocator<char> >(char *,class std::_Container_base_secure const *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000011: 50                 push        eax
  00000012: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000015: 51                 push        ecx
  00000016: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000019: E8 00 00 00 00     call        0000001E
  0000001E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000021: 83 C4 04           add         esp,4
  00000024: 3B EC              cmp         ebp,esp
  00000026: E8 00 00 00 00     call        0000002B
  0000002B: 8B E5              mov         esp,ebp
  0000002D: 5D                 pop         ebp
  0000002E: C2 08 00           ret         8

?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ (public: unsigned int __thiscall std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::max_size(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 0C           sub         esp,0Ch
  00000006: C7 45 F4 CC CC CC  mov         dword ptr [ebp-0Ch],0CCCCCCCCh
            CC
  0000000D: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  00000014: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000001B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000001E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000021: 83 C1 04           add         ecx,4
  00000024: E8 00 00 00 00     call        00000029
  00000029: 89 45 F8           mov         dword ptr [ebp-8],eax
  0000002C: 83 7D F8 01        cmp         dword ptr [ebp-8],1
  00000030: 77 09              ja          0000003B
  00000032: C7 45 F4 01 00 00  mov         dword ptr [ebp-0Ch],1
            00
  00000039: EB 09              jmp         00000044
  0000003B: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  0000003E: 83 E8 01           sub         eax,1
  00000041: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000044: 8B 45 F4           mov         eax,dword ptr [ebp-0Ch]
  00000047: 83 C4 0C           add         esp,0Ch
  0000004A: 3B EC              cmp         ebp,esp
  0000004C: E8 00 00 00 00     call        00000051
  00000051: 8B E5              mov         esp,ebp
  00000053: 5D                 pop         ebp
  00000054: C3                 ret

?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z (protected: void __thiscall std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Copy(unsigned int,unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z]
  00000010: 50                 push        eax
  00000011: 51                 push        ecx
  00000012: 83 EC 14           sub         esp,14h
  00000015: 53                 push        ebx
  00000016: 56                 push        esi
  00000017: 57                 push        edi
  00000018: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000001D: 89 45 DC           mov         dword ptr [ebp-24h],eax
  00000020: 89 45 E0           mov         dword ptr [ebp-20h],eax
  00000023: 89 45 E4           mov         dword ptr [ebp-1Ch],eax
  00000026: 89 45 E8           mov         dword ptr [ebp-18h],eax
  00000029: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000002C: A1 00 00 00 00     mov         eax,[?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z]
  00000031: 33 C5              xor         eax,ebp
  00000033: 50                 push        eax
  00000034: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000037: 64 A3 00 00 00 00  mov         fs:[?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z],eax
  0000003D: 89 65 F0           mov         dword ptr [ebp-10h],esp
  00000040: 89 4D EC           mov         dword ptr [ebp-14h],ecx
  00000043: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000046: 83 C8 0F           or          eax,0Fh
  00000049: 89 45 E8           mov         dword ptr [ebp-18h],eax
  0000004C: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  0000004F: E8 00 00 00 00     call        00000054
  00000054: 3B 45 E8           cmp         eax,dword ptr [ebp-18h]
  00000057: 73 08              jae         00000061
  00000059: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000005C: 89 4D E8           mov         dword ptr [ebp-18h],ecx
  0000005F: EB 43              jmp         000000A4
  00000061: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  00000064: 8B 4A 1C           mov         ecx,dword ptr [edx+1Ch]
  00000067: D1 E9              shr         ecx,1
  00000069: 8B 45 E8           mov         eax,dword ptr [ebp-18h]
  0000006C: 33 D2              xor         edx,edx
  0000006E: BE 03 00 00 00     mov         esi,3
  00000073: F7 F6              div         eax,esi
  00000075: 3B C1              cmp         eax,ecx
  00000077: 73 2B              jae         000000A4
  00000079: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  0000007C: 8B 72 1C           mov         esi,dword ptr [edx+1Ch]
  0000007F: D1 EE              shr         esi,1
  00000081: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000084: E8 00 00 00 00     call        00000089
  00000089: 2B C6              sub         eax,esi
  0000008B: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  0000008E: 39 41 1C           cmp         dword ptr [ecx+1Ch],eax
  00000091: 77 11              ja          000000A4
  00000093: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  00000096: 8B 42 1C           mov         eax,dword ptr [edx+1Ch]
  00000099: D1 E8              shr         eax,1
  0000009B: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  0000009E: 03 41 1C           add         eax,dword ptr [ecx+1Ch]
  000000A1: 89 45 E8           mov         dword ptr [ebp-18h],eax
  000000A4: C7 45 E4 00 00 00  mov         dword ptr [ebp-1Ch],offset ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
            00
  000000AB: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
            00
  000000B2: 8B 55 E8           mov         edx,dword ptr [ebp-18h]
  000000B5: 83 C2 01           add         edx,1
  000000B8: 52                 push        edx
  000000B9: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000000BC: 83 C1 04           add         ecx,4
  000000BF: E8 00 00 00 00     call        000000C4
  000000C4: 89 45 E0           mov         dword ptr [ebp-20h],eax
  000000C7: 8B 45 E0           mov         eax,dword ptr [ebp-20h]
  000000CA: 89 45 E4           mov         dword ptr [ebp-1Ch],eax
  000000CD: EB 60              jmp         0000012F
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$0:
  000000CF: 89 65 F0           mov         dword ptr [ebp-10h],esp
  000000D2: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  000000D5: 89 4D E8           mov         dword ptr [ebp-18h],ecx
  000000D8: C6 45 FC 02        mov         byte ptr [ebp-4],2
  000000DC: 8B 55 E8           mov         edx,dword ptr [ebp-18h]
  000000DF: 83 C2 01           add         edx,1
  000000E2: 52                 push        edx
  000000E3: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000000E6: 83 C1 04           add         ecx,4
  000000E9: E8 00 00 00 00     call        000000EE
  000000EE: 89 45 DC           mov         dword ptr [ebp-24h],eax
  000000F1: 8B 45 DC           mov         eax,dword ptr [ebp-24h]
  000000F4: 89 45 E4           mov         dword ptr [ebp-1Ch],eax
  000000F7: EB 22              jmp         0000011B
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$1:
  000000F9: 6A 00              push        0
  000000FB: 6A 01              push        1
  000000FD: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000100: E8 00 00 00 00     call        00000105
  00000105: 6A 00              push        0
  00000107: 6A 00              push        0
  00000109: E8 00 00 00 00     call        0000010E
  0000010E: C7 45 FC 01 00 00  mov         dword ptr [ebp-4],1
            00
  00000115: B8 00 00 00 00     mov         eax,offset ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000011A: C3                 ret
  0000011B: C7 45 FC 01 00 00  mov         dword ptr [ebp-4],1
            00
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$2:
  00000122: C7 45 FC 01 00 00  mov         dword ptr [ebp-4],1
            00
  00000129: B8 00 00 00 00     mov         eax,offset ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  0000012E: C3                 ret
  0000012F: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
__tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z$3:
  00000136: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  0000013A: 76 20              jbe         0000015C
  0000013C: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  0000013F: 51                 push        ecx
  00000140: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000143: E8 00 00 00 00     call        00000148
  00000148: 50                 push        eax
  00000149: 8B 55 E8           mov         edx,dword ptr [ebp-18h]
  0000014C: 83 C2 01           add         edx,1
  0000014F: 52                 push        edx
  00000150: 8B 45 E4           mov         eax,dword ptr [ebp-1Ch]
  00000153: 50                 push        eax
  00000154: E8 00 00 00 00     call        00000159
  00000159: 83 C4 10           add         esp,10h
  0000015C: 6A 00              push        0
  0000015E: 6A 01              push        1
  00000160: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000163: E8 00 00 00 00     call        00000168
  00000168: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  0000016B: 8B 55 E4           mov         edx,dword ptr [ebp-1Ch]
  0000016E: 89 51 08           mov         dword ptr [ecx+8],edx
  00000171: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000174: 8B 4D E8           mov         ecx,dword ptr [ebp-18h]
  00000177: 89 48 1C           mov         dword ptr [eax+1Ch],ecx
  0000017A: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  0000017D: 52                 push        edx
  0000017E: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000181: E8 00 00 00 00     call        00000186
  00000186: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000189: 64 89 0D 00 00 00  mov         dword ptr fs:[?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z],ecx
            00
  00000190: 59                 pop         ecx
  00000191: 5F                 pop         edi
  00000192: 5E                 pop         esi
  00000193: 5B                 pop         ebx
  00000194: 83 C4 24           add         esp,24h
  00000197: 3B EC              cmp         ebp,esp
  00000199: E8 00 00 00 00     call        0000019E
  0000019E: 8B E5              mov         esp,ebp
  000001A0: 5D                 pop         ebp
  000001A1: C2 08 00           ret         8

__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z:
  00000000: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  00000004: 8D 42 0C           lea         eax,[edx+0Ch]
  00000007: 8B 4A D8           mov         ecx,dword ptr [edx-28h]
  0000000A: 33 C8              xor         ecx,eax
  0000000C: E8 00 00 00 00     call        00000011
  00000011: B8 00 00 00 00     mov         eax,offset __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAEXII@Z
  00000016: E9 00 00 00 00     jmp         0000001B

?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@IAE_NPBD@Z (protected: bool __thiscall std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Inside(char const *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  00000012: 74 20              je          00000034
  00000014: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000017: E8 00 00 00 00     call        0000001C
  0000001C: 39 45 08           cmp         dword ptr [ebp+8],eax
  0000001F: 72 13              jb          00000034
  00000021: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000024: E8 00 00 00 00     call        00000029
  00000029: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000002C: 03 41 18           add         eax,dword ptr [ecx+18h]
  0000002F: 3B 45 08           cmp         eax,dword ptr [ebp+8]
  00000032: 77 06              ja          0000003A
  00000034: 32 C0              xor         al,al
  00000036: EB 04              jmp         0000003C
  00000038: EB 02              jmp         0000003C
  0000003A: B0 01              mov         al,1
  0000003C: 83 C4 04           add         esp,4
  0000003F: 3B EC              cmp         ebp,esp
  00000041: E8 00 00 00 00     call        00000046
  00000046: 8B E5              mov         esp,ebp
  00000048: 5D                 pop         ebp
  00000049: C2 04 00           ret         4

?setp@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IAEXPAD0@Z (protected: void __thiscall std::basic_streambuf<char,struct std::char_traits<char> >::setp(char *,char *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 48 14           mov         ecx,dword ptr [eax+14h]
  00000014: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000017: 89 11              mov         dword ptr [ecx],edx
  00000019: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001C: 8B 48 24           mov         ecx,dword ptr [eax+24h]
  0000001F: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000022: 89 11              mov         dword ptr [ecx],edx
  00000024: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000027: 2B 45 08           sub         eax,dword ptr [ebp+8]
  0000002A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000002D: 8B 51 34           mov         edx,dword ptr [ecx+34h]
  00000030: 89 02              mov         dword ptr [edx],eax
  00000032: 8B E5              mov         esp,ebp
  00000034: 5D                 pop         ebp
  00000035: C2 08 00           ret         8

??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z (public: __thiscall std::_String_const_iterator<char,struct std::char_traits<char>,class std::allocator<char> >::_String_const_iterator<char,struct std::char_traits<char>,class std::allocator<char> >(char const *,class std::_Container_base_secure const *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z]
  00000010: 50                 push        eax
  00000011: 51                 push        ecx
  00000012: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000019: A1 00 00 00 00     mov         eax,[??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z]
  0000001E: 33 C5              xor         eax,ebp
  00000020: 50                 push        eax
  00000021: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000024: 64 A3 00 00 00 00  mov         fs:[??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z],eax
  0000002A: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  0000002D: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000030: E8 00 00 00 00     call        00000035
  00000035: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z
            00
  0000003C: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  00000040: 74 63              je          000000A5
  00000042: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  00000046: 74 20              je          00000068
  00000048: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  0000004B: E8 00 00 00 00     call        00000050
  00000050: 3B 45 08           cmp         eax,dword ptr [ebp+8]
  00000053: 77 13              ja          00000068
  00000055: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000058: E8 00 00 00 00     call        0000005D
  0000005D: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000060: 03 41 18           add         eax,dword ptr [ecx+18h]
  00000063: 39 45 08           cmp         dword ptr [ebp+8],eax
  00000066: 76 3D              jbe         000000A5
  00000068: 33 D2              xor         edx,edx
  0000006A: 75 1E              jne         0000008A
  0000006C: 68 00 00 00 00     push        offset ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z
  00000071: 6A 00              push        0
  00000073: 6A 4C              push        4Ch
  00000075: 68 00 00 00 00     push        offset ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z
  0000007A: 6A 02              push        2
  0000007C: E8 00 00 00 00     call        00000081
  00000081: 83 C4 14           add         esp,14h
  00000084: 83 F8 01           cmp         eax,1
  00000087: 75 01              jne         0000008A
  00000089: CC                 int         3
  0000008A: 6A 00              push        0
  0000008C: 6A 4C              push        4Ch
  0000008E: 68 00 00 00 00     push        offset ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z
  00000093: 68 00 00 00 00     push        offset ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z
  00000098: 68 00 00 00 00     push        offset ??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z
  0000009D: E8 00 00 00 00     call        000000A2
  000000A2: 83 C4 14           add         esp,14h
  000000A5: 33 C9              xor         ecx,ecx
  000000A7: 75 FC              jne         000000A5
  000000A9: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  000000AC: 52                 push        edx
  000000AD: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  000000B0: E8 00 00 00 00     call        000000B5
  000000B5: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  000000B8: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  000000BB: 89 48 08           mov         dword ptr [eax+8],ecx
  000000BE: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000000C5: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  000000C8: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  000000CB: 64 89 0D 00 00 00  mov         dword ptr fs:[??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z],ecx
            00
  000000D2: 59                 pop         ecx
  000000D3: 83 C4 10           add         esp,10h
  000000D6: 3B EC              cmp         ebp,esp
  000000D8: E8 00 00 00 00     call        000000DD
  000000DD: 8B E5              mov         esp,ebp
  000000DF: 5D                 pop         ebp
  000000E0: C2 08 00           ret         8

__unwindfunclet$??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z$0:
  00000000: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000003: E9 00 00 00 00     jmp         __ehhandler$??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z
__ehhandler$??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z:
  00000008: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000000F: 8B 4A F8           mov         ecx,dword ptr [edx-8]
  00000012: 33 C8              xor         ecx,eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??0?$_String_const_iterator@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBDPBV_Container_base_secure@1@@Z$0
  0000001E: E9 00 00 00 00     jmp         00000023

?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z (public: void __thiscall std::_Iterator_base::_Adopt(class std::_Container_base_secure const *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z]
  00000010: 50                 push        eax
  00000011: 83 EC 10           sub         esp,10h
  00000014: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000019: 89 45 E4           mov         dword ptr [ebp-1Ch],eax
  0000001C: 89 45 E8           mov         dword ptr [ebp-18h],eax
  0000001F: 89 45 EC           mov         dword ptr [ebp-14h],eax
  00000022: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000025: A1 00 00 00 00     mov         eax,[?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z]
  0000002A: 33 C5              xor         eax,ebp
  0000002C: 50                 push        eax
  0000002D: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000030: 64 A3 00 00 00 00  mov         fs:[?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z],eax
  00000036: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  00000039: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  0000003C: 8B 08              mov         ecx,dword ptr [eax]
  0000003E: 3B 4D 08           cmp         ecx,dword ptr [ebp+8]
  00000041: 74 51              je          00000094
  00000043: 6A 03              push        3
  00000045: 8D 4D E8           lea         ecx,[ebp-18h]
  00000048: E8 00 00 00 00     call        0000004D
  0000004D: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z
            00
  00000054: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000057: E8 00 00 00 00     call        0000005C
  0000005C: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  00000060: 74 1B              je          0000007D
  00000062: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000065: 83 3A FD           cmp         dword ptr [edx],0FDh
  00000068: 74 13              je          0000007D
  0000006A: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  0000006D: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000070: 8B 11              mov         edx,dword ptr [ecx]
  00000072: 89 50 04           mov         dword ptr [eax+4],edx
  00000075: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000078: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000007B: 89 08              mov         dword ptr [eax],ecx
  0000007D: 8B 55 F0           mov         edx,dword ptr [ebp-10h]
  00000080: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000083: 89 02              mov         dword ptr [edx],eax
  00000085: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  0000008C: 8D 4D E8           lea         ecx,[ebp-18h]
  0000008F: E8 00 00 00 00     call        00000094
  00000094: 52                 push        edx
  00000095: 8B CD              mov         ecx,ebp
  00000097: 50                 push        eax
  00000098: 8D 15 00 00 00 00  lea         edx,[?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z]
  0000009E: E8 00 00 00 00     call        000000A3
  000000A3: 58                 pop         eax
  000000A4: 5A                 pop         edx
  000000A5: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  000000A8: 64 89 0D 00 00 00  mov         dword ptr fs:[?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z],ecx
            00
  000000AF: 59                 pop         ecx
  000000B0: 83 C4 1C           add         esp,1Ch
  000000B3: 3B EC              cmp         ebp,esp
  000000B5: E8 00 00 00 00     call        000000BA
  000000BA: 8B E5              mov         esp,ebp
  000000BC: 5D                 pop         ebp
  000000BD: C2 04 00           ret         4
$LN9:
  000000C0: 01 00              add         dword ptr [eax],eax
  000000C2: 00 00              add         byte ptr [eax],al
  000000C4: 00 00              add         byte ptr [eax],al
  000000C6: 00 00              add         byte ptr [eax],al
$LN8:
  000000C8: E8 FF FF FF 04     call        050000CC
  000000CD: 00 00              add         byte ptr [eax],al
  000000CF: 00 00              add         byte ptr [eax],al
  000000D1: 00 00              add         byte ptr [eax],al
  000000D3: 00 5F 4C           add         byte ptr [edi+4Ch],bl
  000000D6: 6F                 outs        dx,dword ptr [esi]
  000000D7: 63 6B 00           arpl        word ptr [ebx],bp

__unwindfunclet$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z$0:
  00000000: 8D 4D E8           lea         ecx,[ebp-18h]
  00000003: E9 00 00 00 00     jmp         __ehhandler$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z
__ehhandler$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z:
  00000008: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000000F: 8B 4A EC           mov         ecx,dword ptr [edx-14h]
  00000012: 33 C8              xor         ecx,eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: B8 00 00 00 00     mov         eax,offset __unwindfunclet$?_Adopt@_Iterator_base@std@@QAEXPBV_Container_base_secure@2@@Z$0
  0000001E: E9 00 00 00 00     jmp         00000023

??0?$_Ranit_base@DHPBDABDV_Iterator_base@std@@@std@@QAE@XZ (public: __thiscall std::_Ranit_base<char,int,char const *,char const &,class std::_Iterator_base>::_Ranit_base<char,int,char const *,char const &,class std::_Iterator_base>(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000019: 83 C4 04           add         esp,4
  0000001C: 3B EC              cmp         ebp,esp
  0000001E: E8 00 00 00 00     call        00000023
  00000023: 8B E5              mov         esp,ebp
  00000025: 5D                 pop         ebp
  00000026: C3                 ret

??0_Iterator_base@std@@QAE@XZ (public: __thiscall std::_Iterator_base::_Iterator_base(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??0_Iterator_base@std@@QAE@XZ
  00000017: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001A: C7 41 04 00 00 00  mov         dword ptr [ecx+4],offset ??0_Iterator_base@std@@QAE@XZ
            00
  00000021: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000024: 8B E5              mov         esp,ebp
  00000026: 5D                 pop         ebp
  00000027: C3                 ret

?allocate@?$allocator@D@std@@QAEPADI@Z (public: char * __thiscall std::allocator<char>::allocate(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 6A 00              push        0
  00000010: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000013: 50                 push        eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: 83 C4 08           add         esp,8
  0000001C: 83 C4 04           add         esp,4
  0000001F: 3B EC              cmp         ebp,esp
  00000021: E8 00 00 00 00     call        00000026
  00000026: 8B E5              mov         esp,ebp
  00000028: 5D                 pop         ebp
  00000029: C2 04 00           ret         4

?max_size@?$allocator@D@std@@QBEIXZ (public: unsigned int __thiscall std::allocator<char>::max_size(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 0C           sub         esp,0Ch
  00000006: C7 45 F4 CC CC CC  mov         dword ptr [ebp-0Ch],0CCCCCCCCh
            CC
  0000000D: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  00000014: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000001B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000001E: C7 45 F8 FF FF FF  mov         dword ptr [ebp-8],0FFFFFFFFh
            FF
  00000025: 83 7D F8 00        cmp         dword ptr [ebp-8],0
  00000029: 76 08              jbe         00000033
  0000002B: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  0000002E: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000031: EB 07              jmp         0000003A
  00000033: C7 45 F4 01 00 00  mov         dword ptr [ebp-0Ch],1
            00
  0000003A: 8B 45 F4           mov         eax,dword ptr [ebp-0Ch]
  0000003D: 8B E5              mov         esp,ebp
  0000003F: 5D                 pop         ebp
  00000040: C3                 ret

??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z (void __cdecl std::_Debug_pointer<char>(char const *,wchar_t const *,unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  00000007: 75 15              jne         0000001E
  00000009: 8B 45 10           mov         eax,dword ptr [ebp+10h]
  0000000C: 50                 push        eax
  0000000D: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000010: 51                 push        ecx
  00000011: 68 00 00 00 00     push        offset ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
  00000016: E8 00 00 00 00     call        0000001B
  0000001B: 83 C4 0C           add         esp,0Ch
  0000001E: 3B EC              cmp         ebp,esp
  00000020: E8 00 00 00 00     call        00000025
  00000025: 5D                 pop         ebp
  00000026: C3                 ret

??$_Debug_pointer@D@std@@YAXPADPB_WI@Z (void __cdecl std::_Debug_pointer<char>(char *,wchar_t const *,unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  00000007: 75 15              jne         0000001E
  00000009: 8B 45 10           mov         eax,dword ptr [ebp+10h]
  0000000C: 50                 push        eax
  0000000D: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000010: 51                 push        ecx
  00000011: 68 00 00 00 00     push        offset ??$_Debug_pointer@D@std@@YAXPADPB_WI@Z
  00000016: E8 00 00 00 00     call        0000001B
  0000001B: 83 C4 0C           add         esp,0Ch
  0000001E: 3B EC              cmp         ebp,esp
  00000020: E8 00 00 00 00     call        00000025
  00000025: 5D                 pop         ebp
  00000026: C3                 ret

??$_DebugHeapDelete@Vfacet@locale@std@@@std@@YAXPAVfacet@locale@0@@Z (void __cdecl std::_DebugHeapDelete<class std::locale::facet>(class std::locale::facet *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 56                 push        esi
  00000004: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  00000008: 74 23              je          0000002D
  0000000A: 8B F4              mov         esi,esp
  0000000C: 6A 00              push        0
  0000000E: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000011: 8B 10              mov         edx,dword ptr [eax]
  00000013: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000016: 8B 02              mov         eax,dword ptr [edx]
  00000018: FF D0              call        eax
  0000001A: 3B F4              cmp         esi,esp
  0000001C: E8 00 00 00 00     call        00000021
  00000021: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000024: 51                 push        ecx
  00000025: E8 00 00 00 00     call        0000002A
  0000002A: 83 C4 04           add         esp,4
  0000002D: 5E                 pop         esi
  0000002E: 3B EC              cmp         ebp,esp
  00000030: E8 00 00 00 00     call        00000035
  00000035: 5D                 pop         ebp
  00000036: C3                 ret

??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z (class std::ctype<char> const & __cdecl std::use_facet<class std::ctype<char> >(class std::locale const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z]
  00000010: 50                 push        eax
  00000011: 83 EC 34           sub         esp,34h
  00000014: 57                 push        edi
  00000015: 8D 7D C0           lea         edi,[ebp-40h]
  00000018: B9 0D 00 00 00     mov         ecx,0Dh
  0000001D: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000022: F3 AB              rep stos    dword ptr [edi]
  00000024: A1 00 00 00 00     mov         eax,[??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z]
  00000029: 33 C5              xor         eax,ebp
  0000002B: 50                 push        eax
  0000002C: 8D 45 F4           lea         eax,[ebp-0Ch]
  0000002F: 64 A3 00 00 00 00  mov         fs:[??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z],eax
  00000035: 6A 00              push        0
  00000037: 8D 4D EC           lea         ecx,[ebp-14h]
  0000003A: E8 00 00 00 00     call        0000003F
  0000003F: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
            00
  00000046: A1 00 00 00 00     mov         eax,[??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z]
  0000004B: 89 45 E0           mov         dword ptr [ebp-20h],eax
  0000004E: B9 00 00 00 00     mov         ecx,offset ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  00000053: E8 00 00 00 00     call        00000058
  00000058: 89 45 D8           mov         dword ptr [ebp-28h],eax
  0000005B: 8B 4D D8           mov         ecx,dword ptr [ebp-28h]
  0000005E: 51                 push        ecx
  0000005F: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000062: E8 00 00 00 00     call        00000067
  00000067: 89 45 D4           mov         dword ptr [ebp-2Ch],eax
  0000006A: 83 7D D4 00        cmp         dword ptr [ebp-2Ch],0
  0000006E: 74 02              je          00000072
  00000070: EB 65              jmp         000000D7
  00000072: 83 7D E0 00        cmp         dword ptr [ebp-20h],0
  00000076: 74 08              je          00000080
  00000078: 8B 55 E0           mov         edx,dword ptr [ebp-20h]
  0000007B: 89 55 D4           mov         dword ptr [ebp-2Ch],edx
  0000007E: EB 57              jmp         000000D7
  00000080: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000083: 50                 push        eax
  00000084: 8D 4D E0           lea         ecx,[ebp-20h]
  00000087: 51                 push        ecx
  00000088: E8 00 00 00 00     call        0000008D
  0000008D: 83 C4 08           add         esp,8
  00000090: 83 F8 FF           cmp         eax,0FFh
  00000093: 75 1D              jne         000000B2
  00000095: 68 00 00 00 00     push        offset ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  0000009A: 8D 4D C4           lea         ecx,[ebp-3Ch]
  0000009D: E8 00 00 00 00     call        000000A2
  000000A2: 68 00 00 00 00     push        offset ??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
  000000A7: 8D 55 C4           lea         edx,[ebp-3Ch]
  000000AA: 52                 push        edx
  000000AB: E8 00 00 00 00     call        000000B0
  000000B0: EB 25              jmp         000000D7
  000000B2: 8B 45 E0           mov         eax,dword ptr [ebp-20h]
  000000B5: 89 45 D4           mov         dword ptr [ebp-2Ch],eax
  000000B8: 8B 4D E0           mov         ecx,dword ptr [ebp-20h]
  000000BB: 89 0D 00 00 00 00  mov         dword ptr [??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z],ecx
  000000C1: 8B 55 E0           mov         edx,dword ptr [ebp-20h]
  000000C4: 89 55 D0           mov         dword ptr [ebp-30h],edx
  000000C7: 8B 4D D0           mov         ecx,dword ptr [ebp-30h]
  000000CA: E8 00 00 00 00     call        000000CF
  000000CF: 8B 4D D0           mov         ecx,dword ptr [ebp-30h]
  000000D2: E8 00 00 00 00     call        000000D7
  000000D7: 8B 45 D4           mov         eax,dword ptr [ebp-2Ch]
  000000DA: 89 45 C0           mov         dword ptr [ebp-40h],eax
  000000DD: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000000E4: 8D 4D EC           lea         ecx,[ebp-14h]
  000000E7: E8 00 00 00 00     call        000000EC
  000000EC: 8B 45 C0           mov         eax,dword ptr [ebp-40h]
  000000EF: 52                 push        edx
  000000F0: 8B CD              mov         ecx,ebp
  000000F2: 50                 push        eax
  000000F3: 8D 15 00 00 00 00  lea         edx,[??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z]
  000000F9: E8 00 00 00 00     call        000000FE
  000000FE: 58                 pop         eax
  000000FF: 5A                 pop         edx
  00000100: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000103: 64 89 0D 00 00 00  mov         dword ptr fs:[??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z],ecx
            00
  0000010A: 59                 pop         ecx
  0000010B: 5F                 pop         edi
  0000010C: 83 C4 40           add         esp,40h
  0000010F: 3B EC              cmp         ebp,esp
  00000111: E8 00 00 00 00     call        00000116
  00000116: 8B E5              mov         esp,ebp
  00000118: 5D                 pop         ebp
  00000119: C3                 ret
  0000011A: 8B FF              mov         edi,edi
$LN14:
  0000011C: 02 00              add         al,byte ptr [eax]
  0000011E: 00 00              add         byte ptr [eax],al
  00000120: 00 00              add         byte ptr [eax],al
  00000122: 00 00              add         byte ptr [eax],al
$LN13:
  00000124: EC                 in          al,dx
  00000125: FF
  00000126: FF
  00000127: FF 04 00           inc         dword ptr [eax+eax]
  0000012A: 00 00              add         byte ptr [eax],al
  0000012C: 00 00              add         byte ptr [eax],al
  0000012E: 00 00              add         byte ptr [eax],al
  00000130: E0 FF              loopne      00000131
  00000132: FF
  00000133: FF 04 00           inc         dword ptr [eax+eax]
  00000136: 00 00              add         byte ptr [eax],al
  00000138: 00 00              add         byte ptr [eax],al
  0000013A: 00 00              add         byte ptr [eax],al
$LN11:
  0000013C: 5F                 pop         edi
  0000013D: 50                 push        eax
  0000013E: 73 61              jae         000001A1
  00000140: 76 65              jbe         000001A7
  00000142: 00 5F 4C           add         byte ptr [edi+4Ch],bl
  00000145: 6F                 outs        dx,dword ptr [esi]
  00000146: 63 6B 00           arpl        word ptr [ebx],bp

__unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0:
  00000000: 8D 4D EC           lea         ecx,[ebp-14h]
  00000003: E9 00 00 00 00     jmp         __ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z
__ehhandler$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z:
  00000008: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000000F: 8B 4A C4           mov         ecx,dword ptr [edx-3Ch]
  00000012: 33 C8              xor         ecx,eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??$use_facet@V?$ctype@D@std@@@std@@YAABV?$ctype@D@0@ABVlocale@0@@Z$0
  0000001E: E9 00 00 00 00     jmp         00000023

??Bid@locale@std@@QAEIXZ (public: __thiscall std::locale::id::operator unsigned int(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 10           sub         esp,10h
  00000006: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000B: 89 45 F0           mov         dword ptr [ebp-10h],eax
  0000000E: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000011: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000014: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000017: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000001A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001D: 83 38 00           cmp         dword ptr [eax],0
  00000020: 75 34              jne         00000056
  00000022: 6A 00              push        0
  00000024: 8D 4D F4           lea         ecx,[ebp-0Ch]
  00000027: E8 00 00 00 00     call        0000002C
  0000002C: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000002F: 83 39 00           cmp         dword ptr [ecx],0
  00000032: 75 1A              jne         0000004E
  00000034: 8B 15 00 00 00 00  mov         edx,dword ptr [??Bid@locale@std@@QAEIXZ]
  0000003A: 83 C2 01           add         edx,1
  0000003D: 89 15 00 00 00 00  mov         dword ptr [??Bid@locale@std@@QAEIXZ],edx
  00000043: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000046: 8B 0D 00 00 00 00  mov         ecx,dword ptr [??Bid@locale@std@@QAEIXZ]
  0000004C: 89 08              mov         dword ptr [eax],ecx
  0000004E: 8D 4D F4           lea         ecx,[ebp-0Ch]
  00000051: E8 00 00 00 00     call        00000056
  00000056: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000059: 8B 02              mov         eax,dword ptr [edx]
  0000005B: 52                 push        edx
  0000005C: 8B CD              mov         ecx,ebp
  0000005E: 50                 push        eax
  0000005F: 8D 15 00 00 00 00  lea         edx,[??Bid@locale@std@@QAEIXZ]
  00000065: E8 00 00 00 00     call        0000006A
  0000006A: 58                 pop         eax
  0000006B: 5A                 pop         edx
  0000006C: 83 C4 10           add         esp,10h
  0000006F: 3B EC              cmp         ebp,esp
  00000071: E8 00 00 00 00     call        00000076
  00000076: 8B E5              mov         esp,ebp
  00000078: 5D                 pop         ebp
  00000079: C3                 ret
  0000007A: 8B FF              mov         edi,edi
$LN8:
  0000007C: 01 00              add         dword ptr [eax],eax
  0000007E: 00 00              add         byte ptr [eax],al
  00000080: 00 00              add         byte ptr [eax],al
  00000082: 00 00              add         byte ptr [eax],al
$LN7:
  00000084: F4                 hlt
  00000085: FF
  00000086: FF
  00000087: FF 04 00           inc         dword ptr [eax+eax]
  0000008A: 00 00              add         byte ptr [eax],al
  0000008C: 00 00              add         byte ptr [eax],al
  0000008E: 00 00              add         byte ptr [eax],al
$LN6:
  00000090: 5F                 pop         edi
  00000091: 4C                 dec         esp
  00000092: 6F                 outs        dx,dword ptr [esi]
  00000093: 63 6B 00           arpl        word ptr [ebx],bp

?_Register@facet@locale@std@@QAEXXZ (public: void __thiscall std::locale::facet::_Register(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 50                 push        eax
  00000012: E8 00 00 00 00     call        00000017
  00000017: 83 C4 04           add         esp,4
  0000001A: 83 C4 04           add         esp,4
  0000001D: 3B EC              cmp         ebp,esp
  0000001F: E8 00 00 00 00     call        00000024
  00000024: 8B E5              mov         esp,ebp
  00000026: 5D                 pop         ebp
  00000027: C3                 ret

?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z (public: class std::locale::facet const * __thiscall std::locale::_Getfacet(unsigned int)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 14           sub         esp,14h
  00000006: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000B: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000000E: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000011: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000014: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000017: 89 45 FC           mov         dword ptr [ebp-4],eax
  0000001A: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000001D: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000020: 8B 08              mov         ecx,dword ptr [eax]
  00000022: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000025: 3B 51 0C           cmp         edx,dword ptr [ecx+0Ch]
  00000028: 73 13              jae         0000003D
  0000002A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002D: 8B 08              mov         ecx,dword ptr [eax]
  0000002F: 8B 51 08           mov         edx,dword ptr [ecx+8]
  00000032: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000035: 8B 0C 82           mov         ecx,dword ptr [edx+eax*4]
  00000038: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  0000003B: EB 07              jmp         00000044
  0000003D: C7 45 F0 00 00 00  mov         dword ptr [ebp-10h],offset ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
            00
  00000044: 8B 55 F0           mov         edx,dword ptr [ebp-10h]
  00000047: 89 55 F8           mov         dword ptr [ebp-8],edx
  0000004A: 83 7D F8 00        cmp         dword ptr [ebp-8],0
  0000004E: 75 0D              jne         0000005D
  00000050: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000053: 8B 08              mov         ecx,dword ptr [eax]
  00000055: 0F B6 51 14        movzx       edx,byte ptr [ecx+14h]
  00000059: 85 D2              test        edx,edx
  0000005B: 75 07              jne         00000064
  0000005D: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  00000060: EB 30              jmp         00000092
  00000062: EB 2E              jmp         00000092
  00000064: E8 00 00 00 00     call        00000069
  00000069: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  0000006C: 8B 45 F4           mov         eax,dword ptr [ebp-0Ch]
  0000006F: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000072: 3B 48 0C           cmp         ecx,dword ptr [eax+0Ch]
  00000075: 73 11              jae         00000088
  00000077: 8B 55 F4           mov         edx,dword ptr [ebp-0Ch]
  0000007A: 8B 42 08           mov         eax,dword ptr [edx+8]
  0000007D: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000080: 8B 14 88           mov         edx,dword ptr [eax+ecx*4]
  00000083: 89 55 EC           mov         dword ptr [ebp-14h],edx
  00000086: EB 07              jmp         0000008F
  00000088: C7 45 EC 00 00 00  mov         dword ptr [ebp-14h],offset ?_Getfacet@locale@std@@QBEPBVfacet@12@I@Z
            00
  0000008F: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000092: 83 C4 14           add         esp,14h
  00000095: 3B EC              cmp         ebp,esp
  00000097: E8 00 00 00 00     call        0000009C
  0000009C: 8B E5              mov         esp,ebp
  0000009E: 5D                 pop         ebp
  0000009F: C2 04 00           ret         4

?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z (public: static unsigned int __cdecl std::ctype<char>::_Getcat(class std::locale::facet const * *,class std::locale const *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z]
  00000010: 50                 push        eax
  00000011: 81 EC C8 00 00 00  sub         esp,0C8h
  00000017: 57                 push        edi
  00000018: 8D BD 2C FF FF FF  lea         edi,[ebp-0D4h]
  0000001E: B9 32 00 00 00     mov         ecx,32h
  00000023: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000028: F3 AB              rep stos    dword ptr [edi]
  0000002A: A1 00 00 00 00     mov         eax,[?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z]
  0000002F: 33 C5              xor         eax,ebp
  00000031: 50                 push        eax
  00000032: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000035: 64 A3 00 00 00 00  mov         fs:[?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z],eax
  0000003B: C7 85 40 FF FF FF  mov         dword ptr [ebp-0C0h],offset ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
            00 00 00 00
  00000045: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  00000049: 0F 84 31 01 00 00  je          00000180
  0000004F: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000052: 83 38 00           cmp         dword ptr [eax],0
  00000055: 0F 85 25 01 00 00  jne         00000180
  0000005B: E8 00 00 00 00     call        00000060
  00000060: 89 45 E8           mov         dword ptr [ebp-18h],eax
  00000063: 68 00 07 00 00     push        700h
  00000068: 68 00 00 00 00     push        offset ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0000006D: 8B 4D E8           mov         ecx,dword ptr [ebp-18h]
  00000070: 51                 push        ecx
  00000071: 6A 18              push        18h
  00000073: E8 00 00 00 00     call        00000078
  00000078: 83 C4 10           add         esp,10h
  0000007B: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000007E: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
            00
  00000085: 83 7D EC 00        cmp         dword ptr [ebp-14h],0
  00000089: 0F 84 87 00 00 00  je          00000116
  0000008F: 6A 00              push        0
  00000091: 8D 95 44 FF FF FF  lea         edx,[ebp-0BCh]
  00000097: 52                 push        edx
  00000098: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  0000009B: E8 00 00 00 00     call        000000A0
  000000A0: 89 85 3C FF FF FF  mov         dword ptr [ebp-0C4h],eax
  000000A6: 8B 85 3C FF FF FF  mov         eax,dword ptr [ebp-0C4h]
  000000AC: 89 85 38 FF FF FF  mov         dword ptr [ebp-0C8h],eax
  000000B2: C6 45 FC 01        mov         byte ptr [ebp-4],1
  000000B6: 8B 8D 40 FF FF FF  mov         ecx,dword ptr [ebp-0C0h]
  000000BC: 83 C9 01           or          ecx,1
  000000BF: 89 8D 40 FF FF FF  mov         dword ptr [ebp-0C0h],ecx
  000000C5: 8B 95 38 FF FF FF  mov         edx,dword ptr [ebp-0C8h]
  000000CB: 52                 push        edx
  000000CC: 8D 8D 64 FF FF FF  lea         ecx,[ebp-9Ch]
  000000D2: E8 00 00 00 00     call        000000D7
  000000D7: 89 85 34 FF FF FF  mov         dword ptr [ebp-0CCh],eax
  000000DD: 8B 85 34 FF FF FF  mov         eax,dword ptr [ebp-0CCh]
  000000E3: 89 85 30 FF FF FF  mov         dword ptr [ebp-0D0h],eax
  000000E9: C7 45 FC 02 00 00  mov         dword ptr [ebp-4],2
            00
  000000F0: 8B 8D 40 FF FF FF  mov         ecx,dword ptr [ebp-0C0h]
  000000F6: 83 C9 02           or          ecx,2
  000000F9: 89 8D 40 FF FF FF  mov         dword ptr [ebp-0C0h],ecx
  000000FF: 8B 95 30 FF FF FF  mov         edx,dword ptr [ebp-0D0h]
  00000105: 52                 push        edx
  00000106: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000109: E8 00 00 00 00     call        0000010E
  0000010E: 89 85 2C FF FF FF  mov         dword ptr [ebp-0D4h],eax
  00000114: EB 0A              jmp         00000120
  00000116: C7 85 2C FF FF FF  mov         dword ptr [ebp-0D4h],offset ?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
            00 00 00 00
  00000120: 8B 85 2C FF FF FF  mov         eax,dword ptr [ebp-0D4h]
  00000126: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000129: C7 45 FC 04 00 00  mov         dword ptr [ebp-4],4
            00
  00000130: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000133: 8B 55 F0           mov         edx,dword ptr [ebp-10h]
  00000136: 89 11              mov         dword ptr [ecx],edx
  00000138: C7 45 FC 03 00 00  mov         dword ptr [ebp-4],3
            00
  0000013F: 8B 85 40 FF FF FF  mov         eax,dword ptr [ebp-0C0h]
  00000145: 83 E0 02           and         eax,2
  00000148: 74 12              je          0000015C
  0000014A: 83 A5 40 FF FF FF  and         dword ptr [ebp-0C0h],0FDh
            FD
  00000151: 8D 8D 64 FF FF FF  lea         ecx,[ebp-9Ch]
  00000157: E8 00 00 00 00     call        0000015C
  0000015C: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000163: 8B 8D 40 FF FF FF  mov         ecx,dword ptr [ebp-0C0h]
  00000169: 83 E1 01           and         ecx,1
  0000016C: 74 12              je          00000180
  0000016E: 83 A5 40 FF FF FF  and         dword ptr [ebp-0C0h],0FEh
            FE
  00000175: 8D 8D 44 FF FF FF  lea         ecx,[ebp-0BCh]
  0000017B: E8 00 00 00 00     call        00000180
  00000180: B8 02 00 00 00     mov         eax,2
  00000185: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000188: 64 89 0D 00 00 00  mov         dword ptr fs:[?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z],ecx
            00
  0000018F: 59                 pop         ecx
  00000190: 5F                 pop         edi
  00000191: 81 C4 D4 00 00 00  add         esp,0D4h
  00000197: 3B EC              cmp         ebp,esp
  00000199: E8 00 00 00 00     call        0000019E
  0000019E: 8B E5              mov         esp,ebp
  000001A0: 5D                 pop         ebp
  000001A1: C3                 ret

__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000000: 68 00 07 00 00     push        700h
  00000005: 68 00 00 00 00     push        offset __unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
  0000000A: 8B 45 E8           mov         eax,dword ptr [ebp-18h]
  0000000D: 50                 push        eax
  0000000E: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000011: 51                 push        ecx
  00000012: E8 00 00 00 00     call        00000017
  00000017: 83 C4 10           add         esp,10h
  0000001A: C3                 ret
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000001B: 8B 85 40 FF FF FF  mov         eax,dword ptr [ebp-0C0h]
  00000021: 83 E0 01           and         eax,1
  00000024: 0F 84 12 00 00 00  je          $LN8
  0000002A: 83 A5 40 FF FF FF  and         dword ptr [ebp-0C0h],0FEh
            FE
  00000031: 8D 8D 44 FF FF FF  lea         ecx,[ebp-0BCh]
  00000037: E9 00 00 00 00     jmp         $LN8
$LN8:
  0000003C: C3                 ret
__unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2:
  0000003D: 8B 85 40 FF FF FF  mov         eax,dword ptr [ebp-0C0h]
  00000043: 83 E0 02           and         eax,2
  00000046: 0F 84 12 00 00 00  je          $LN10
  0000004C: 83 A5 40 FF FF FF  and         dword ptr [ebp-0C0h],0FDh
            FD
  00000053: 8D 8D 64 FF FF FF  lea         ecx,[ebp-9Ch]
  00000059: E9 00 00 00 00     jmp         $LN10
$LN10:
  0000005E: C3                 ret
__ehhandler$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0000005F: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  00000063: 8D 42 0C           lea         eax,[edx+0Ch]
  00000066: 8B 8A 30 FF FF FF  mov         ecx,dword ptr [edx-0D0h]
  0000006C: 33 C8              xor         ecx,eax
  0000006E: E8 00 00 00 00     call        00000073
  00000073: B8 00 00 00 00     mov         eax,offset __unwindfunclet$?_Getcat@?$ctype@D@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
  00000078: E9 00 00 00 00     jmp         0000007D

??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z (public: __thiscall std::_Locinfo::_Locinfo(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z]
  00000010: 50                 push        eax
  00000011: 51                 push        ecx
  00000012: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000019: A1 00 00 00 00     mov         eax,[??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z]
  0000001E: 33 C5              xor         eax,ebp
  00000020: 50                 push        eax
  00000021: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000024: 64 A3 00 00 00 00  mov         fs:[??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z],eax
  0000002A: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  0000002D: 6A 00              push        0
  0000002F: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000032: E8 00 00 00 00     call        00000037
  00000037: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
            00
  0000003E: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000041: 83 C1 04           add         ecx,4
  00000044: E8 00 00 00 00     call        00000049
  00000049: C6 45 FC 01        mov         byte ptr [ebp-4],1
  0000004D: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000050: 83 C1 24           add         ecx,24h
  00000053: E8 00 00 00 00     call        00000058
  00000058: C6 45 FC 02        mov         byte ptr [ebp-4],2
  0000005C: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000005F: 83 C1 44           add         ecx,44h
  00000062: E8 00 00 00 00     call        00000067
  00000067: C6 45 FC 03        mov         byte ptr [ebp-4],3
  0000006B: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000006E: 83 C1 64           add         ecx,64h
  00000071: E8 00 00 00 00     call        00000076
  00000076: C6 45 FC 04        mov         byte ptr [ebp-4],4
  0000007A: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000007D: 50                 push        eax
  0000007E: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000081: 51                 push        ecx
  00000082: E8 00 00 00 00     call        00000087
  00000087: 83 C4 08           add         esp,8
  0000008A: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000091: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000094: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000097: 64 89 0D 00 00 00  mov         dword ptr fs:[??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z],ecx
            00
  0000009E: 59                 pop         ecx
  0000009F: 83 C4 10           add         esp,10h
  000000A2: 3B EC              cmp         ebp,esp
  000000A4: E8 00 00 00 00     call        000000A9
  000000A9: 8B E5              mov         esp,ebp
  000000AB: 5D                 pop         ebp
  000000AC: C2 04 00           ret         4

__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0:
  00000000: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000003: E9 00 00 00 00     jmp         __unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$1:
  00000008: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000000B: 83 C1 04           add         ecx,4
  0000000E: E9 00 00 00 00     jmp         __unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$2:
  00000013: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000016: 83 C1 24           add         ecx,24h
  00000019: E9 00 00 00 00     jmp         __unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$3:
  0000001E: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000021: 83 C1 44           add         ecx,44h
  00000024: E9 00 00 00 00     jmp         __unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$4
__unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$4:
  00000029: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000002C: 83 C1 64           add         ecx,64h
  0000002F: E9 00 00 00 00     jmp         __ehhandler$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z
__ehhandler$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z:
  00000034: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  00000038: 8D 42 0C           lea         eax,[edx+0Ch]
  0000003B: 8B 4A F8           mov         ecx,dword ptr [edx-8]
  0000003E: 33 C8              xor         ecx,eax
  00000040: E8 00 00 00 00     call        00000045
  00000045: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??0_Locinfo@std@@QAE@ABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@@Z$0
  0000004A: E9 00 00 00 00     jmp         0000004F

??1_Locinfo@std@@QAE@XZ (public: __thiscall std::_Locinfo::~_Locinfo(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??1_Locinfo@std@@QAE@XZ
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??1_Locinfo@std@@QAE@XZ]
  00000010: 50                 push        eax
  00000011: 51                 push        ecx
  00000012: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000019: A1 00 00 00 00     mov         eax,[??1_Locinfo@std@@QAE@XZ]
  0000001E: 33 C5              xor         eax,ebp
  00000020: 50                 push        eax
  00000021: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000024: 64 A3 00 00 00 00  mov         fs:[??1_Locinfo@std@@QAE@XZ],eax
  0000002A: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  0000002D: C7 45 FC 04 00 00  mov         dword ptr [ebp-4],4
            00
  00000034: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000037: 50                 push        eax
  00000038: E8 00 00 00 00     call        0000003D
  0000003D: 83 C4 04           add         esp,4
  00000040: C6 45 FC 03        mov         byte ptr [ebp-4],3
  00000044: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000047: 83 C1 64           add         ecx,64h
  0000004A: E8 00 00 00 00     call        0000004F
  0000004F: C6 45 FC 02        mov         byte ptr [ebp-4],2
  00000053: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000056: 83 C1 44           add         ecx,44h
  00000059: E8 00 00 00 00     call        0000005E
  0000005E: C6 45 FC 01        mov         byte ptr [ebp-4],1
  00000062: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000065: 83 C1 24           add         ecx,24h
  00000068: E8 00 00 00 00     call        0000006D
  0000006D: C6 45 FC 00        mov         byte ptr [ebp-4],0
  00000071: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000074: 83 C1 04           add         ecx,4
  00000077: E8 00 00 00 00     call        0000007C
  0000007C: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000083: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000086: E8 00 00 00 00     call        0000008B
  0000008B: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  0000008E: 64 89 0D 00 00 00  mov         dword ptr fs:[??1_Locinfo@std@@QAE@XZ],ecx
            00
  00000095: 59                 pop         ecx
  00000096: 83 C4 10           add         esp,10h
  00000099: 3B EC              cmp         ebp,esp
  0000009B: E8 00 00 00 00     call        000000A0
  000000A0: 8B E5              mov         esp,ebp
  000000A2: 5D                 pop         ebp
  000000A3: C3                 ret

__unwindfunclet$??1_Locinfo@std@@QAE@XZ$0:
  00000000: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000003: E9 00 00 00 00     jmp         __unwindfunclet$??1_Locinfo@std@@QAE@XZ$1
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$1:
  00000008: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000000B: 83 C1 04           add         ecx,4
  0000000E: E9 00 00 00 00     jmp         __unwindfunclet$??1_Locinfo@std@@QAE@XZ$2
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$2:
  00000013: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000016: 83 C1 24           add         ecx,24h
  00000019: E9 00 00 00 00     jmp         __unwindfunclet$??1_Locinfo@std@@QAE@XZ$3
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$3:
  0000001E: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000021: 83 C1 44           add         ecx,44h
  00000024: E9 00 00 00 00     jmp         __unwindfunclet$??1_Locinfo@std@@QAE@XZ$4
__unwindfunclet$??1_Locinfo@std@@QAE@XZ$4:
  00000029: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000002C: 83 C1 64           add         ecx,64h
  0000002F: E9 00 00 00 00     jmp         __ehhandler$??1_Locinfo@std@@QAE@XZ
__ehhandler$??1_Locinfo@std@@QAE@XZ:
  00000034: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  00000038: 8D 42 0C           lea         eax,[edx+0Ch]
  0000003B: 8B 4A F8           mov         ecx,dword ptr [edx-8]
  0000003E: 33 C8              xor         ecx,eax
  00000040: E8 00 00 00 00     call        00000045
  00000045: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??1_Locinfo@std@@QAE@XZ$0
  0000004A: E9 00 00 00 00     jmp         0000004F

??2facet@locale@std@@SAPAXIABU_DebugHeapTag_t@2@PADH@Z (public: static void * __cdecl std::locale::facet::operator new(unsigned int,struct std::_DebugHeapTag_t const &,char *,int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  00000006: 50                 push        eax
  00000007: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  0000000A: 51                 push        ecx
  0000000B: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  0000000E: 52                 push        edx
  0000000F: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000012: 50                 push        eax
  00000013: E8 00 00 00 00     call        00000018
  00000018: 83 C4 10           add         esp,10h
  0000001B: 3B EC              cmp         ebp,esp
  0000001D: E8 00 00 00 00     call        00000022
  00000022: 5D                 pop         ebp
  00000023: C3                 ret

??3facet@locale@std@@SAXPAXABU_DebugHeapTag_t@2@PADH@Z (public: static void __cdecl std::locale::facet::operator delete(void *,struct std::_DebugHeapTag_t const &,char *,int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000006: 50                 push        eax
  00000007: E8 00 00 00 00     call        0000000C
  0000000C: 83 C4 04           add         esp,4
  0000000F: 3B EC              cmp         ebp,esp
  00000011: E8 00 00 00 00     call        00000016
  00000016: 5D                 pop         ebp
  00000017: C3                 ret

??3facet@locale@std@@SAXPAX@Z (public: static void __cdecl std::locale::facet::operator delete(void *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000006: 50                 push        eax
  00000007: E8 00 00 00 00     call        0000000C
  0000000C: 83 C4 04           add         esp,4
  0000000F: 3B EC              cmp         ebp,esp
  00000011: E8 00 00 00 00     call        00000016
  00000016: 5D                 pop         ebp
  00000017: C3                 ret

?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ (public: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > __thiscall std::locale::name(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ]
  00000010: 50                 push        eax
  00000011: 83 EC 28           sub         esp,28h
  00000014: 57                 push        edi
  00000015: 51                 push        ecx
  00000016: 8D 7D CC           lea         edi,[ebp-34h]
  00000019: B9 0A 00 00 00     mov         ecx,0Ah
  0000001E: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000023: F3 AB              rep stos    dword ptr [edi]
  00000025: 59                 pop         ecx
  00000026: A1 00 00 00 00     mov         eax,[?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ]
  0000002B: 33 C5              xor         eax,ebp
  0000002D: 50                 push        eax
  0000002E: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000031: 64 A3 00 00 00 00  mov         fs:[?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ],eax
  00000037: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  0000003A: C7 45 CC 00 00 00  mov         dword ptr [ebp-34h],offset ?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ
            00
  00000041: 8D 45 D0           lea         eax,[ebp-30h]
  00000044: 50                 push        eax
  00000045: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000048: 8B 09              mov         ecx,dword ptr [ecx]
  0000004A: 83 C1 18           add         ecx,18h
  0000004D: E8 00 00 00 00     call        00000052
  00000052: C7 45 FC 01 00 00  mov         dword ptr [ebp-4],1
            00
  00000059: 8D 55 D0           lea         edx,[ebp-30h]
  0000005C: 52                 push        edx
  0000005D: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000060: E8 00 00 00 00     call        00000065
  00000065: 8B 45 CC           mov         eax,dword ptr [ebp-34h]
  00000068: 83 C8 01           or          eax,1
  0000006B: 89 45 CC           mov         dword ptr [ebp-34h],eax
  0000006E: C6 45 FC 00        mov         byte ptr [ebp-4],0
  00000072: 8D 4D D0           lea         ecx,[ebp-30h]
  00000075: E8 00 00 00 00     call        0000007A
  0000007A: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000007D: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000080: 64 89 0D 00 00 00  mov         dword ptr fs:[?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ],ecx
            00
  00000087: 59                 pop         ecx
  00000088: 5F                 pop         edi
  00000089: 83 C4 34           add         esp,34h
  0000008C: 3B EC              cmp         ebp,esp
  0000008E: E8 00 00 00 00     call        00000093
  00000093: 8B E5              mov         esp,ebp
  00000095: 5D                 pop         ebp
  00000096: C2 04 00           ret         4

__unwindfunclet$?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0:
  00000000: 8D 4D D0           lea         ecx,[ebp-30h]
  00000003: E9 00 00 00 00     jmp         __unwindfunclet$?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$1
__unwindfunclet$?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$1:
  00000008: 8B 45 CC           mov         eax,dword ptr [ebp-34h]
  0000000B: 83 E0 01           and         eax,1
  0000000E: 0F 84 0C 00 00 00  je          $LN5
  00000014: 83 65 CC FE        and         dword ptr [ebp-34h],0FEh
  00000018: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000001B: E9 00 00 00 00     jmp         $LN5
$LN5:
  00000020: C3                 ret
__ehhandler$?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ:
  00000021: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  00000025: 8D 42 0C           lea         eax,[edx+0Ch]
  00000028: 8B 4A D0           mov         ecx,dword ptr [edx-30h]
  0000002B: 33 C8              xor         ecx,eax
  0000002D: E8 00 00 00 00     call        00000032
  00000032: B8 00 00 00 00     mov         eax,offset __unwindfunclet$?name@locale@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@XZ$0
  00000037: E9 00 00 00 00     jmp         0000003C

??B_DebugHeapString@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ (public: __thiscall std::_DebugHeapString::operator class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000014: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000017: C7 45 F8 00 00 00  mov         dword ptr [ebp-8],offset ??B_DebugHeapString@std@@QBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@XZ
            00
  0000001E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000021: E8 00 00 00 00     call        00000026
  00000026: 50                 push        eax
  00000027: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000002A: E8 00 00 00 00     call        0000002F
  0000002F: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  00000032: 83 C8 01           or          eax,1
  00000035: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000038: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000003B: 83 C4 08           add         esp,8
  0000003E: 3B EC              cmp         ebp,esp
  00000040: E8 00 00 00 00     call        00000045
  00000045: 8B E5              mov         esp,ebp
  00000047: 5D                 pop         ebp
  00000048: C2 04 00           ret         4

??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z (public: __thiscall std::ctype<char>::ctype<char>(class std::_Locinfo const &,unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z]
  00000010: 50                 push        eax
  00000011: 51                 push        ecx
  00000012: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000019: A1 00 00 00 00     mov         eax,[??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z]
  0000001E: 33 C5              xor         eax,ebp
  00000020: 50                 push        eax
  00000021: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000024: 64 A3 00 00 00 00  mov         fs:[??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z],eax
  0000002A: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  0000002D: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000030: 50                 push        eax
  00000031: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000034: E8 00 00 00 00     call        00000039
  00000039: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
            00
  00000040: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000043: C7 01 00 00 00 00  mov         dword ptr [ecx],offset ??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
  00000049: 8B 55 08           mov         edx,dword ptr [ebp+8]
  0000004C: 52                 push        edx
  0000004D: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000050: E8 00 00 00 00     call        00000055
  00000055: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  0000005C: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  0000005F: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000062: 64 89 0D 00 00 00  mov         dword ptr fs:[??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z],ecx
            00
  00000069: 59                 pop         ecx
  0000006A: 83 C4 10           add         esp,10h
  0000006D: 3B EC              cmp         ebp,esp
  0000006F: E8 00 00 00 00     call        00000074
  00000074: 8B E5              mov         esp,ebp
  00000076: 5D                 pop         ebp
  00000077: C2 08 00           ret         8

__unwindfunclet$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z$0:
  00000000: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000003: E9 00 00 00 00     jmp         __ehhandler$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z
__ehhandler$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z:
  00000008: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000000F: 8B 4A F8           mov         ecx,dword ptr [edx-8]
  00000012: 33 C8              xor         ecx,eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??0?$ctype@D@std@@QAE@ABV_Locinfo@1@I@Z$0
  0000001E: E9 00 00 00 00     jmp         00000023

??0ctype_base@std@@QAE@I@Z (public: __thiscall std::ctype_base::ctype_base(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000011: 50                 push        eax
  00000012: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000015: E8 00 00 00 00     call        0000001A
  0000001A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001D: C7 01 00 00 00 00  mov         dword ptr [ecx],offset ??0ctype_base@std@@QAE@I@Z
  00000023: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000026: 83 C4 04           add         esp,4
  00000029: 3B EC              cmp         ebp,esp
  0000002B: E8 00 00 00 00     call        00000030
  00000030: 8B E5              mov         esp,ebp
  00000032: 5D                 pop         ebp
  00000033: C2 04 00           ret         4

??0facet@locale@std@@IAE@I@Z (protected: __thiscall std::locale::facet::facet(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??0facet@locale@std@@IAE@I@Z
  00000017: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001A: 8B 55 08           mov         edx,dword ptr [ebp+8]
  0000001D: 89 51 04           mov         dword ptr [ecx+4],edx
  00000020: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000023: 8B E5              mov         esp,ebp
  00000025: 5D                 pop         ebp
  00000026: C2 04 00           ret         4

??_Gfacet@locale@std@@UAEPAXI@Z (public: virtual void * __thiscall std::locale::facet::`scalar deleting destructor'(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000019: 83 E0 01           and         eax,1
  0000001C: 74 0C              je          0000002A
  0000001E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000021: 51                 push        ecx
  00000022: E8 00 00 00 00     call        00000027
  00000027: 83 C4 04           add         esp,4
  0000002A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002D: 83 C4 04           add         esp,4
  00000030: 3B EC              cmp         ebp,esp
  00000032: E8 00 00 00 00     call        00000037
  00000037: 8B E5              mov         esp,ebp
  00000039: 5D                 pop         ebp
  0000003A: C2 04 00           ret         4

??1facet@locale@std@@UAE@XZ (public: virtual __thiscall std::locale::facet::~facet(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??1facet@locale@std@@UAE@XZ
  00000017: 8B E5              mov         esp,ebp
  00000019: 5D                 pop         ebp
  0000001A: C3                 ret

??1ctype_base@std@@UAE@XZ (public: virtual __thiscall std::ctype_base::~ctype_base(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??1ctype_base@std@@UAE@XZ
  00000017: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001A: E8 00 00 00 00     call        0000001F
  0000001F: 83 C4 04           add         esp,4
  00000022: 3B EC              cmp         ebp,esp
  00000024: E8 00 00 00 00     call        00000029
  00000029: 8B E5              mov         esp,ebp
  0000002B: 5D                 pop         ebp
  0000002C: C3                 ret

??_Gctype_base@std@@UAEPAXI@Z (public: virtual void * __thiscall std::ctype_base::`scalar deleting destructor'(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000019: 83 E0 01           and         eax,1
  0000001C: 74 0C              je          0000002A
  0000001E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000021: 51                 push        ecx
  00000022: E8 00 00 00 00     call        00000027
  00000027: 83 C4 04           add         esp,4
  0000002A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002D: 83 C4 04           add         esp,4
  00000030: 3B EC              cmp         ebp,esp
  00000032: E8 00 00 00 00     call        00000037
  00000037: 8B E5              mov         esp,ebp
  00000039: 5D                 pop         ebp
  0000003A: C2 04 00           ret         4

?_Init@?$ctype@D@std@@IAEXABV_Locinfo@2@@Z (protected: void __thiscall std::ctype<char>::_Init(class std::_Locinfo const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 14           sub         esp,14h
  00000006: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000B: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000000E: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000011: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000014: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000017: 89 45 FC           mov         dword ptr [ebp-4],eax
  0000001A: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000001D: 8D 45 EC           lea         eax,[ebp-14h]
  00000020: 50                 push        eax
  00000021: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000024: E8 00 00 00 00     call        00000029
  00000029: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000002C: 83 C1 08           add         ecx,8
  0000002F: 8B 10              mov         edx,dword ptr [eax]
  00000031: 89 11              mov         dword ptr [ecx],edx
  00000033: 8B 50 04           mov         edx,dword ptr [eax+4]
  00000036: 89 51 04           mov         dword ptr [ecx+4],edx
  00000039: 8B 50 08           mov         edx,dword ptr [eax+8]
  0000003C: 89 51 08           mov         dword ptr [ecx+8],edx
  0000003F: 8B 40 0C           mov         eax,dword ptr [eax+0Ch]
  00000042: 89 41 0C           mov         dword ptr [ecx+0Ch],eax
  00000045: 83 C4 14           add         esp,14h
  00000048: 3B EC              cmp         ebp,esp
  0000004A: E8 00 00 00 00     call        0000004F
  0000004F: 8B E5              mov         esp,ebp
  00000051: 5D                 pop         ebp
  00000052: C2 04 00           ret         4

?_Getctype@_Locinfo@std@@QBE?AU_Ctypevec@@XZ (public: struct _Ctypevec __thiscall std::_Locinfo::_Getctype(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 24           sub         esp,24h
  00000006: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000B: 89 45 DC           mov         dword ptr [ebp-24h],eax
  0000000E: 89 45 E0           mov         dword ptr [ebp-20h],eax
  00000011: 89 45 E4           mov         dword ptr [ebp-1Ch],eax
  00000014: 89 45 E8           mov         dword ptr [ebp-18h],eax
  00000017: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000001A: 89 45 F0           mov         dword ptr [ebp-10h],eax
  0000001D: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000020: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000023: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000026: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000029: 8D 45 DC           lea         eax,[ebp-24h]
  0000002C: 50                 push        eax
  0000002D: E8 00 00 00 00     call        00000032
  00000032: 83 C4 04           add         esp,4
  00000035: 8B 08              mov         ecx,dword ptr [eax]
  00000037: 89 4D EC           mov         dword ptr [ebp-14h],ecx
  0000003A: 8B 50 04           mov         edx,dword ptr [eax+4]
  0000003D: 89 55 F0           mov         dword ptr [ebp-10h],edx
  00000040: 8B 48 08           mov         ecx,dword ptr [eax+8]
  00000043: 89 4D F4           mov         dword ptr [ebp-0Ch],ecx
  00000046: 8B 50 0C           mov         edx,dword ptr [eax+0Ch]
  00000049: 89 55 F8           mov         dword ptr [ebp-8],edx
  0000004C: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000004F: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000052: 89 08              mov         dword ptr [eax],ecx
  00000054: 8B 55 F0           mov         edx,dword ptr [ebp-10h]
  00000057: 89 50 04           mov         dword ptr [eax+4],edx
  0000005A: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  0000005D: 89 48 08           mov         dword ptr [eax+8],ecx
  00000060: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  00000063: 89 50 0C           mov         dword ptr [eax+0Ch],edx
  00000066: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000069: 83 C4 24           add         esp,24h
  0000006C: 3B EC              cmp         ebp,esp
  0000006E: E8 00 00 00 00     call        00000073
  00000073: 8B E5              mov         esp,ebp
  00000075: 5D                 pop         ebp
  00000076: C2 04 00           ret         4

?do_tolower@?$ctype@D@std@@MBEDD@Z (protected: virtual char __thiscall std::ctype<char>::do_tolower(char)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 83 C0 08           add         eax,8
  00000014: 50                 push        eax
  00000015: 0F B6 4D 08        movzx       ecx,byte ptr [ebp+8]
  00000019: 51                 push        ecx
  0000001A: E8 00 00 00 00     call        0000001F
  0000001F: 83 C4 08           add         esp,8
  00000022: 83 C4 04           add         esp,4
  00000025: 3B EC              cmp         ebp,esp
  00000027: E8 00 00 00 00     call        0000002C
  0000002C: 8B E5              mov         esp,ebp
  0000002E: 5D                 pop         ebp
  0000002F: C2 04 00           ret         4

?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z (protected: virtual char const * __thiscall std::ctype<char>::do_tolower(char *,char const *)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 68 23 07 00 00     push        723h
  00000013: 68 00 00 00 00     push        offset ?do_tolower@?$ctype@D@std@@MBEPBDPADPBD@Z
  00000018: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  0000001B: 50                 push        eax
  0000001C: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000001F: 51                 push        ecx
  00000020: E8 00 00 00 00     call        00000025
  00000025: 83 C4 10           add         esp,10h
  00000028: EB 09              jmp         00000033
  0000002A: 8B 55 08           mov         edx,dword ptr [ebp+8]
  0000002D: 83 C2 01           add         edx,1
  00000030: 89 55 08           mov         dword ptr [ebp+8],edx
  00000033: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000036: 3B 45 0C           cmp         eax,dword ptr [ebp+0Ch]
  00000039: 74 1D              je          00000058
  0000003B: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000003E: 83 C1 08           add         ecx,8
  00000041: 51                 push        ecx
  00000042: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000045: 0F B6 02           movzx       eax,byte ptr [edx]
  00000048: 50                 push        eax
  00000049: E8 00 00 00 00     call        0000004E
  0000004E: 83 C4 08           add         esp,8
  00000051: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000054: 88 01              mov         byte ptr [ecx],al
  00000056: EB D2              jmp         0000002A
  00000058: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000005B: 83 C4 04           add         esp,4
  0000005E: 3B EC              cmp         ebp,esp
  00000060: E8 00 00 00 00     call        00000065
  00000065: 8B E5              mov         esp,ebp
  00000067: 5D                 pop         ebp
  00000068: C2 08 00           ret         8

?do_toupper@?$ctype@D@std@@MBEDD@Z (protected: virtual char __thiscall std::ctype<char>::do_toupper(char)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 83 C0 08           add         eax,8
  00000014: 50                 push        eax
  00000015: 0F B6 4D 08        movzx       ecx,byte ptr [ebp+8]
  00000019: 51                 push        ecx
  0000001A: E8 00 00 00 00     call        0000001F
  0000001F: 83 C4 08           add         esp,8
  00000022: 83 C4 04           add         esp,4
  00000025: 3B EC              cmp         ebp,esp
  00000027: E8 00 00 00 00     call        0000002C
  0000002C: 8B E5              mov         esp,ebp
  0000002E: 5D                 pop         ebp
  0000002F: C2 04 00           ret         4

?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z (protected: virtual char const * __thiscall std::ctype<char>::do_toupper(char *,char const *)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 68 31 07 00 00     push        731h
  00000013: 68 00 00 00 00     push        offset ?do_toupper@?$ctype@D@std@@MBEPBDPADPBD@Z
  00000018: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  0000001B: 50                 push        eax
  0000001C: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000001F: 51                 push        ecx
  00000020: E8 00 00 00 00     call        00000025
  00000025: 83 C4 10           add         esp,10h
  00000028: EB 09              jmp         00000033
  0000002A: 8B 55 08           mov         edx,dword ptr [ebp+8]
  0000002D: 83 C2 01           add         edx,1
  00000030: 89 55 08           mov         dword ptr [ebp+8],edx
  00000033: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000036: 3B 45 0C           cmp         eax,dword ptr [ebp+0Ch]
  00000039: 74 1D              je          00000058
  0000003B: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000003E: 83 C1 08           add         ecx,8
  00000041: 51                 push        ecx
  00000042: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000045: 0F B6 02           movzx       eax,byte ptr [edx]
  00000048: 50                 push        eax
  00000049: E8 00 00 00 00     call        0000004E
  0000004E: 83 C4 08           add         esp,8
  00000051: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000054: 88 01              mov         byte ptr [ecx],al
  00000056: EB D2              jmp         0000002A
  00000058: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000005B: 83 C4 04           add         esp,4
  0000005E: 3B EC              cmp         ebp,esp
  00000060: E8 00 00 00 00     call        00000065
  00000065: 8B E5              mov         esp,ebp
  00000067: 5D                 pop         ebp
  00000068: C2 08 00           ret         8

?do_widen@?$ctype@D@std@@MBEDD@Z (protected: virtual char __thiscall std::ctype<char>::do_widen(char)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8A 45 08           mov         al,byte ptr [ebp+8]
  00000011: 8B E5              mov         esp,ebp
  00000013: 5D                 pop         ebp
  00000014: C2 04 00           ret         4

?do_widen@?$ctype@D@std@@MBEPBDPBD0PAD@Z (protected: virtual char const * __thiscall std::ctype<char>::do_widen(char const *,char const *,char *)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: 56                 push        esi
  00000005: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000C: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000F: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000012: 2B 45 08           sub         eax,dword ptr [ebp+8]
  00000015: 8B F4              mov         esi,esp
  00000017: 50                 push        eax
  00000018: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  0000001B: 51                 push        ecx
  0000001C: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  0000001F: 52                 push        edx
  00000020: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000023: 50                 push        eax
  00000024: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000027: 8B 11              mov         edx,dword ptr [ecx]
  00000029: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000002C: 8B 42 1C           mov         eax,dword ptr [edx+1Ch]
  0000002F: FF D0              call        eax
  00000031: 3B F4              cmp         esi,esp
  00000033: E8 00 00 00 00     call        00000038
  00000038: 5E                 pop         esi
  00000039: 83 C4 04           add         esp,4
  0000003C: 3B EC              cmp         ebp,esp
  0000003E: E8 00 00 00 00     call        00000043
  00000043: 8B E5              mov         esp,ebp
  00000045: 5D                 pop         ebp
  00000046: C2 0C 00           ret         0Ch

?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z (protected: virtual char const * __thiscall std::ctype<char>::_Do_widen_s(char const *,char const *,char *,unsigned int)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 68 47 07 00 00     push        747h
  00000013: 68 00 00 00 00     push        offset ?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z
  00000018: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  0000001B: 50                 push        eax
  0000001C: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000001F: 51                 push        ecx
  00000020: E8 00 00 00 00     call        00000025
  00000025: 83 C4 10           add         esp,10h
  00000028: 68 48 07 00 00     push        748h
  0000002D: 68 00 00 00 00     push        offset ?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z
  00000032: 8B 55 10           mov         edx,dword ptr [ebp+10h]
  00000035: 52                 push        edx
  00000036: E8 00 00 00 00     call        0000003B
  0000003B: 83 C4 0C           add         esp,0Ch
  0000003E: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000041: 2B 45 08           sub         eax,dword ptr [ebp+8]
  00000044: 39 45 14           cmp         dword ptr [ebp+14h],eax
  00000047: 73 43              jae         0000008C
  00000049: 33 C9              xor         ecx,ecx
  0000004B: 75 21              jne         0000006E
  0000004D: 68 00 00 00 00     push        offset ?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z
  00000052: 6A 00              push        0
  00000054: 68 49 07 00 00     push        749h
  00000059: 68 00 00 00 00     push        offset ?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z
  0000005E: 6A 02              push        2
  00000060: E8 00 00 00 00     call        00000065
  00000065: 83 C4 14           add         esp,14h
  00000068: 83 F8 01           cmp         eax,1
  0000006B: 75 01              jne         0000006E
  0000006D: CC                 int         3
  0000006E: 6A 00              push        0
  00000070: 68 49 07 00 00     push        749h
  00000075: 68 00 00 00 00     push        offset ?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z
  0000007A: 68 00 00 00 00     push        offset ?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z
  0000007F: 68 00 00 00 00     push        offset ?_Do_widen_s@?$ctype@D@std@@MBEPBDPBD0PADI@Z
  00000084: E8 00 00 00 00     call        00000089
  00000089: 83 C4 14           add         esp,14h
  0000008C: 33 C0              xor         eax,eax
  0000008E: 75 FC              jne         0000008C
  00000090: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000093: 2B 4D 08           sub         ecx,dword ptr [ebp+8]
  00000096: 51                 push        ecx
  00000097: 8B 55 08           mov         edx,dword ptr [ebp+8]
  0000009A: 52                 push        edx
  0000009B: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  0000009E: 50                 push        eax
  0000009F: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  000000A2: 51                 push        ecx
  000000A3: E8 00 00 00 00     call        000000A8
  000000A8: 83 C4 10           add         esp,10h
  000000AB: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  000000AE: 83 C4 04           add         esp,4
  000000B1: 3B EC              cmp         ebp,esp
  000000B3: E8 00 00 00 00     call        000000B8
  000000B8: 8B E5              mov         esp,ebp
  000000BA: 5D                 pop         ebp
  000000BB: C2 10 00           ret         10h

?do_narrow@?$ctype@D@std@@MBEDDD@Z (protected: virtual char __thiscall std::ctype<char>::do_narrow(char,char)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8A 45 08           mov         al,byte ptr [ebp+8]
  00000011: 8B E5              mov         esp,ebp
  00000013: 5D                 pop         ebp
  00000014: C2 08 00           ret         8

?do_narrow@?$ctype@D@std@@MBEPBDPBD0DPAD@Z (protected: virtual char const * __thiscall std::ctype<char>::do_narrow(char const *,char const *,char,char *)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: 56                 push        esi
  00000005: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000C: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000F: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000012: 2B 45 08           sub         eax,dword ptr [ebp+8]
  00000015: 8B F4              mov         esi,esp
  00000017: 50                 push        eax
  00000018: 8B 4D 14           mov         ecx,dword ptr [ebp+14h]
  0000001B: 51                 push        ecx
  0000001C: 0F B6 55 10        movzx       edx,byte ptr [ebp+10h]
  00000020: 52                 push        edx
  00000021: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000024: 50                 push        eax
  00000025: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000028: 51                 push        ecx
  00000029: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000002C: 8B 02              mov         eax,dword ptr [edx]
  0000002E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000031: 8B 50 28           mov         edx,dword ptr [eax+28h]
  00000034: FF D2              call        edx
  00000036: 3B F4              cmp         esi,esp
  00000038: E8 00 00 00 00     call        0000003D
  0000003D: 5E                 pop         esi
  0000003E: 83 C4 04           add         esp,4
  00000041: 3B EC              cmp         ebp,esp
  00000043: E8 00 00 00 00     call        00000048
  00000048: 8B E5              mov         esp,ebp
  0000004A: 5D                 pop         ebp
  0000004B: C2 10 00           ret         10h

?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z (protected: virtual char const * __thiscall std::ctype<char>::_Do_narrow_s(char const *,char const *,char,char *,unsigned int)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 68 60 07 00 00     push        760h
  00000013: 68 00 00 00 00     push        offset ?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z
  00000018: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  0000001B: 50                 push        eax
  0000001C: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000001F: 51                 push        ecx
  00000020: E8 00 00 00 00     call        00000025
  00000025: 83 C4 10           add         esp,10h
  00000028: 68 61 07 00 00     push        761h
  0000002D: 68 00 00 00 00     push        offset ?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z
  00000032: 8B 55 14           mov         edx,dword ptr [ebp+14h]
  00000035: 52                 push        edx
  00000036: E8 00 00 00 00     call        0000003B
  0000003B: 83 C4 0C           add         esp,0Ch
  0000003E: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000041: 2B 45 08           sub         eax,dword ptr [ebp+8]
  00000044: 39 45 18           cmp         dword ptr [ebp+18h],eax
  00000047: 73 43              jae         0000008C
  00000049: 33 C9              xor         ecx,ecx
  0000004B: 75 21              jne         0000006E
  0000004D: 68 00 00 00 00     push        offset ?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z
  00000052: 6A 00              push        0
  00000054: 68 62 07 00 00     push        762h
  00000059: 68 00 00 00 00     push        offset ?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z
  0000005E: 6A 02              push        2
  00000060: E8 00 00 00 00     call        00000065
  00000065: 83 C4 14           add         esp,14h
  00000068: 83 F8 01           cmp         eax,1
  0000006B: 75 01              jne         0000006E
  0000006D: CC                 int         3
  0000006E: 6A 00              push        0
  00000070: 68 62 07 00 00     push        762h
  00000075: 68 00 00 00 00     push        offset ?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z
  0000007A: 68 00 00 00 00     push        offset ?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z
  0000007F: 68 00 00 00 00     push        offset ?_Do_narrow_s@?$ctype@D@std@@MBEPBDPBD0DPADI@Z
  00000084: E8 00 00 00 00     call        00000089
  00000089: 83 C4 14           add         esp,14h
  0000008C: 33 C0              xor         eax,eax
  0000008E: 75 FC              jne         0000008C
  00000090: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000093: 2B 4D 08           sub         ecx,dword ptr [ebp+8]
  00000096: 51                 push        ecx
  00000097: 8B 55 08           mov         edx,dword ptr [ebp+8]
  0000009A: 52                 push        edx
  0000009B: 8B 45 18           mov         eax,dword ptr [ebp+18h]
  0000009E: 50                 push        eax
  0000009F: 8B 4D 14           mov         ecx,dword ptr [ebp+14h]
  000000A2: 51                 push        ecx
  000000A3: E8 00 00 00 00     call        000000A8
  000000A8: 83 C4 10           add         esp,10h
  000000AB: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  000000AE: 83 C4 04           add         esp,4
  000000B1: 3B EC              cmp         ebp,esp
  000000B3: E8 00 00 00 00     call        000000B8
  000000B8: 8B E5              mov         esp,ebp
  000000BA: 5D                 pop         ebp
  000000BB: C2 14 00           ret         14h

??_G?$ctype@D@std@@MAEPAXI@Z (protected: virtual void * __thiscall std::ctype<char>::`scalar deleting destructor'(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000019: 83 E0 01           and         eax,1
  0000001C: 74 0C              je          0000002A
  0000001E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000021: 51                 push        ecx
  00000022: E8 00 00 00 00     call        00000027
  00000027: 83 C4 04           add         esp,4
  0000002A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002D: 83 C4 04           add         esp,4
  00000030: 3B EC              cmp         ebp,esp
  00000032: E8 00 00 00 00     call        00000037
  00000037: 8B E5              mov         esp,ebp
  00000039: 5D                 pop         ebp
  0000003A: C2 04 00           ret         4

??1?$ctype@D@std@@MAE@XZ (protected: virtual __thiscall std::ctype<char>::~ctype<char>(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??1?$ctype@D@std@@MAE@XZ
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??1?$ctype@D@std@@MAE@XZ]
  00000010: 50                 push        eax
  00000011: 51                 push        ecx
  00000012: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000019: A1 00 00 00 00     mov         eax,[??1?$ctype@D@std@@MAE@XZ]
  0000001E: 33 C5              xor         eax,ebp
  00000020: 50                 push        eax
  00000021: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000024: 64 A3 00 00 00 00  mov         fs:[??1?$ctype@D@std@@MAE@XZ],eax
  0000002A: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  0000002D: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000030: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??1?$ctype@D@std@@MAE@XZ
  00000036: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??1?$ctype@D@std@@MAE@XZ
            00
  0000003D: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000040: E8 00 00 00 00     call        00000045
  00000045: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  0000004C: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000004F: E8 00 00 00 00     call        00000054
  00000054: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000057: 64 89 0D 00 00 00  mov         dword ptr fs:[??1?$ctype@D@std@@MAE@XZ],ecx
            00
  0000005E: 59                 pop         ecx
  0000005F: 83 C4 10           add         esp,10h
  00000062: 3B EC              cmp         ebp,esp
  00000064: E8 00 00 00 00     call        00000069
  00000069: 8B E5              mov         esp,ebp
  0000006B: 5D                 pop         ebp
  0000006C: C3                 ret

__unwindfunclet$??1?$ctype@D@std@@MAE@XZ$0:
  00000000: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000003: E9 00 00 00 00     jmp         __ehhandler$??1?$ctype@D@std@@MAE@XZ
__ehhandler$??1?$ctype@D@std@@MAE@XZ:
  00000008: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000000F: 8B 4A F8           mov         ecx,dword ptr [edx-8]
  00000012: 33 C8              xor         ecx,eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??1?$ctype@D@std@@MAE@XZ$0
  0000001E: E9 00 00 00 00     jmp         00000023

?_Tidy@?$ctype@D@std@@IAEXXZ (protected: void __thiscall std::ctype<char>::_Tidy(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000014: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000017: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001A: 83 78 14 00        cmp         dword ptr [eax+14h],0
  0000001E: 7E 11              jle         00000031
  00000020: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000023: 8B 51 10           mov         edx,dword ptr [ecx+10h]
  00000026: 52                 push        edx
  00000027: E8 00 00 00 00     call        0000002C
  0000002C: 83 C4 04           add         esp,4
  0000002F: EB 1E              jmp         0000004F
  00000031: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000034: 83 78 14 00        cmp         dword ptr [eax+14h],0
  00000038: 7D 15              jge         0000004F
  0000003A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000003D: 8B 51 10           mov         edx,dword ptr [ecx+10h]
  00000040: 89 55 F8           mov         dword ptr [ebp-8],edx
  00000043: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  00000046: 50                 push        eax
  00000047: E8 00 00 00 00     call        0000004C
  0000004C: 83 C4 04           add         esp,4
  0000004F: 83 C4 08           add         esp,8
  00000052: 3B EC              cmp         ebp,esp
  00000054: E8 00 00 00 00     call        00000059
  00000059: 8B E5              mov         esp,ebp
  0000005B: 5D                 pop         ebp
  0000005C: C3                 ret

?c_str@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@QBEPBDXZ (public: char const * __thiscall std::basic_string<char,struct std::char_traits<char>,class std::_DebugHeapAllocator<char> >::c_str(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 83 C4 04           add         esp,4
  00000019: 3B EC              cmp         ebp,esp
  0000001B: E8 00 00 00 00     call        00000020
  00000020: 8B E5              mov         esp,ebp
  00000022: 5D                 pop         ebp
  00000023: C3                 ret

?_Myptr@?$basic_string@DU?$char_traits@D@std@@V?$_DebugHeapAllocator@D@2@@std@@IBEPBDXZ (protected: char const * __thiscall std::basic_string<char,struct std::char_traits<char>,class std::_DebugHeapAllocator<char> >::_Myptr(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000014: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000017: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001A: 83 78 1C 10        cmp         dword ptr [eax+1Ch],10h
  0000001E: 72 0B              jb          0000002B
  00000020: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000023: 8B 51 08           mov         edx,dword ptr [ecx+8]
  00000026: 89 55 F8           mov         dword ptr [ebp-8],edx
  00000029: EB 09              jmp         00000034
  0000002B: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002E: 83 C0 08           add         eax,8
  00000031: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000034: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  00000037: 8B E5              mov         esp,ebp
  00000039: 5D                 pop         ebp
  0000003A: C3                 ret

??$_Debug_range@PBD@std@@YAXPBD0PB_WI@Z (void __cdecl std::_Debug_range<char const *>(char const *,char const *,wchar_t const *,unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 8D 45 08           lea         eax,[ebp+8]
  0000000E: 50                 push        eax
  0000000F: 8D 4D FF           lea         ecx,[ebp-1]
  00000012: 51                 push        ecx
  00000013: E8 00 00 00 00     call        00000018
  00000018: 83 C4 08           add         esp,8
  0000001B: 0F B6 10           movzx       edx,byte ptr [eax]
  0000001E: 52                 push        edx
  0000001F: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  00000022: 50                 push        eax
  00000023: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  00000026: 51                 push        ecx
  00000027: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  0000002A: 52                 push        edx
  0000002B: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000002E: 50                 push        eax
  0000002F: E8 00 00 00 00     call        00000034
  00000034: 83 C4 14           add         esp,14h
  00000037: 83 C4 04           add         esp,4
  0000003A: 3B EC              cmp         ebp,esp
  0000003C: E8 00 00 00 00     call        00000041
  00000041: 8B E5              mov         esp,ebp
  00000043: 5D                 pop         ebp
  00000044: C3                 ret

??$_DebugHeapDelete@X@std@@YAXPAX@Z (void __cdecl std::_DebugHeapDelete<void>(void *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  00000007: 74 0C              je          00000015
  00000009: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000000C: 50                 push        eax
  0000000D: E8 00 00 00 00     call        00000012
  00000012: 83 C4 04           add         esp,4
  00000015: 3B EC              cmp         ebp,esp
  00000017: E8 00 00 00 00     call        0000001C
  0000001C: 5D                 pop         ebp
  0000001D: C3                 ret

??$_DebugHeapDelete@Vlocale@std@@@std@@YAXPAVlocale@0@@Z (void __cdecl std::_DebugHeapDelete<class std::locale>(class std::locale *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  00000007: 74 16              je          0000001F
  00000009: 6A 00              push        0
  0000000B: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000000E: E8 00 00 00 00     call        00000013
  00000013: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000016: 50                 push        eax
  00000017: E8 00 00 00 00     call        0000001C
  0000001C: 83 C4 04           add         esp,4
  0000001F: 3B EC              cmp         ebp,esp
  00000021: E8 00 00 00 00     call        00000026
  00000026: 5D                 pop         ebp
  00000027: C3                 ret

??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z (char * __cdecl std::_Traits_helper::copy_s<struct std::char_traits<char> >(char *,unsigned int,char const *,unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: E8 00 00 00 00     call        00000010
  00000010: 88 45 FF           mov         byte ptr [ebp-1],al
  00000013: 0F B6 45 FF        movzx       eax,byte ptr [ebp-1]
  00000017: 50                 push        eax
  00000018: 8B 4D 14           mov         ecx,dword ptr [ebp+14h]
  0000001B: 51                 push        ecx
  0000001C: 8B 55 10           mov         edx,dword ptr [ebp+10h]
  0000001F: 52                 push        edx
  00000020: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000023: 50                 push        eax
  00000024: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000027: 51                 push        ecx
  00000028: E8 00 00 00 00     call        0000002D
  0000002D: 83 C4 14           add         esp,14h
  00000030: 83 C4 04           add         esp,4
  00000033: 3B EC              cmp         ebp,esp
  00000035: E8 00 00 00 00     call        0000003A
  0000003A: 8B E5              mov         esp,ebp
  0000003C: 5D                 pop         ebp
  0000003D: C3                 ret

??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z (class std::codecvt<char,char,int> const & __cdecl std::use_facet<class std::codecvt<char,char,int> >(class std::locale const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z]
  00000010: 50                 push        eax
  00000011: 83 EC 34           sub         esp,34h
  00000014: 57                 push        edi
  00000015: 8D 7D C0           lea         edi,[ebp-40h]
  00000018: B9 0D 00 00 00     mov         ecx,0Dh
  0000001D: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000022: F3 AB              rep stos    dword ptr [edi]
  00000024: A1 00 00 00 00     mov         eax,[??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z]
  00000029: 33 C5              xor         eax,ebp
  0000002B: 50                 push        eax
  0000002C: 8D 45 F4           lea         eax,[ebp-0Ch]
  0000002F: 64 A3 00 00 00 00  mov         fs:[??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z],eax
  00000035: 6A 00              push        0
  00000037: 8D 4D EC           lea         ecx,[ebp-14h]
  0000003A: E8 00 00 00 00     call        0000003F
  0000003F: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
            00
  00000046: A1 00 00 00 00     mov         eax,[??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z]
  0000004B: 89 45 E0           mov         dword ptr [ebp-20h],eax
  0000004E: B9 00 00 00 00     mov         ecx,offset ??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
  00000053: E8 00 00 00 00     call        00000058
  00000058: 89 45 D8           mov         dword ptr [ebp-28h],eax
  0000005B: 8B 4D D8           mov         ecx,dword ptr [ebp-28h]
  0000005E: 51                 push        ecx
  0000005F: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000062: E8 00 00 00 00     call        00000067
  00000067: 89 45 D4           mov         dword ptr [ebp-2Ch],eax
  0000006A: 83 7D D4 00        cmp         dword ptr [ebp-2Ch],0
  0000006E: 74 02              je          00000072
  00000070: EB 65              jmp         000000D7
  00000072: 83 7D E0 00        cmp         dword ptr [ebp-20h],0
  00000076: 74 08              je          00000080
  00000078: 8B 55 E0           mov         edx,dword ptr [ebp-20h]
  0000007B: 89 55 D4           mov         dword ptr [ebp-2Ch],edx
  0000007E: EB 57              jmp         000000D7
  00000080: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000083: 50                 push        eax
  00000084: 8D 4D E0           lea         ecx,[ebp-20h]
  00000087: 51                 push        ecx
  00000088: E8 00 00 00 00     call        0000008D
  0000008D: 83 C4 08           add         esp,8
  00000090: 83 F8 FF           cmp         eax,0FFh
  00000093: 75 1D              jne         000000B2
  00000095: 68 00 00 00 00     push        offset ??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
  0000009A: 8D 4D C4           lea         ecx,[ebp-3Ch]
  0000009D: E8 00 00 00 00     call        000000A2
  000000A2: 68 00 00 00 00     push        offset ??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
  000000A7: 8D 55 C4           lea         edx,[ebp-3Ch]
  000000AA: 52                 push        edx
  000000AB: E8 00 00 00 00     call        000000B0
  000000B0: EB 25              jmp         000000D7
  000000B2: 8B 45 E0           mov         eax,dword ptr [ebp-20h]
  000000B5: 89 45 D4           mov         dword ptr [ebp-2Ch],eax
  000000B8: 8B 4D E0           mov         ecx,dword ptr [ebp-20h]
  000000BB: 89 0D 00 00 00 00  mov         dword ptr [??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z],ecx
  000000C1: 8B 55 E0           mov         edx,dword ptr [ebp-20h]
  000000C4: 89 55 D0           mov         dword ptr [ebp-30h],edx
  000000C7: 8B 4D D0           mov         ecx,dword ptr [ebp-30h]
  000000CA: E8 00 00 00 00     call        000000CF
  000000CF: 8B 4D D0           mov         ecx,dword ptr [ebp-30h]
  000000D2: E8 00 00 00 00     call        000000D7
  000000D7: 8B 45 D4           mov         eax,dword ptr [ebp-2Ch]
  000000DA: 89 45 C0           mov         dword ptr [ebp-40h],eax
  000000DD: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000000E4: 8D 4D EC           lea         ecx,[ebp-14h]
  000000E7: E8 00 00 00 00     call        000000EC
  000000EC: 8B 45 C0           mov         eax,dword ptr [ebp-40h]
  000000EF: 52                 push        edx
  000000F0: 8B CD              mov         ecx,ebp
  000000F2: 50                 push        eax
  000000F3: 8D 15 00 00 00 00  lea         edx,[??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z]
  000000F9: E8 00 00 00 00     call        000000FE
  000000FE: 58                 pop         eax
  000000FF: 5A                 pop         edx
  00000100: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000103: 64 89 0D 00 00 00  mov         dword ptr fs:[??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z],ecx
            00
  0000010A: 59                 pop         ecx
  0000010B: 5F                 pop         edi
  0000010C: 83 C4 40           add         esp,40h
  0000010F: 3B EC              cmp         ebp,esp
  00000111: E8 00 00 00 00     call        00000116
  00000116: 8B E5              mov         esp,ebp
  00000118: 5D                 pop         ebp
  00000119: C3                 ret
  0000011A: 8B FF              mov         edi,edi
$LN14:
  0000011C: 02 00              add         al,byte ptr [eax]
  0000011E: 00 00              add         byte ptr [eax],al
  00000120: 00 00              add         byte ptr [eax],al
  00000122: 00 00              add         byte ptr [eax],al
$LN13:
  00000124: EC                 in          al,dx
  00000125: FF
  00000126: FF
  00000127: FF 04 00           inc         dword ptr [eax+eax]
  0000012A: 00 00              add         byte ptr [eax],al
  0000012C: 00 00              add         byte ptr [eax],al
  0000012E: 00 00              add         byte ptr [eax],al
  00000130: E0 FF              loopne      00000131
  00000132: FF
  00000133: FF 04 00           inc         dword ptr [eax+eax]
  00000136: 00 00              add         byte ptr [eax],al
  00000138: 00 00              add         byte ptr [eax],al
  0000013A: 00 00              add         byte ptr [eax],al
$LN11:
  0000013C: 5F                 pop         edi
  0000013D: 50                 push        eax
  0000013E: 73 61              jae         000001A1
  00000140: 76 65              jbe         000001A7
  00000142: 00 5F 4C           add         byte ptr [edi+4Ch],bl
  00000145: 6F                 outs        dx,dword ptr [esi]
  00000146: 63 6B 00           arpl        word ptr [ebx],bp

__unwindfunclet$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z$0:
  00000000: 8D 4D EC           lea         ecx,[ebp-14h]
  00000003: E9 00 00 00 00     jmp         __ehhandler$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z
__ehhandler$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z:
  00000008: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000000F: 8B 4A C4           mov         ecx,dword ptr [edx-3Ch]
  00000012: 33 C8              xor         ecx,eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??$use_facet@V?$codecvt@DDH@std@@@std@@YAABV?$codecvt@DDH@0@ABVlocale@0@@Z$0
  0000001E: E9 00 00 00 00     jmp         00000023

??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDI@Z (char * __cdecl std::_Traits_helper::move_s<struct std::char_traits<char> >(char *,unsigned int,char const *,unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: E8 00 00 00 00     call        00000010
  00000010: 88 45 FF           mov         byte ptr [ebp-1],al
  00000013: 0F B6 45 FF        movzx       eax,byte ptr [ebp-1]
  00000017: 50                 push        eax
  00000018: 8B 4D 14           mov         ecx,dword ptr [ebp+14h]
  0000001B: 51                 push        ecx
  0000001C: 8B 55 10           mov         edx,dword ptr [ebp+10h]
  0000001F: 52                 push        edx
  00000020: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000023: 50                 push        eax
  00000024: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000027: 51                 push        ecx
  00000028: E8 00 00 00 00     call        0000002D
  0000002D: 83 C4 14           add         esp,14h
  00000030: 83 C4 04           add         esp,4
  00000033: 3B EC              cmp         ebp,esp
  00000035: E8 00 00 00 00     call        0000003A
  0000003A: 8B E5              mov         esp,ebp
  0000003C: 5D                 pop         ebp
  0000003D: C3                 ret

??$_Allocate@D@std@@YAPADIPAD@Z (char * __cdecl std::_Allocate<char>(unsigned int,char *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 0C           sub         esp,0Ch
  00000006: C7 45 F4 CC CC CC  mov         dword ptr [ebp-0Ch],0CCCCCCCCh
            CC
  0000000D: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  00000014: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000001B: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  0000001F: 77 09              ja          0000002A
  00000021: C7 45 08 00 00 00  mov         dword ptr [ebp+8],offset ??$_Allocate@D@std@@YAPADIPAD@Z
            00
  00000028: EB 25              jmp         0000004F
  0000002A: 83 C8 FF           or          eax,0FFh
  0000002D: 33 D2              xor         edx,edx
  0000002F: F7 75 08           div         eax,dword ptr [ebp+8]
  00000032: 83 F8 01           cmp         eax,1
  00000035: 73 18              jae         0000004F
  00000037: 6A 00              push        0
  00000039: 8D 4D F4           lea         ecx,[ebp-0Ch]
  0000003C: E8 00 00 00 00     call        00000041
  00000041: 68 00 00 00 00     push        offset ??$_Allocate@D@std@@YAPADIPAD@Z
  00000046: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000049: 50                 push        eax
  0000004A: E8 00 00 00 00     call        0000004F
  0000004F: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000052: 51                 push        ecx
  00000053: E8 00 00 00 00     call        00000058
  00000058: 83 C4 04           add         esp,4
  0000005B: 83 C4 0C           add         esp,0Ch
  0000005E: 3B EC              cmp         ebp,esp
  00000060: E8 00 00 00 00     call        00000065
  00000065: 8B E5              mov         esp,ebp
  00000067: 5D                 pop         ebp
  00000068: C3                 ret

??_Glocale@std@@QAEPAXI@Z (public: void * __thiscall std::locale::`scalar deleting destructor'(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000019: 83 E0 01           and         eax,1
  0000001C: 74 0C              je          0000002A
  0000001E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000021: 51                 push        ecx
  00000022: E8 00 00 00 00     call        00000027
  00000027: 83 C4 04           add         esp,4
  0000002A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002D: 83 C4 04           add         esp,4
  00000030: 3B EC              cmp         ebp,esp
  00000032: E8 00 00 00 00     call        00000037
  00000037: 8B E5              mov         esp,ebp
  00000039: 5D                 pop         ebp
  0000003A: C2 04 00           ret         4

?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z (public: static unsigned int __cdecl std::codecvt<char,char,int>::_Getcat(class std::locale::facet const * *,class std::locale const *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z]
  00000010: 50                 push        eax
  00000011: 81 EC C8 00 00 00  sub         esp,0C8h
  00000017: 57                 push        edi
  00000018: 8D BD 2C FF FF FF  lea         edi,[ebp-0D4h]
  0000001E: B9 32 00 00 00     mov         ecx,32h
  00000023: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000028: F3 AB              rep stos    dword ptr [edi]
  0000002A: A1 00 00 00 00     mov         eax,[?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z]
  0000002F: 33 C5              xor         eax,ebp
  00000031: 50                 push        eax
  00000032: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000035: 64 A3 00 00 00 00  mov         fs:[?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z],eax
  0000003B: C7 85 40 FF FF FF  mov         dword ptr [ebp-0C0h],offset ?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
            00 00 00 00
  00000045: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  00000049: 0F 84 31 01 00 00  je          00000180
  0000004F: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000052: 83 38 00           cmp         dword ptr [eax],0
  00000055: 0F 85 25 01 00 00  jne         00000180
  0000005B: E8 00 00 00 00     call        00000060
  00000060: 89 45 E8           mov         dword ptr [ebp-18h],eax
  00000063: 68 11 03 00 00     push        311h
  00000068: 68 00 00 00 00     push        offset ?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
  0000006D: 8B 4D E8           mov         ecx,dword ptr [ebp-18h]
  00000070: 51                 push        ecx
  00000071: 6A 08              push        8
  00000073: E8 00 00 00 00     call        00000078
  00000078: 83 C4 10           add         esp,10h
  0000007B: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000007E: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
            00
  00000085: 83 7D EC 00        cmp         dword ptr [ebp-14h],0
  00000089: 0F 84 87 00 00 00  je          00000116
  0000008F: 6A 00              push        0
  00000091: 8D 95 44 FF FF FF  lea         edx,[ebp-0BCh]
  00000097: 52                 push        edx
  00000098: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  0000009B: E8 00 00 00 00     call        000000A0
  000000A0: 89 85 3C FF FF FF  mov         dword ptr [ebp-0C4h],eax
  000000A6: 8B 85 3C FF FF FF  mov         eax,dword ptr [ebp-0C4h]
  000000AC: 89 85 38 FF FF FF  mov         dword ptr [ebp-0C8h],eax
  000000B2: C6 45 FC 01        mov         byte ptr [ebp-4],1
  000000B6: 8B 8D 40 FF FF FF  mov         ecx,dword ptr [ebp-0C0h]
  000000BC: 83 C9 01           or          ecx,1
  000000BF: 89 8D 40 FF FF FF  mov         dword ptr [ebp-0C0h],ecx
  000000C5: 8B 95 38 FF FF FF  mov         edx,dword ptr [ebp-0C8h]
  000000CB: 52                 push        edx
  000000CC: 8D 8D 64 FF FF FF  lea         ecx,[ebp-9Ch]
  000000D2: E8 00 00 00 00     call        000000D7
  000000D7: 89 85 34 FF FF FF  mov         dword ptr [ebp-0CCh],eax
  000000DD: 8B 85 34 FF FF FF  mov         eax,dword ptr [ebp-0CCh]
  000000E3: 89 85 30 FF FF FF  mov         dword ptr [ebp-0D0h],eax
  000000E9: C7 45 FC 02 00 00  mov         dword ptr [ebp-4],2
            00
  000000F0: 8B 8D 40 FF FF FF  mov         ecx,dword ptr [ebp-0C0h]
  000000F6: 83 C9 02           or          ecx,2
  000000F9: 89 8D 40 FF FF FF  mov         dword ptr [ebp-0C0h],ecx
  000000FF: 8B 95 30 FF FF FF  mov         edx,dword ptr [ebp-0D0h]
  00000105: 52                 push        edx
  00000106: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000109: E8 00 00 00 00     call        0000010E
  0000010E: 89 85 2C FF FF FF  mov         dword ptr [ebp-0D4h],eax
  00000114: EB 0A              jmp         00000120
  00000116: C7 85 2C FF FF FF  mov         dword ptr [ebp-0D4h],offset ?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z
            00 00 00 00
  00000120: 8B 85 2C FF FF FF  mov         eax,dword ptr [ebp-0D4h]
  00000126: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000129: C7 45 FC 04 00 00  mov         dword ptr [ebp-4],4
            00
  00000130: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000133: 8B 55 F0           mov         edx,dword ptr [ebp-10h]
  00000136: 89 11              mov         dword ptr [ecx],edx
  00000138: C7 45 FC 03 00 00  mov         dword ptr [ebp-4],3
            00
  0000013F: 8B 85 40 FF FF FF  mov         eax,dword ptr [ebp-0C0h]
  00000145: 83 E0 02           and         eax,2
  00000148: 74 12              je          0000015C
  0000014A: 83 A5 40 FF FF FF  and         dword ptr [ebp-0C0h],0FDh
            FD
  00000151: 8D 8D 64 FF FF FF  lea         ecx,[ebp-9Ch]
  00000157: E8 00 00 00 00     call        0000015C
  0000015C: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000163: 8B 8D 40 FF FF FF  mov         ecx,dword ptr [ebp-0C0h]
  00000169: 83 E1 01           and         ecx,1
  0000016C: 74 12              je          00000180
  0000016E: 83 A5 40 FF FF FF  and         dword ptr [ebp-0C0h],0FEh
            FE
  00000175: 8D 8D 44 FF FF FF  lea         ecx,[ebp-0BCh]
  0000017B: E8 00 00 00 00     call        00000180
  00000180: B8 02 00 00 00     mov         eax,2
  00000185: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000188: 64 89 0D 00 00 00  mov         dword ptr fs:[?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z],ecx
            00
  0000018F: 59                 pop         ecx
  00000190: 5F                 pop         edi
  00000191: 81 C4 D4 00 00 00  add         esp,0D4h
  00000197: 3B EC              cmp         ebp,esp
  00000199: E8 00 00 00 00     call        0000019E
  0000019E: 8B E5              mov         esp,ebp
  000001A0: 5D                 pop         ebp
  000001A1: C3                 ret

__unwindfunclet$?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0:
  00000000: 68 11 03 00 00     push        311h
  00000005: 68 00 00 00 00     push        offset __unwindfunclet$?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
  0000000A: 8B 45 E8           mov         eax,dword ptr [ebp-18h]
  0000000D: 50                 push        eax
  0000000E: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000011: 51                 push        ecx
  00000012: E8 00 00 00 00     call        00000017
  00000017: 83 C4 10           add         esp,10h
  0000001A: C3                 ret
__unwindfunclet$?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$1:
  0000001B: 8B 85 40 FF FF FF  mov         eax,dword ptr [ebp-0C0h]
  00000021: 83 E0 01           and         eax,1
  00000024: 0F 84 12 00 00 00  je          $LN8
  0000002A: 83 A5 40 FF FF FF  and         dword ptr [ebp-0C0h],0FEh
            FE
  00000031: 8D 8D 44 FF FF FF  lea         ecx,[ebp-0BCh]
  00000037: E9 00 00 00 00     jmp         $LN8
$LN8:
  0000003C: C3                 ret
__unwindfunclet$?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$2:
  0000003D: 8B 85 40 FF FF FF  mov         eax,dword ptr [ebp-0C0h]
  00000043: 83 E0 02           and         eax,2
  00000046: 0F 84 12 00 00 00  je          $LN10
  0000004C: 83 A5 40 FF FF FF  and         dword ptr [ebp-0C0h],0FDh
            FD
  00000053: 8D 8D 64 FF FF FF  lea         ecx,[ebp-9Ch]
  00000059: E9 00 00 00 00     jmp         $LN10
$LN10:
  0000005E: C3                 ret
__ehhandler$?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z:
  0000005F: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  00000063: 8D 42 0C           lea         eax,[edx+0Ch]
  00000066: 8B 8A 30 FF FF FF  mov         ecx,dword ptr [edx-0D0h]
  0000006C: 33 C8              xor         ecx,eax
  0000006E: E8 00 00 00 00     call        00000073
  00000073: B8 00 00 00 00     mov         eax,offset __unwindfunclet$?_Getcat@?$codecvt@DDH@std@@SAIPAPBVfacet@locale@2@PBV42@@Z$0
  00000078: E9 00 00 00 00     jmp         0000007D

??0?$codecvt@DDH@std@@QAE@ABV_Locinfo@1@I@Z (public: __thiscall std::codecvt<char,char,int>::codecvt<char,char,int>(class std::_Locinfo const &,unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A FF              push        0FFh
  00000005: 68 00 00 00 00     push        offset ??0?$codecvt@DDH@std@@QAE@ABV_Locinfo@1@I@Z
  0000000A: 64 A1 00 00 00 00  mov         eax,fs:[??0?$codecvt@DDH@std@@QAE@ABV_Locinfo@1@I@Z]
  00000010: 50                 push        eax
  00000011: 51                 push        ecx
  00000012: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  00000019: A1 00 00 00 00     mov         eax,[??0?$codecvt@DDH@std@@QAE@ABV_Locinfo@1@I@Z]
  0000001E: 33 C5              xor         eax,ebp
  00000020: 50                 push        eax
  00000021: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000024: 64 A3 00 00 00 00  mov         fs:[??0?$codecvt@DDH@std@@QAE@ABV_Locinfo@1@I@Z],eax
  0000002A: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  0000002D: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000030: 50                 push        eax
  00000031: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000034: E8 00 00 00 00     call        00000039
  00000039: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0?$codecvt@DDH@std@@QAE@ABV_Locinfo@1@I@Z
            00
  00000040: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000043: C7 01 00 00 00 00  mov         dword ptr [ecx],offset ??0?$codecvt@DDH@std@@QAE@ABV_Locinfo@1@I@Z
  00000049: 8B 55 08           mov         edx,dword ptr [ebp+8]
  0000004C: 52                 push        edx
  0000004D: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000050: E8 00 00 00 00     call        00000055
  00000055: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  0000005C: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  0000005F: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000062: 64 89 0D 00 00 00  mov         dword ptr fs:[??0?$codecvt@DDH@std@@QAE@ABV_Locinfo@1@I@Z],ecx
            00
  00000069: 59                 pop         ecx
  0000006A: 83 C4 10           add         esp,10h
  0000006D: 3B EC              cmp         ebp,esp
  0000006F: E8 00 00 00 00     call        00000074
  00000074: 8B E5              mov         esp,ebp
  00000076: 5D                 pop         ebp
  00000077: C2 08 00           ret         8

__unwindfunclet$??0?$codecvt@DDH@std@@QAE@ABV_Locinfo@1@I@Z$0:
  00000000: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000003: E9 00 00 00 00     jmp         __ehhandler$??0?$codecvt@DDH@std@@QAE@ABV_Locinfo@1@I@Z
__ehhandler$??0?$codecvt@DDH@std@@QAE@ABV_Locinfo@1@I@Z:
  00000008: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000C: 8D 42 0C           lea         eax,[edx+0Ch]
  0000000F: 8B 4A F8           mov         ecx,dword ptr [edx-8]
  00000012: 33 C8              xor         ecx,eax
  00000014: E8 00 00 00 00     call        00000019
  00000019: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??0?$codecvt@DDH@std@@QAE@ABV_Locinfo@1@I@Z$0
  0000001E: E9 00 00 00 00     jmp         00000023

??0codecvt_base@std@@QAE@I@Z (public: __thiscall std::codecvt_base::codecvt_base(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000011: 50                 push        eax
  00000012: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000015: E8 00 00 00 00     call        0000001A
  0000001A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001D: C7 01 00 00 00 00  mov         dword ptr [ecx],offset ??0codecvt_base@std@@QAE@I@Z
  00000023: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000026: 83 C4 04           add         esp,4
  00000029: 3B EC              cmp         ebp,esp
  0000002B: E8 00 00 00 00     call        00000030
  00000030: 8B E5              mov         esp,ebp
  00000032: 5D                 pop         ebp
  00000033: C2 04 00           ret         4

??1codecvt_base@std@@UAE@XZ (public: virtual __thiscall std::codecvt_base::~codecvt_base(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??1codecvt_base@std@@UAE@XZ
  00000017: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001A: E8 00 00 00 00     call        0000001F
  0000001F: 83 C4 04           add         esp,4
  00000022: 3B EC              cmp         ebp,esp
  00000024: E8 00 00 00 00     call        00000029
  00000029: 8B E5              mov         esp,ebp
  0000002B: 5D                 pop         ebp
  0000002C: C3                 ret

?do_always_noconv@codecvt_base@std@@MBE_NXZ (protected: virtual bool __thiscall std::codecvt_base::do_always_noconv(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: B0 01              mov         al,1
  00000010: 8B E5              mov         esp,ebp
  00000012: 5D                 pop         ebp
  00000013: C3                 ret

?do_max_length@codecvt_base@std@@MBEHXZ (protected: virtual int __thiscall std::codecvt_base::do_max_length(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: B8 01 00 00 00     mov         eax,1
  00000013: 8B E5              mov         esp,ebp
  00000015: 5D                 pop         ebp
  00000016: C3                 ret

?do_encoding@codecvt_base@std@@MBEHXZ (protected: virtual int __thiscall std::codecvt_base::do_encoding(void)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: B8 01 00 00 00     mov         eax,1
  00000013: 8B E5              mov         esp,ebp
  00000015: 5D                 pop         ebp
  00000016: C3                 ret

??_Gcodecvt_base@std@@UAEPAXI@Z (public: virtual void * __thiscall std::codecvt_base::`scalar deleting destructor'(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000019: 83 E0 01           and         eax,1
  0000001C: 74 0C              je          0000002A
  0000001E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000021: 51                 push        ecx
  00000022: E8 00 00 00 00     call        00000027
  00000027: 83 C4 04           add         esp,4
  0000002A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002D: 83 C4 04           add         esp,4
  00000030: 3B EC              cmp         ebp,esp
  00000032: E8 00 00 00 00     call        00000037
  00000037: 8B E5              mov         esp,ebp
  00000039: 5D                 pop         ebp
  0000003A: C2 04 00           ret         4

?do_in@?$codecvt@DDH@std@@MBEHAAHPBD1AAPBDPAD3AAPAD@Z (protected: virtual int __thiscall std::codecvt<char,char,int>::do_in(int &,char const *,char const *,char const * &,char *,char *,char * &)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  00000011: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000014: 89 08              mov         dword ptr [eax],ecx
  00000016: 8B 55 20           mov         edx,dword ptr [ebp+20h]
  00000019: 8B 45 18           mov         eax,dword ptr [ebp+18h]
  0000001C: 89 02              mov         dword ptr [edx],eax
  0000001E: B8 03 00 00 00     mov         eax,3
  00000023: 8B E5              mov         esp,ebp
  00000025: 5D                 pop         ebp
  00000026: C2 1C 00           ret         1Ch

?do_out@?$codecvt@DDH@std@@MBEHAAHPBD1AAPBDPAD3AAPAD@Z (protected: virtual int __thiscall std::codecvt<char,char,int>::do_out(int &,char const *,char const *,char const * &,char *,char *,char * &)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  00000011: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000014: 89 08              mov         dword ptr [eax],ecx
  00000016: 8B 55 20           mov         edx,dword ptr [ebp+20h]
  00000019: 8B 45 18           mov         eax,dword ptr [ebp+18h]
  0000001C: 89 02              mov         dword ptr [edx],eax
  0000001E: B8 03 00 00 00     mov         eax,3
  00000023: 8B E5              mov         esp,ebp
  00000025: 5D                 pop         ebp
  00000026: C2 1C 00           ret         1Ch

?do_unshift@?$codecvt@DDH@std@@MBEHAAHPAD1AAPAD@Z (protected: virtual int __thiscall std::codecvt<char,char,int>::do_unshift(int &,char *,char *,char * &)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  00000011: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000014: 89 08              mov         dword ptr [eax],ecx
  00000016: B8 03 00 00 00     mov         eax,3
  0000001B: 8B E5              mov         esp,ebp
  0000001D: 5D                 pop         ebp
  0000001E: C2 10 00           ret         10h

?do_length@?$codecvt@DDH@std@@MBEHABHPBD1I@Z (protected: virtual int __thiscall std::codecvt<char,char,int>::do_length(int const &,char const *,char const *,unsigned int)const ):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 08           sub         esp,8
  00000006: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000000D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000014: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000017: 8B 45 10           mov         eax,dword ptr [ebp+10h]
  0000001A: 2B 45 0C           sub         eax,dword ptr [ebp+0Ch]
  0000001D: 39 45 14           cmp         dword ptr [ebp+14h],eax
  00000020: 73 08              jae         0000002A
  00000022: 8B 4D 14           mov         ecx,dword ptr [ebp+14h]
  00000025: 89 4D F8           mov         dword ptr [ebp-8],ecx
  00000028: EB 09              jmp         00000033
  0000002A: 8B 55 10           mov         edx,dword ptr [ebp+10h]
  0000002D: 2B 55 0C           sub         edx,dword ptr [ebp+0Ch]
  00000030: 89 55 F8           mov         dword ptr [ebp-8],edx
  00000033: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  00000036: 8B E5              mov         esp,ebp
  00000038: 5D                 pop         ebp
  00000039: C2 10 00           ret         10h

??_G?$codecvt@DDH@std@@MAEPAXI@Z (protected: virtual void * __thiscall std::codecvt<char,char,int>::`scalar deleting destructor'(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000019: 83 E0 01           and         eax,1
  0000001C: 74 0C              je          0000002A
  0000001E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000021: 51                 push        ecx
  00000022: E8 00 00 00 00     call        00000027
  00000027: 83 C4 04           add         esp,4
  0000002A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002D: 83 C4 04           add         esp,4
  00000030: 3B EC              cmp         ebp,esp
  00000032: E8 00 00 00 00     call        00000037
  00000037: 8B E5              mov         esp,ebp
  00000039: 5D                 pop         ebp
  0000003A: C2 04 00           ret         4

??1?$codecvt@DDH@std@@MAE@XZ (protected: virtual __thiscall std::codecvt<char,char,int>::~codecvt<char,char,int>(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??1?$codecvt@DDH@std@@MAE@XZ
  00000017: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001A: E8 00 00 00 00     call        0000001F
  0000001F: 83 C4 04           add         esp,4
  00000022: 3B EC              cmp         ebp,esp
  00000024: E8 00 00 00 00     call        00000029
  00000029: 8B E5              mov         esp,ebp
  0000002B: 5D                 pop         ebp
  0000002C: C3                 ret

?_Init@?$codecvt@DDH@std@@IAEXABV_Locinfo@2@@Z (protected: void __thiscall std::codecvt<char,char,int>::_Init(class std::_Locinfo const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B E5              mov         esp,ebp
  00000010: 5D                 pop         ebp
  00000011: C2 04 00           ret         4

??$_Iter_cat@PBD@std@@YA?AUrandom_access_iterator_tag@0@ABQBD@Z (struct std::random_access_iterator_tag __cdecl std::_Iter_cat<char const *>(char const * const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 0C           sub         esp,0Ch
  00000006: C7 45 F4 CC CC CC  mov         dword ptr [ebp-0Ch],0CCCCCCCCh
            CC
  0000000D: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  00000014: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000001B: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000001E: 52                 push        edx
  0000001F: 8B CD              mov         ecx,ebp
  00000021: 50                 push        eax
  00000022: 8D 15 00 00 00 00  lea         edx,[??$_Iter_cat@PBD@std@@YA?AUrandom_access_iterator_tag@0@ABQBD@Z]
  00000028: E8 00 00 00 00     call        0000002D
  0000002D: 58                 pop         eax
  0000002E: 5A                 pop         edx
  0000002F: 8B E5              mov         esp,ebp
  00000031: 5D                 pop         ebp
  00000032: C3                 ret
  00000033: 90                 nop
$LN5:
  00000034: 01 00              add         dword ptr [eax],eax
  00000036: 00 00              add         byte ptr [eax],al
  00000038: 00 00              add         byte ptr [eax],al
  0000003A: 00 00              add         byte ptr [eax],al
$LN4:
  0000003C: FB                 sti
  0000003D: FF
  0000003E: FF
  0000003F: FF 01              inc         dword ptr [ecx]
  00000041: 00 00              add         byte ptr [eax],al
  00000043: 00 00              add         byte ptr [eax],al
  00000045: 00 00              add         byte ptr [eax],al
  00000047: 00 5F 43           add         byte ptr [edi+43h],bl
  0000004A: 61                 popad
  0000004B: 74 00              je          0000004D

??$_Debug_range2@PBD@std@@YAXPBD0PB_WIUrandom_access_iterator_tag@0@@Z (void __cdecl std::_Debug_range2<char const *>(char const *,char const *,wchar_t const *,unsigned int,struct std::random_access_iterator_tag)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000006: 3B 45 0C           cmp         eax,dword ptr [ebp+0Ch]
  00000009: 74 45              je          00000050
  0000000B: 8B 4D 14           mov         ecx,dword ptr [ebp+14h]
  0000000E: 51                 push        ecx
  0000000F: 8B 55 10           mov         edx,dword ptr [ebp+10h]
  00000012: 52                 push        edx
  00000013: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000016: 50                 push        eax
  00000017: E8 00 00 00 00     call        0000001C
  0000001C: 83 C4 0C           add         esp,0Ch
  0000001F: 8B 4D 14           mov         ecx,dword ptr [ebp+14h]
  00000022: 51                 push        ecx
  00000023: 8B 55 10           mov         edx,dword ptr [ebp+10h]
  00000026: 52                 push        edx
  00000027: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  0000002A: 50                 push        eax
  0000002B: E8 00 00 00 00     call        00000030
  00000030: 83 C4 0C           add         esp,0Ch
  00000033: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000036: 3B 4D 08           cmp         ecx,dword ptr [ebp+8]
  00000039: 73 15              jae         00000050
  0000003B: 8B 55 14           mov         edx,dword ptr [ebp+14h]
  0000003E: 52                 push        edx
  0000003F: 8B 45 10           mov         eax,dword ptr [ebp+10h]
  00000042: 50                 push        eax
  00000043: 68 00 00 00 00     push        offset ??$_Debug_range2@PBD@std@@YAXPBD0PB_WIUrandom_access_iterator_tag@0@@Z
  00000048: E8 00 00 00 00     call        0000004D
  0000004D: 83 C4 0C           add         esp,0Ch
  00000050: 3B EC              cmp         ebp,esp
  00000052: E8 00 00 00 00     call        00000057
  00000057: 5D                 pop         ebp
  00000058: C3                 ret

??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ (struct std::_Secure_char_traits_tag __cdecl std::_Char_traits_cat<struct std::char_traits<char> >(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 0C           sub         esp,0Ch
  00000006: C7 45 F4 CC CC CC  mov         dword ptr [ebp-0Ch],0CCCCCCCCh
            CC
  0000000D: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  00000014: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000001B: 8A 45 FB           mov         al,byte ptr [ebp-5]
  0000001E: 52                 push        edx
  0000001F: 8B CD              mov         ecx,ebp
  00000021: 50                 push        eax
  00000022: 8D 15 00 00 00 00  lea         edx,[??$_Char_traits_cat@U?$char_traits@D@std@@@std@@YA?AU_Secure_char_traits_tag@0@XZ]
  00000028: E8 00 00 00 00     call        0000002D
  0000002D: 58                 pop         eax
  0000002E: 5A                 pop         edx
  0000002F: 8B E5              mov         esp,ebp
  00000031: 5D                 pop         ebp
  00000032: C3                 ret
  00000033: 90                 nop
$LN5:
  00000034: 01 00              add         dword ptr [eax],eax
  00000036: 00 00              add         byte ptr [eax],al
  00000038: 00 00              add         byte ptr [eax],al
  0000003A: 00 00              add         byte ptr [eax],al
$LN4:
  0000003C: FB                 sti
  0000003D: FF
  0000003E: FF
  0000003F: FF 01              inc         dword ptr [ecx]
  00000041: 00 00              add         byte ptr [eax],al
  00000043: 00 00              add         byte ptr [eax],al
  00000045: 00 00              add         byte ptr [eax],al
  00000047: 00 5F 53           add         byte ptr [edi+53h],bl
  0000004A: 65 63 75 72        arpl        word ptr gs:[ebp+72h],si
  0000004E: 65
  0000004F: 00

??$copy_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z (char * __cdecl std::_Traits_helper::copy_s<struct std::char_traits<char> >(char *,unsigned int,char const *,unsigned int,struct std::_Secure_char_traits_tag)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  00000006: 50                 push        eax
  00000007: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  0000000A: 51                 push        ecx
  0000000B: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  0000000E: 52                 push        edx
  0000000F: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000012: 50                 push        eax
  00000013: E8 00 00 00 00     call        00000018
  00000018: 83 C4 10           add         esp,10h
  0000001B: 3B EC              cmp         ebp,esp
  0000001D: E8 00 00 00 00     call        00000022
  00000022: 5D                 pop         ebp
  00000023: C3                 ret

?_Copy_s@?$char_traits@D@std@@SAPADPADIPBDI@Z (public: static char * __cdecl std::char_traits<char>::_Copy_s(char *,unsigned int,char const *,unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  00000006: 50                 push        eax
  00000007: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  0000000A: 51                 push        ecx
  0000000B: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  0000000E: 52                 push        edx
  0000000F: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000012: 50                 push        eax
  00000013: E8 00 00 00 00     call        00000018
  00000018: 83 C4 10           add         esp,10h
  0000001B: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000001E: 3B EC              cmp         ebp,esp
  00000020: E8 00 00 00 00     call        00000025
  00000025: 5D                 pop         ebp
  00000026: C3                 ret

??$move_s@U?$char_traits@D@std@@@_Traits_helper@std@@YAPADPADIPBDIU_Secure_char_traits_tag@1@@Z (char * __cdecl std::_Traits_helper::move_s<struct std::char_traits<char> >(char *,unsigned int,char const *,unsigned int,struct std::_Secure_char_traits_tag)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  00000006: 50                 push        eax
  00000007: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  0000000A: 51                 push        ecx
  0000000B: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  0000000E: 52                 push        edx
  0000000F: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000012: 50                 push        eax
  00000013: E8 00 00 00 00     call        00000018
  00000018: 83 C4 10           add         esp,10h
  0000001B: 3B EC              cmp         ebp,esp
  0000001D: E8 00 00 00 00     call        00000022
  00000022: 5D                 pop         ebp
  00000023: C3                 ret

?_Move_s@?$char_traits@D@std@@SAPADPADIPBDI@Z (public: static char * __cdecl std::char_traits<char>::_Move_s(char *,unsigned int,char const *,unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  00000006: 50                 push        eax
  00000007: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  0000000A: 51                 push        ecx
  0000000B: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  0000000E: 52                 push        edx
  0000000F: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000012: 50                 push        eax
  00000013: E8 00 00 00 00     call        00000018
  00000018: 83 C4 10           add         esp,10h
  0000001B: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000001E: 3B EC              cmp         ebp,esp
  00000020: E8 00 00 00 00     call        00000025
  00000025: 5D                 pop         ebp
  00000026: C3                 ret

??__E?id@?$codecvt@DDH@std@@2V0locale@2@A@@YAXXZ (void __cdecl `dynamic initializer for 'public: static class std::locale::id std::codecvt<char,char,int>::id''(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 6A 00              push        0
  00000005: B9 00 00 00 00     mov         ecx,offset ??__E?id@?$codecvt@DDH@std@@2V0locale@2@A@@YAXXZ
  0000000A: E8 00 00 00 00     call        0000000F
  0000000F: 3B EC              cmp         ebp,esp
  00000011: E8 00 00 00 00     call        00000016
  00000016: 5D                 pop         ebp
  00000017: C3                 ret

??0id@locale@std@@QAE@I@Z (public: __thiscall std::locale::id::id(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000014: 89 08              mov         dword ptr [eax],ecx
  00000016: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000019: 8B E5              mov         esp,ebp
  0000001B: 5D                 pop         ebp
  0000001C: C2 04 00           ret         4

??0WZResult@@QAE@XZ (public: __thiscall WZResult::WZResult(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??0WZResult@@QAE@XZ
  00000017: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001A: C7 41 04 00 00 00  mov         dword ptr [ecx+4],offset ??0WZResult@@QAE@XZ
            00
  00000021: 68 00 00 00 00     push        offset ??0WZResult@@QAE@XZ
  00000026: 68 00 04 00 00     push        400h
  0000002B: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000002E: 83 C2 08           add         edx,8
  00000031: 52                 push        edx
  00000032: E8 00 00 00 00     call        00000037
  00000037: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000003A: 83 C4 04           add         esp,4
  0000003D: 3B EC              cmp         ebp,esp
  0000003F: E8 00 00 00 00     call        00000044
  00000044: 8B E5              mov         esp,ebp
  00000046: 5D                 pop         ebp
  00000047: C3                 ret
  00000048: CC                 int         3
  00000049: CC                 int         3
  0000004A: CC                 int         3
  0000004B: CC                 int         3
  0000004C: CC                 int         3
  0000004D: CC                 int         3
  0000004E: CC                 int         3
  0000004F: CC                 int         3
?StringValidateDestA@@YGJPADIPAII@Z (long __stdcall StringValidateDestA(char *,unsigned int,unsigned int *,unsigned int)):
  00000050: 55                 push        ebp
  00000051: 8B EC              mov         ebp,esp
  00000053: 51                 push        ecx
  00000054: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000005B: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0WZResult@@QAE@XZ
            00
  00000062: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  00000066: 74 08              je          00000070
  00000068: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  0000006B: 3B 45 14           cmp         eax,dword ptr [ebp+14h]
  0000006E: 76 07              jbe         00000077
  00000070: C7 45 FC 57 00 07  mov         dword ptr [ebp-4],80070057h
            80
  00000077: 83 7D 10 00        cmp         dword ptr [ebp+10h],0
  0000007B: 74 25              je          000000A2
  0000007D: 83 7D FC 00        cmp         dword ptr [ebp-4],0
  00000081: 7C 16              jl          00000099
  00000083: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  00000086: 51                 push        ecx
  00000087: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  0000008A: 52                 push        edx
  0000008B: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000008E: 50                 push        eax
  0000008F: E8 00 00 00 00     call        00000094
  00000094: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000097: EB 09              jmp         000000A2
  00000099: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  0000009C: C7 01 00 00 00 00  mov         dword ptr [ecx],offset ??0WZResult@@QAE@XZ
  000000A2: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000000A5: 83 C4 04           add         esp,4
  000000A8: 3B EC              cmp         ebp,esp
  000000AA: E8 00 00 00 00     call        000000AF
  000000AF: 8B E5              mov         esp,ebp
  000000B1: 5D                 pop         ebp
  000000B2: C2 10 00           ret         10h
  000000B5: CC                 int         3
  000000B6: CC                 int         3
  000000B7: CC                 int         3
  000000B8: CC                 int         3
  000000B9: CC                 int         3
  000000BA: CC                 int         3
  000000BB: CC                 int         3
  000000BC: CC                 int         3
  000000BD: CC                 int         3
  000000BE: CC                 int         3
  000000BF: CC                 int         3
?StringLengthWorkerA@@YGJPBDIPAI@Z (long __stdcall StringLengthWorkerA(char const *,unsigned int,unsigned int *)):
  000000C0: 55                 push        ebp
  000000C1: 8B EC              mov         ebp,esp
  000000C3: 83 EC 08           sub         esp,8
  000000C6: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  000000CD: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  000000D4: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0WZResult@@QAE@XZ
            00
  000000DB: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  000000DE: 89 45 F8           mov         dword ptr [ebp-8],eax
  000000E1: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  000000E5: 74 1E              je          00000105
  000000E7: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  000000EA: 0F BE 11           movsx       edx,byte ptr [ecx]
  000000ED: 85 D2              test        edx,edx
  000000EF: 74 14              je          00000105
  000000F1: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000000F4: 83 C0 01           add         eax,1
  000000F7: 89 45 08           mov         dword ptr [ebp+8],eax
  000000FA: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  000000FD: 83 E9 01           sub         ecx,1
  00000100: 89 4D 0C           mov         dword ptr [ebp+0Ch],ecx
  00000103: EB DC              jmp         000000E1
  00000105: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  00000109: 75 07              jne         00000112
  0000010B: C7 45 FC 57 00 07  mov         dword ptr [ebp-4],80070057h
            80
  00000112: 83 7D 10 00        cmp         dword ptr [ebp+10h],0
  00000116: 74 1C              je          00000134
  00000118: 83 7D FC 00        cmp         dword ptr [ebp-4],0
  0000011C: 7C 0D              jl          0000012B
  0000011E: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  00000121: 2B 55 0C           sub         edx,dword ptr [ebp+0Ch]
  00000124: 8B 45 10           mov         eax,dword ptr [ebp+10h]
  00000127: 89 10              mov         dword ptr [eax],edx
  00000129: EB 09              jmp         00000134
  0000012B: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  0000012E: C7 01 00 00 00 00  mov         dword ptr [ecx],offset ??0WZResult@@QAE@XZ
  00000134: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000137: 8B E5              mov         esp,ebp
  00000139: 5D                 pop         ebp
  0000013A: C2 0C 00           ret         0Ch
  0000013D: CC                 int         3
  0000013E: CC                 int         3
  0000013F: CC                 int         3
?StringCopyWorkerA@@YGJPADIPAIPBDI@Z (long __stdcall StringCopyWorkerA(char *,unsigned int,unsigned int *,char const *,unsigned int)):
  00000140: 55                 push        ebp
  00000141: 8B EC              mov         ebp,esp
  00000143: 83 EC 08           sub         esp,8
  00000146: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000014D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000154: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0WZResult@@QAE@XZ
            00
  0000015B: C7 45 F8 00 00 00  mov         dword ptr [ebp-8],offset ??0WZResult@@QAE@XZ
            00
  00000162: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  00000166: 74 49              je          000001B1
  00000168: 83 7D 18 00        cmp         dword ptr [ebp+18h],0
  0000016C: 74 43              je          000001B1
  0000016E: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  00000171: 0F BE 08           movsx       ecx,byte ptr [eax]
  00000174: 85 C9              test        ecx,ecx
  00000176: 74 39              je          000001B1
  00000178: 8B 55 08           mov         edx,dword ptr [ebp+8]
  0000017B: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  0000017E: 8A 08              mov         cl,byte ptr [eax]
  00000180: 88 0A              mov         byte ptr [edx],cl
  00000182: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000185: 83 C2 01           add         edx,1
  00000188: 89 55 08           mov         dword ptr [ebp+8],edx
  0000018B: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  0000018E: 83 C0 01           add         eax,1
  00000191: 89 45 14           mov         dword ptr [ebp+14h],eax
  00000194: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000197: 83 E9 01           sub         ecx,1
  0000019A: 89 4D 0C           mov         dword ptr [ebp+0Ch],ecx
  0000019D: 8B 55 18           mov         edx,dword ptr [ebp+18h]
  000001A0: 83 EA 01           sub         edx,1
  000001A3: 89 55 18           mov         dword ptr [ebp+18h],edx
  000001A6: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  000001A9: 83 C0 01           add         eax,1
  000001AC: 89 45 F8           mov         dword ptr [ebp-8],eax
  000001AF: EB B1              jmp         00000162
  000001B1: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  000001B5: 75 19              jne         000001D0
  000001B7: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  000001BA: 83 E9 01           sub         ecx,1
  000001BD: 89 4D 08           mov         dword ptr [ebp+8],ecx
  000001C0: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  000001C3: 83 EA 01           sub         edx,1
  000001C6: 89 55 F8           mov         dword ptr [ebp-8],edx
  000001C9: C7 45 FC 7A 00 07  mov         dword ptr [ebp-4],8007007Ah
            80
  000001D0: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000001D3: C6 00 00           mov         byte ptr [eax],0
  000001D6: 83 7D 10 00        cmp         dword ptr [ebp+10h],0
  000001DA: 74 08              je          000001E4
  000001DC: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  000001DF: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  000001E2: 89 11              mov         dword ptr [ecx],edx
  000001E4: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000001E7: 8B E5              mov         esp,ebp
  000001E9: 5D                 pop         ebp
  000001EA: C2 14 00           ret         14h
  000001ED: CC                 int         3
  000001EE: CC                 int         3
  000001EF: CC                 int         3
??1WZResult@@QAE@XZ (public: __thiscall WZResult::~WZResult(void)):
  000001F0: 55                 push        ebp
  000001F1: 8B EC              mov         ebp,esp
  000001F3: 51                 push        ecx
  000001F4: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  000001FB: 89 4D FC           mov         dword ptr [ebp-4],ecx
  000001FE: 8B E5              mov         esp,ebp
  00000200: 5D                 pop         ebp
  00000201: C3                 ret
  00000202: CC                 int         3
  00000203: CC                 int         3
  00000204: CC                 int         3
  00000205: CC                 int         3
  00000206: CC                 int         3
  00000207: CC                 int         3
  00000208: CC                 int         3
  00000209: CC                 int         3
  0000020A: CC                 int         3
  0000020B: CC                 int         3
  0000020C: CC                 int         3
  0000020D: CC                 int         3
  0000020E: CC                 int         3
  0000020F: CC                 int         3
?IsSuccess@WZResult@@QAEHXZ (public: int __thiscall WZResult::IsSuccess(void)):
  00000210: 55                 push        ebp
  00000211: 8B EC              mov         ebp,esp
  00000213: 83 EC 08           sub         esp,8
  00000216: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000021D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000224: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000227: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000022A: 83 38 00           cmp         dword ptr [eax],0
  0000022D: 75 12              jne         00000241
  0000022F: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000232: 83 79 04 00        cmp         dword ptr [ecx+4],0
  00000236: 75 09              jne         00000241
  00000238: C7 45 F8 01 00 00  mov         dword ptr [ebp-8],1
            00
  0000023F: EB 07              jmp         00000248
  00000241: C7 45 F8 00 00 00  mov         dword ptr [ebp-8],offset ??0WZResult@@QAE@XZ
            00
  00000248: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  0000024B: 8B E5              mov         esp,ebp
  0000024D: 5D                 pop         ebp
  0000024E: C3                 ret
  0000024F: CC                 int         3
?GetErrorCode@WZResult@@QAEKXZ (public: unsigned long __thiscall WZResult::GetErrorCode(void)):
  00000250: 55                 push        ebp
  00000251: 8B EC              mov         ebp,esp
  00000253: 51                 push        ecx
  00000254: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000025B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000025E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000261: 8B 00              mov         eax,dword ptr [eax]
  00000263: 8B E5              mov         esp,ebp
  00000265: 5D                 pop         ebp
  00000266: C3                 ret
  00000267: CC                 int         3
  00000268: CC                 int         3
  00000269: CC                 int         3
  0000026A: CC                 int         3
  0000026B: CC                 int         3
  0000026C: CC                 int         3
  0000026D: CC                 int         3
  0000026E: CC                 int         3
  0000026F: CC                 int         3
?GetErrorMessage@WZResult@@QAEPADXZ (public: char * __thiscall WZResult::GetErrorMessage(void)):
  00000270: 55                 push        ebp
  00000271: 8B EC              mov         ebp,esp
  00000273: 51                 push        ecx
  00000274: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000027B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000027E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000281: 83 C0 08           add         eax,8
  00000284: 8B E5              mov         esp,ebp
  00000286: 5D                 pop         ebp
  00000287: C3                 ret
  00000288: CC                 int         3
  00000289: CC                 int         3
  0000028A: CC                 int         3
  0000028B: CC                 int         3
  0000028C: CC                 int         3
  0000028D: CC                 int         3
  0000028E: CC                 int         3
  0000028F: CC                 int         3
?GetWindowErrorCode@WZResult@@QAEKXZ (public: unsigned long __thiscall WZResult::GetWindowErrorCode(void)):
  00000290: 55                 push        ebp
  00000291: 8B EC              mov         ebp,esp
  00000293: 51                 push        ecx
  00000294: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000029B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000029E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000002A1: 8B 40 04           mov         eax,dword ptr [eax+4]
  000002A4: 8B E5              mov         esp,ebp
  000002A6: 5D                 pop         ebp
  000002A7: C3                 ret
  000002A8: CC                 int         3
  000002A9: CC                 int         3
  000002AA: CC                 int         3
  000002AB: CC                 int         3
  000002AC: CC                 int         3
  000002AD: CC                 int         3
  000002AE: CC                 int         3
  000002AF: CC                 int         3
??4WZResult@@QAEAAV0@ABV0@@Z (public: class WZResult & __thiscall WZResult::operator=(class WZResult const &)):
  000002B0: 55                 push        ebp
  000002B1: 8B EC              mov         ebp,esp
  000002B3: 51                 push        ecx
  000002B4: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  000002BB: 89 4D FC           mov         dword ptr [ebp-4],ecx
  000002BE: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000002C1: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  000002C4: 8B 11              mov         edx,dword ptr [ecx]
  000002C6: 89 10              mov         dword ptr [eax],edx
  000002C8: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000002CB: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  000002CE: 8B 51 04           mov         edx,dword ptr [ecx+4]
  000002D1: 89 50 04           mov         dword ptr [eax+4],edx
  000002D4: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000002D7: 83 C0 08           add         eax,8
  000002DA: 50                 push        eax
  000002DB: 68 00 04 00 00     push        400h
  000002E0: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000002E3: 83 C1 08           add         ecx,8
  000002E6: 51                 push        ecx
  000002E7: E8 00 00 00 00     call        000002EC
  000002EC: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000002EF: 83 C4 04           add         esp,4
  000002F2: 3B EC              cmp         ebp,esp
  000002F4: E8 00 00 00 00     call        000002F9
  000002F9: 8B E5              mov         esp,ebp
  000002FB: 5D                 pop         ebp
  000002FC: C2 04 00           ret         4
  000002FF: CC                 int         3
?SetResult@WZResult@@QAAXKKPADZZ (public: void __cdecl WZResult::SetResult(unsigned long,unsigned long,char *,...)):
  00000300: 55                 push        ebp
  00000301: 8B EC              mov         ebp,esp
  00000303: 51                 push        ecx
  00000304: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000030B: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000030E: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000311: 89 08              mov         dword ptr [eax],ecx
  00000313: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000316: 8B 45 10           mov         eax,dword ptr [ebp+10h]
  00000319: 89 42 04           mov         dword ptr [edx+4],eax
  0000031C: 8D 4D 18           lea         ecx,[ebp+18h]
  0000031F: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000322: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000325: 52                 push        edx
  00000326: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  00000329: 50                 push        eax
  0000032A: 68 00 04 00 00     push        400h
  0000032F: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000332: 83 C1 08           add         ecx,8
  00000335: 51                 push        ecx
  00000336: E8 00 00 00 00     call        0000033B
  0000033B: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0WZResult@@QAE@XZ
            00
  00000342: 83 C4 04           add         esp,4
  00000345: 3B EC              cmp         ebp,esp
  00000347: E8 00 00 00 00     call        0000034C
  0000034C: 8B E5              mov         esp,ebp
  0000034E: 5D                 pop         ebp
  0000034F: C3                 ret
?StringVPrintfWorkerA@@YGJPADIPAIPBD0@Z (long __stdcall StringVPrintfWorkerA(char *,unsigned int,unsigned int *,char const *,char *)):
  00000350: 55                 push        ebp
  00000351: 8B EC              mov         ebp,esp
  00000353: 83 EC 10           sub         esp,10h
  00000356: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000035B: 89 45 F0           mov         dword ptr [ebp-10h],eax
  0000035E: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000361: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000364: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000367: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0WZResult@@QAE@XZ
            00
  0000036E: C7 45 F0 00 00 00  mov         dword ptr [ebp-10h],offset ??0WZResult@@QAE@XZ
            00
  00000375: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000378: 83 E8 01           sub         eax,1
  0000037B: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  0000037E: 8B 4D 18           mov         ecx,dword ptr [ebp+18h]
  00000381: 51                 push        ecx
  00000382: 8B 55 14           mov         edx,dword ptr [ebp+14h]
  00000385: 52                 push        edx
  00000386: 8B 45 F4           mov         eax,dword ptr [ebp-0Ch]
  00000389: 50                 push        eax
  0000038A: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000038D: 51                 push        ecx
  0000038E: E8 00 00 00 00     call        00000393
  00000393: 83 C4 10           add         esp,10h
  00000396: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000399: 83 7D F8 00        cmp         dword ptr [ebp-8],0
  0000039D: 7C 08              jl          000003A7
  0000039F: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  000003A2: 3B 55 F4           cmp         edx,dword ptr [ebp-0Ch]
  000003A5: 76 1E              jbe         000003C5
  000003A7: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000003AA: 03 45 F4           add         eax,dword ptr [ebp-0Ch]
  000003AD: 89 45 08           mov         dword ptr [ebp+8],eax
  000003B0: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  000003B3: C6 01 00           mov         byte ptr [ecx],0
  000003B6: 8B 55 F4           mov         edx,dword ptr [ebp-0Ch]
  000003B9: 89 55 F0           mov         dword ptr [ebp-10h],edx
  000003BC: C7 45 FC 7A 00 07  mov         dword ptr [ebp-4],8007007Ah
            80
  000003C3: EB 25              jmp         000003EA
  000003C5: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  000003C8: 3B 45 F4           cmp         eax,dword ptr [ebp-0Ch]
  000003CB: 75 17              jne         000003E4
  000003CD: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  000003D0: 03 4D F4           add         ecx,dword ptr [ebp-0Ch]
  000003D3: 89 4D 08           mov         dword ptr [ebp+8],ecx
  000003D6: 8B 55 08           mov         edx,dword ptr [ebp+8]
  000003D9: C6 02 00           mov         byte ptr [edx],0
  000003DC: 8B 45 F4           mov         eax,dword ptr [ebp-0Ch]
  000003DF: 89 45 F0           mov         dword ptr [ebp-10h],eax
  000003E2: EB 06              jmp         000003EA
  000003E4: 8B 4D F8           mov         ecx,dword ptr [ebp-8]
  000003E7: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  000003EA: 83 7D 10 00        cmp         dword ptr [ebp+10h],0
  000003EE: 74 08              je          000003F8
  000003F0: 8B 55 10           mov         edx,dword ptr [ebp+10h]
  000003F3: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  000003F6: 89 02              mov         dword ptr [edx],eax
  000003F8: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000003FB: 83 C4 10           add         esp,10h
  000003FE: 3B EC              cmp         ebp,esp
  00000400: E8 00 00 00 00     call        00000405
  00000405: 8B E5              mov         esp,ebp
  00000407: 5D                 pop         ebp
  00000408: C2 14 00           ret         14h
  0000040B: CC                 int         3
  0000040C: CC                 int         3
  0000040D: CC                 int         3
  0000040E: CC                 int         3
  0000040F: CC                 int         3
?SetSuccessResult@WZResult@@QAEXXZ (public: void __thiscall WZResult::SetSuccessResult(void)):
  00000410: 55                 push        ebp
  00000411: 8B EC              mov         ebp,esp
  00000413: 51                 push        ecx
  00000414: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000041B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000041E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000421: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??0WZResult@@QAE@XZ
  00000427: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000042A: C7 41 04 00 00 00  mov         dword ptr [ecx+4],offset ??0WZResult@@QAE@XZ
            00
  00000431: 68 00 00 00 00     push        offset ??0WZResult@@QAE@XZ
  00000436: 68 00 04 00 00     push        400h
  0000043B: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000043E: 83 C2 08           add         edx,8
  00000441: 52                 push        edx
  00000442: E8 00 00 00 00     call        00000447
  00000447: 83 C4 04           add         esp,4
  0000044A: 3B EC              cmp         ebp,esp
  0000044C: E8 00 00 00 00     call        00000451
  00000451: 8B E5              mov         esp,ebp
  00000453: 5D                 pop         ebp
  00000454: C3                 ret
  00000455: CC                 int         3
  00000456: CC                 int         3
  00000457: CC                 int         3
  00000458: CC                 int         3
  00000459: CC                 int         3
  0000045A: CC                 int         3
  0000045B: CC                 int         3
  0000045C: CC                 int         3
  0000045D: CC                 int         3
  0000045E: CC                 int         3
  0000045F: CC                 int         3
?BuildSuccessResult@WZResult@@SA?AV1@XZ (public: static class WZResult __cdecl WZResult::BuildSuccessResult(void)):
  00000460: 55                 push        ebp
  00000461: 8B EC              mov         ebp,esp
  00000463: 6A FF              push        0FFh
  00000465: 68 00 00 00 00     push        offset ??0WZResult@@QAE@XZ
  0000046A: 64 A1 00 00 00 00  mov         eax,fs:[??0WZResult@@QAE@XZ]
  00000470: 50                 push        eax
  00000471: 81 EC 18 04 00 00  sub         esp,418h
  00000477: 56                 push        esi
  00000478: 57                 push        edi
  00000479: 8D BD DC FB FF FF  lea         edi,[ebp-424h]
  0000047F: B9 06 01 00 00     mov         ecx,106h
  00000484: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000489: F3 AB              rep stos    dword ptr [edi]
  0000048B: A1 00 00 00 00     mov         eax,[??0WZResult@@QAE@XZ]
  00000490: 33 C5              xor         eax,ebp
  00000492: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000495: 50                 push        eax
  00000496: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000499: 64 A3 00 00 00 00  mov         fs:[??0WZResult@@QAE@XZ],eax
  0000049F: C7 85 DC FB FF FF  mov         dword ptr [ebp-424h],offset ??0WZResult@@QAE@XZ
            00 00 00 00
  000004A9: 8D 8D E4 FB FF FF  lea         ecx,[ebp-41Ch]
  000004AF: E8 00 00 00 00     call        000004B4
  000004B4: C7 45 FC 01 00 00  mov         dword ptr [ebp-4],1
            00
  000004BB: 8D 8D E4 FB FF FF  lea         ecx,[ebp-41Ch]
  000004C1: E8 00 00 00 00     call        000004C6
  000004C6: B9 02 01 00 00     mov         ecx,102h
  000004CB: 8D B5 E4 FB FF FF  lea         esi,[ebp-41Ch]
  000004D1: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  000004D4: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  000004D6: 8B 85 DC FB FF FF  mov         eax,dword ptr [ebp-424h]
  000004DC: 83 C8 01           or          eax,1
  000004DF: 89 85 DC FB FF FF  mov         dword ptr [ebp-424h],eax
  000004E5: C6 45 FC 00        mov         byte ptr [ebp-4],0
  000004E9: 8D 8D E4 FB FF FF  lea         ecx,[ebp-41Ch]
  000004EF: E8 00 00 00 00     call        000004F4
  000004F4: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000004F7: 52                 push        edx
  000004F8: 8B CD              mov         ecx,ebp
  000004FA: 50                 push        eax
  000004FB: 8D 15 00 00 00 00  lea         edx,[??0WZResult@@QAE@XZ]
  00000501: E8 00 00 00 00     call        00000506
  00000506: 58                 pop         eax
  00000507: 5A                 pop         edx
  00000508: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  0000050B: 64 89 0D 00 00 00  mov         dword ptr fs:[??0WZResult@@QAE@XZ],ecx
            00
  00000512: 59                 pop         ecx
  00000513: 5F                 pop         edi
  00000514: 5E                 pop         esi
  00000515: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000518: 33 CD              xor         ecx,ebp
  0000051A: E8 00 00 00 00     call        0000051F
  0000051F: 81 C4 24 04 00 00  add         esp,424h
  00000525: 3B EC              cmp         ebp,esp
  00000527: E8 00 00 00 00     call        0000052C
  0000052C: 8B E5              mov         esp,ebp
  0000052E: 5D                 pop         ebp
  0000052F: C3                 ret
$LN9:
  00000530: 01 00              add         dword ptr [eax],eax
  00000532: 00 00              add         byte ptr [eax],al
  00000534: 00 00              add         byte ptr [eax],al
  00000536: 00 00              add         byte ptr [eax],al
$LN8:
  00000538: E4 FB              in          al,0FBh
  0000053A: FF
  0000053B: FF 08              dec         dword ptr [eax]
  0000053D: 04 00              add         al,0
  0000053F: 00 00              add         byte ptr [eax],al
  00000541: 00 00              add         byte ptr [eax],al
  00000543: 00 72 65           add         byte ptr [edx+65h],dh
  00000546: 74 00              je          00000548
  00000548: CC                 int         3
  00000549: CC                 int         3
  0000054A: CC                 int         3
  0000054B: CC                 int         3
  0000054C: CC                 int         3
  0000054D: CC                 int         3
  0000054E: CC                 int         3
  0000054F: CC                 int         3
?BuildResult@WZResult@@SA?AV1@KKPADZZ (public: static class WZResult __cdecl WZResult::BuildResult(unsigned long,unsigned long,char *,...)):
  00000550: 55                 push        ebp
  00000551: 8B EC              mov         ebp,esp
  00000553: 6A FF              push        0FFh
  00000555: 68 00 00 00 00     push        offset ??0WZResult@@QAE@XZ
  0000055A: 64 A1 00 00 00 00  mov         eax,fs:[??0WZResult@@QAE@XZ]
  00000560: 50                 push        eax
  00000561: 81 EC 24 08 00 00  sub         esp,824h
  00000567: 56                 push        esi
  00000568: 57                 push        edi
  00000569: 8D BD D0 F7 FF FF  lea         edi,[ebp-830h]
  0000056F: B9 09 02 00 00     mov         ecx,209h
  00000574: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000579: F3 AB              rep stos    dword ptr [edi]
  0000057B: A1 00 00 00 00     mov         eax,[??0WZResult@@QAE@XZ]
  00000580: 33 C5              xor         eax,ebp
  00000582: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000585: 50                 push        eax
  00000586: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000589: 64 A3 00 00 00 00  mov         fs:[??0WZResult@@QAE@XZ],eax
  0000058F: C7 85 D0 F7 FF FF  mov         dword ptr [ebp-830h],offset ??0WZResult@@QAE@XZ
            00 00 00 00
  00000599: C6 85 EC FB FF FF  mov         byte ptr [ebp-414h],0
            00
  000005A0: 68 FF 03 00 00     push        3FFh
  000005A5: 6A 00              push        0
  000005A7: 8D 85 ED FB FF FF  lea         eax,[ebp-413h]
  000005AD: 50                 push        eax
  000005AE: E8 00 00 00 00     call        000005B3
  000005B3: 83 C4 0C           add         esp,0Ch
  000005B6: 8D 4D 18           lea         ecx,[ebp+18h]
  000005B9: 89 8D E4 FB FF FF  mov         dword ptr [ebp-41Ch],ecx
  000005BF: 8B 95 E4 FB FF FF  mov         edx,dword ptr [ebp-41Ch]
  000005C5: 52                 push        edx
  000005C6: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  000005C9: 50                 push        eax
  000005CA: 68 00 04 00 00     push        400h
  000005CF: 8D 8D EC FB FF FF  lea         ecx,[ebp-414h]
  000005D5: 51                 push        ecx
  000005D6: E8 00 00 00 00     call        000005DB
  000005DB: C7 85 E4 FB FF FF  mov         dword ptr [ebp-41Ch],offset ??0WZResult@@QAE@XZ
            00 00 00 00
  000005E5: 8D 8D D8 F7 FF FF  lea         ecx,[ebp-828h]
  000005EB: E8 00 00 00 00     call        000005F0
  000005F0: C7 45 FC 01 00 00  mov         dword ptr [ebp-4],1
            00
  000005F7: 8D 95 EC FB FF FF  lea         edx,[ebp-414h]
  000005FD: 52                 push        edx
  000005FE: 8B 45 10           mov         eax,dword ptr [ebp+10h]
  00000601: 50                 push        eax
  00000602: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000605: 51                 push        ecx
  00000606: 8D 95 D8 F7 FF FF  lea         edx,[ebp-828h]
  0000060C: 52                 push        edx
  0000060D: E8 00 00 00 00     call        00000612
  00000612: 83 C4 10           add         esp,10h
  00000615: B9 02 01 00 00     mov         ecx,102h
  0000061A: 8D B5 D8 F7 FF FF  lea         esi,[ebp-828h]
  00000620: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  00000623: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  00000625: 8B 85 D0 F7 FF FF  mov         eax,dword ptr [ebp-830h]
  0000062B: 83 C8 01           or          eax,1
  0000062E: 89 85 D0 F7 FF FF  mov         dword ptr [ebp-830h],eax
  00000634: C6 45 FC 00        mov         byte ptr [ebp-4],0
  00000638: 8D 8D D8 F7 FF FF  lea         ecx,[ebp-828h]
  0000063E: E8 00 00 00 00     call        00000643
  00000643: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000646: 52                 push        edx
  00000647: 8B CD              mov         ecx,ebp
  00000649: 50                 push        eax
  0000064A: 8D 15 00 00 00 00  lea         edx,[??0WZResult@@QAE@XZ]
  00000650: E8 00 00 00 00     call        00000655
  00000655: 58                 pop         eax
  00000656: 5A                 pop         edx
  00000657: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  0000065A: 64 89 0D 00 00 00  mov         dword ptr fs:[??0WZResult@@QAE@XZ],ecx
            00
  00000661: 59                 pop         ecx
  00000662: 5F                 pop         edi
  00000663: 5E                 pop         esi
  00000664: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000667: 33 CD              xor         ecx,ebp
  00000669: E8 00 00 00 00     call        0000066E
  0000066E: 81 C4 30 08 00 00  add         esp,830h
  00000674: 3B EC              cmp         ebp,esp
  00000676: E8 00 00 00 00     call        0000067B
  0000067B: 8B E5              mov         esp,ebp
  0000067D: 5D                 pop         ebp
  0000067E: C3                 ret
  0000067F: 90                 nop
$LN10:
  00000680: 02 00              add         al,byte ptr [eax]
  00000682: 00 00              add         byte ptr [eax],al
  00000684: 00 00              add         byte ptr [eax],al
  00000686: 00 00              add         byte ptr [eax],al
$LN9:
  00000688: EC                 in          al,dx
  00000689: FB                 sti
  0000068A: FF
  0000068B: FF 00              inc         dword ptr [eax]
  0000068D: 04 00              add         al,0
  0000068F: 00 00              add         byte ptr [eax],al
  00000691: 00 00              add         byte ptr [eax],al
  00000693: 00 D8              add         al,bl
  00000695: F7 FF              idiv        eax,edi
  00000697: FF 08              dec         dword ptr [eax]
  00000699: 04 00              add         al,0
  0000069B: 00 00              add         byte ptr [eax],al
  0000069D: 00 00              add         byte ptr [eax],al
  0000069F: 00 72 65           add         byte ptr [edx+65h],dh
  000006A2: 74 00              je          $LN6
$LN6:
  000006A4: 73 7A              jae         00000720
  000006A6: 45                 inc         ebp
  000006A7: 72 72              jb          0000071B
  000006A9: 6F                 outs        dx,dword ptr [esi]
  000006AA: 72 4D              jb          000006F9
  000006AC: 65 73 73           jae         00000722
  000006AF: 61                 popad
  000006B0: 67
  000006B1: 65
  000006B2: 00

?StringCchCopyA@@YGJPADIPBD@Z (long __stdcall StringCchCopyA(char *,unsigned int,char const *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 68 FF FF FF 7F     push        7FFFFFFFh
  00000010: 6A 00              push        0
  00000012: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000015: 50                 push        eax
  00000016: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000019: 51                 push        ecx
  0000001A: E8 00 00 00 00     call        0000001F
  0000001F: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000022: 83 7D FC 00        cmp         dword ptr [ebp-4],0
  00000026: 7C 1B              jl          00000043
  00000028: 68 FE FF FF 7F     push        7FFFFFFEh
  0000002D: 8B 55 10           mov         edx,dword ptr [ebp+10h]
  00000030: 52                 push        edx
  00000031: 6A 00              push        0
  00000033: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000036: 50                 push        eax
  00000037: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000003A: 51                 push        ecx
  0000003B: E8 00 00 00 00     call        00000040
  00000040: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000043: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000046: 83 C4 04           add         esp,4
  00000049: 3B EC              cmp         ebp,esp
  0000004B: E8 00 00 00 00     call        00000050
  00000050: 8B E5              mov         esp,ebp
  00000052: 5D                 pop         ebp
  00000053: C2 0C 00           ret         0Ch

?StringCchVPrintfA@@YGJPADIPBD0@Z (long __stdcall StringCchVPrintfA(char *,unsigned int,char const *,char *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 68 FF FF FF 7F     push        7FFFFFFFh
  00000010: 6A 00              push        0
  00000012: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000015: 50                 push        eax
  00000016: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000019: 51                 push        ecx
  0000001A: E8 00 00 00 00     call        0000001F
  0000001F: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000022: 83 7D FC 00        cmp         dword ptr [ebp-4],0
  00000026: 7C 1A              jl          00000042
  00000028: 8B 55 14           mov         edx,dword ptr [ebp+14h]
  0000002B: 52                 push        edx
  0000002C: 8B 45 10           mov         eax,dword ptr [ebp+10h]
  0000002F: 50                 push        eax
  00000030: 6A 00              push        0
  00000032: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000035: 51                 push        ecx
  00000036: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000039: 52                 push        edx
  0000003A: E8 00 00 00 00     call        0000003F
  0000003F: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000042: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000045: 83 C4 04           add         esp,4
  00000048: 3B EC              cmp         ebp,esp
  0000004A: E8 00 00 00 00     call        0000004F
  0000004F: 8B E5              mov         esp,ebp
  00000051: 5D                 pop         ebp
  00000052: C2 10 00           ret         10h

__unwindfunclet$?BuildSuccessResult@WZResult@@SA?AV1@XZ$0:
  00000000: 8D 8D E4 FB FF FF  lea         ecx,[ebp-41Ch]
  00000006: E9 00 00 00 00     jmp         __unwindfunclet$?BuildSuccessResult@WZResult@@SA?AV1@XZ$1
__unwindfunclet$?BuildSuccessResult@WZResult@@SA?AV1@XZ$1:
  0000000B: 8B 85 DC FB FF FF  mov         eax,dword ptr [ebp-424h]
  00000011: 83 E0 01           and         eax,1
  00000014: 0F 84 0F 00 00 00  je          00000029
  0000001A: 83 A5 DC FB FF FF  and         dword ptr [ebp-424h],0FEh
            FE
  00000021: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000024: E9 00 00 00 00     jmp         00000029
  00000029: C3                 ret
__ehhandler$?BuildSuccessResult@WZResult@@SA?AV1@XZ:
  0000002A: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000002E: 8D 42 0C           lea         eax,[edx+0Ch]
  00000031: 8B 8A DC FB FF FF  mov         ecx,dword ptr [edx-424h]
  00000037: 33 C8              xor         ecx,eax
  00000039: E8 00 00 00 00     call        0000003E
  0000003E: 8B 4A FC           mov         ecx,dword ptr [edx-4]
  00000041: 33 C8              xor         ecx,eax
  00000043: E8 00 00 00 00     call        00000048
  00000048: B8 00 00 00 00     mov         eax,offset __unwindfunclet$?BuildSuccessResult@WZResult@@SA?AV1@XZ$0
  0000004D: E9 00 00 00 00     jmp         __unwindfunclet$?BuildResult@WZResult@@SA?AV1@KKPADZZ$0
__unwindfunclet$?BuildResult@WZResult@@SA?AV1@KKPADZZ$0:
  00000052: 8D 8D D8 F7 FF FF  lea         ecx,[ebp-828h]
  00000058: E9 00 00 00 00     jmp         __unwindfunclet$?BuildResult@WZResult@@SA?AV1@KKPADZZ$1
__unwindfunclet$?BuildResult@WZResult@@SA?AV1@KKPADZZ$1:
  0000005D: 8B 85 D0 F7 FF FF  mov         eax,dword ptr [ebp-830h]
  00000063: 83 E0 01           and         eax,1
  00000066: 0F 84 0F 00 00 00  je          0000007B
  0000006C: 83 A5 D0 F7 FF FF  and         dword ptr [ebp-830h],0FEh
            FE
  00000073: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000076: E9 00 00 00 00     jmp         0000007B
  0000007B: C3                 ret
__ehhandler$?BuildResult@WZResult@@SA?AV1@KKPADZZ:
  0000007C: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  00000080: 8D 42 0C           lea         eax,[edx+0Ch]
  00000083: 8B 8A D0 F7 FF FF  mov         ecx,dword ptr [edx-830h]
  00000089: 33 C8              xor         ecx,eax
  0000008B: E8 00 00 00 00     call        00000090
  00000090: 8B 4A FC           mov         ecx,dword ptr [edx-4]
  00000093: 33 C8              xor         ecx,eax
  00000095: E8 00 00 00 00     call        0000009A
  0000009A: B8 00 00 00 00     mov         eax,offset __unwindfunclet$?BuildSuccessResult@WZResult@@SA?AV1@XZ$0
  0000009F: E9 00 00 00 00     jmp         000000A4

??0DownloadFileInfo@@QAE@XZ (public: __thiscall DownloadFileInfo::DownloadFileInfo(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: C7 80 30 0B 00 00  mov         dword ptr [eax+0B30h],offset ??0DownloadFileInfo@@QAE@XZ
            00 00 00 00
  0000001B: C7 80 34 0B 00 00  mov         dword ptr [eax+0B34h],offset ??0DownloadFileInfo@@QAE@XZ
            00 00 00 00
  00000025: 68 04 01 00 00     push        104h
  0000002A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000002D: 51                 push        ecx
  0000002E: E8 00 00 00 00     call        00000033
  00000033: 83 C4 08           add         esp,8
  00000036: 68 04 01 00 00     push        104h
  0000003B: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000003E: 81 C2 04 01 00 00  add         edx,104h
  00000044: 52                 push        edx
  00000045: E8 00 00 00 00     call        0000004A
  0000004A: 83 C4 08           add         esp,8
  0000004D: 68 24 08 00 00     push        824h
  00000052: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000055: 05 08 02 00 00     add         eax,208h
  0000005A: 50                 push        eax
  0000005B: E8 00 00 00 00     call        00000060
  00000060: 83 C4 08           add         esp,8
  00000063: 68 04 01 00 00     push        104h
  00000068: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000006B: 81 C1 2C 0A 00 00  add         ecx,0A2Ch
  00000071: 51                 push        ecx
  00000072: E8 00 00 00 00     call        00000077
  00000077: 83 C4 08           add         esp,8
  0000007A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000007D: 83 C4 04           add         esp,4
  00000080: 3B EC              cmp         ebp,esp
  00000082: E8 00 00 00 00     call        00000087
  00000087: 8B E5              mov         esp,ebp
  00000089: 5D                 pop         ebp
  0000008A: C3                 ret
  0000008B: CC                 int         3
  0000008C: CC                 int         3
  0000008D: CC                 int         3
  0000008E: CC                 int         3
  0000008F: CC                 int         3
??1DownloadFileInfo@@QAE@XZ (public: __thiscall DownloadFileInfo::~DownloadFileInfo(void)):
  00000090: 55                 push        ebp
  00000091: 8B EC              mov         ebp,esp
  00000093: 51                 push        ecx
  00000094: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000009B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000009E: 8B E5              mov         esp,ebp
  000000A0: 5D                 pop         ebp
  000000A1: C3                 ret
  000000A2: CC                 int         3
  000000A3: CC                 int         3
  000000A4: CC                 int         3
  000000A5: CC                 int         3
  000000A6: CC                 int         3
  000000A7: CC                 int         3
  000000A8: CC                 int         3
  000000A9: CC                 int         3
  000000AA: CC                 int         3
  000000AB: CC                 int         3
  000000AC: CC                 int         3
  000000AD: CC                 int         3
  000000AE: CC                 int         3
  000000AF: CC                 int         3
?GetFileName@DownloadFileInfo@@QAEPADXZ (public: char * __thiscall DownloadFileInfo::GetFileName(void)):
  000000B0: 55                 push        ebp
  000000B1: 8B EC              mov         ebp,esp
  000000B3: 51                 push        ecx
  000000B4: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  000000BB: 89 4D FC           mov         dword ptr [ebp-4],ecx
  000000BE: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000000C1: 8B E5              mov         esp,ebp
  000000C3: 5D                 pop         ebp
  000000C4: C3                 ret
  000000C5: CC                 int         3
  000000C6: CC                 int         3
  000000C7: CC                 int         3
  000000C8: CC                 int         3
  000000C9: CC                 int         3
  000000CA: CC                 int         3
  000000CB: CC                 int         3
  000000CC: CC                 int         3
  000000CD: CC                 int         3
  000000CE: CC                 int         3
  000000CF: CC                 int         3
?GetLocalFilePath@DownloadFileInfo@@QAEPADXZ (public: char * __thiscall DownloadFileInfo::GetLocalFilePath(void)):
  000000D0: 55                 push        ebp
  000000D1: 8B EC              mov         ebp,esp
  000000D3: 51                 push        ecx
  000000D4: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  000000DB: 89 4D FC           mov         dword ptr [ebp-4],ecx
  000000DE: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000000E1: 05 04 01 00 00     add         eax,104h
  000000E6: 8B E5              mov         esp,ebp
  000000E8: 5D                 pop         ebp
  000000E9: C3                 ret
  000000EA: CC                 int         3
  000000EB: CC                 int         3
  000000EC: CC                 int         3
  000000ED: CC                 int         3
  000000EE: CC                 int         3
  000000EF: CC                 int         3
?GetRemoteFilePath@DownloadFileInfo@@QAEPADXZ (public: char * __thiscall DownloadFileInfo::GetRemoteFilePath(void)):
  000000F0: 55                 push        ebp
  000000F1: 8B EC              mov         ebp,esp
  000000F3: 51                 push        ecx
  000000F4: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  000000FB: 89 4D FC           mov         dword ptr [ebp-4],ecx
  000000FE: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000101: 05 08 02 00 00     add         eax,208h
  00000106: 8B E5              mov         esp,ebp
  00000108: 5D                 pop         ebp
  00000109: C3                 ret
  0000010A: CC                 int         3
  0000010B: CC                 int         3
  0000010C: CC                 int         3
  0000010D: CC                 int         3
  0000010E: CC                 int         3
  0000010F: CC                 int         3
?GetTargetDirPath@DownloadFileInfo@@QAEPADXZ (public: char * __thiscall DownloadFileInfo::GetTargetDirPath(void)):
  00000110: 55                 push        ebp
  00000111: 8B EC              mov         ebp,esp
  00000113: 51                 push        ecx
  00000114: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000011B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000011E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000121: 05 2C 0A 00 00     add         eax,0A2Ch
  00000126: 8B E5              mov         esp,ebp
  00000128: 5D                 pop         ebp
  00000129: C3                 ret
  0000012A: CC                 int         3
  0000012B: CC                 int         3
  0000012C: CC                 int         3
  0000012D: CC                 int         3
  0000012E: CC                 int         3
  0000012F: CC                 int         3
?GetFileLength@DownloadFileInfo@@QAE_KXZ (public: unsigned __int64 __thiscall DownloadFileInfo::GetFileLength(void)):
  00000130: 55                 push        ebp
  00000131: 8B EC              mov         ebp,esp
  00000133: 51                 push        ecx
  00000134: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000013B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000013E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000141: 8B 81 30 0B 00 00  mov         eax,dword ptr [ecx+0B30h]
  00000147: 8B 91 34 0B 00 00  mov         edx,dword ptr [ecx+0B34h]
  0000014D: 8B E5              mov         esp,ebp
  0000014F: 5D                 pop         ebp
  00000150: C3                 ret
  00000151: CC                 int         3
  00000152: CC                 int         3
  00000153: CC                 int         3
  00000154: CC                 int         3
  00000155: CC                 int         3
  00000156: CC                 int         3
  00000157: CC                 int         3
  00000158: CC                 int         3
  00000159: CC                 int         3
  0000015A: CC                 int         3
  0000015B: CC                 int         3
  0000015C: CC                 int         3
  0000015D: CC                 int         3
  0000015E: CC                 int         3
  0000015F: CC                 int         3
?SetFilePath@DownloadFileInfo@@QAEXPAD000@Z (public: void __thiscall DownloadFileInfo::SetFilePath(char *,char *,char *,char *)):
  00000160: 55                 push        ebp
  00000161: 8B EC              mov         ebp,esp
  00000163: 51                 push        ecx
  00000164: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000016B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000016E: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  00000172: 75 1E              jne         00000192
  00000174: 68 00 00 00 00     push        offset ??0DownloadFileInfo@@QAE@XZ
  00000179: 6A 00              push        0
  0000017B: 6A 27              push        27h
  0000017D: 68 00 00 00 00     push        offset ??0DownloadFileInfo@@QAE@XZ
  00000182: 6A 02              push        2
  00000184: E8 00 00 00 00     call        00000189
  00000189: 83 C4 14           add         esp,14h
  0000018C: 83 F8 01           cmp         eax,1
  0000018F: 75 01              jne         00000192
  00000191: CC                 int         3
  00000192: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  00000196: 75 1E              jne         000001B6
  00000198: 68 00 00 00 00     push        offset ??0DownloadFileInfo@@QAE@XZ
  0000019D: 6A 00              push        0
  0000019F: 6A 28              push        28h
  000001A1: 68 00 00 00 00     push        offset ??0DownloadFileInfo@@QAE@XZ
  000001A6: 6A 02              push        2
  000001A8: E8 00 00 00 00     call        000001AD
  000001AD: 83 C4 14           add         esp,14h
  000001B0: 83 F8 01           cmp         eax,1
  000001B3: 75 01              jne         000001B6
  000001B5: CC                 int         3
  000001B6: 83 7D 10 00        cmp         dword ptr [ebp+10h],0
  000001BA: 75 1E              jne         000001DA
  000001BC: 68 00 00 00 00     push        offset ??0DownloadFileInfo@@QAE@XZ
  000001C1: 6A 00              push        0
  000001C3: 6A 29              push        29h
  000001C5: 68 00 00 00 00     push        offset ??0DownloadFileInfo@@QAE@XZ
  000001CA: 6A 02              push        2
  000001CC: E8 00 00 00 00     call        000001D1
  000001D1: 83 C4 14           add         esp,14h
  000001D4: 83 F8 01           cmp         eax,1
  000001D7: 75 01              jne         000001DA
  000001D9: CC                 int         3
  000001DA: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000001DD: 0F BE 08           movsx       ecx,byte ptr [eax]
  000001E0: 85 C9              test        ecx,ecx
  000001E2: 75 1E              jne         00000202
  000001E4: 68 00 00 00 00     push        offset ??0DownloadFileInfo@@QAE@XZ
  000001E9: 6A 00              push        0
  000001EB: 6A 2B              push        2Bh
  000001ED: 68 00 00 00 00     push        offset ??0DownloadFileInfo@@QAE@XZ
  000001F2: 6A 02              push        2
  000001F4: E8 00 00 00 00     call        000001F9
  000001F9: 83 C4 14           add         esp,14h
  000001FC: 83 F8 01           cmp         eax,1
  000001FF: 75 01              jne         00000202
  00000201: CC                 int         3
  00000202: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000205: 0F BE 08           movsx       ecx,byte ptr [eax]
  00000208: 85 C9              test        ecx,ecx
  0000020A: 75 1E              jne         0000022A
  0000020C: 68 00 00 00 00     push        offset ??0DownloadFileInfo@@QAE@XZ
  00000211: 6A 00              push        0
  00000213: 6A 2C              push        2Ch
  00000215: 68 00 00 00 00     push        offset ??0DownloadFileInfo@@QAE@XZ
  0000021A: 6A 02              push        2
  0000021C: E8 00 00 00 00     call        00000221
  00000221: 83 C4 14           add         esp,14h
  00000224: 83 F8 01           cmp         eax,1
  00000227: 75 01              jne         0000022A
  00000229: CC                 int         3
  0000022A: 8B 45 10           mov         eax,dword ptr [ebp+10h]
  0000022D: 0F BE 08           movsx       ecx,byte ptr [eax]
  00000230: 85 C9              test        ecx,ecx
  00000232: 75 1E              jne         00000252
  00000234: 68 00 00 00 00     push        offset ??0DownloadFileInfo@@QAE@XZ
  00000239: 6A 00              push        0
  0000023B: 6A 2D              push        2Dh
  0000023D: 68 00 00 00 00     push        offset ??0DownloadFileInfo@@QAE@XZ
  00000242: 6A 02              push        2
  00000244: E8 00 00 00 00     call        00000249
  00000249: 83 C4 14           add         esp,14h
  0000024C: 83 F8 01           cmp         eax,1
  0000024F: 75 01              jne         00000252
  00000251: CC                 int         3
  00000252: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000255: 50                 push        eax
  00000256: 68 04 01 00 00     push        104h
  0000025B: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000025E: 51                 push        ecx
  0000025F: E8 00 00 00 00     call        00000264
  00000264: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  00000267: 52                 push        edx
  00000268: 68 04 01 00 00     push        104h
  0000026D: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000270: 05 04 01 00 00     add         eax,104h
  00000275: 50                 push        eax
  00000276: E8 00 00 00 00     call        0000027B
  0000027B: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  0000027E: 51                 push        ecx
  0000027F: 68 04 01 00 00     push        104h
  00000284: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000287: 81 C2 08 02 00 00  add         edx,208h
  0000028D: 52                 push        edx
  0000028E: E8 00 00 00 00     call        00000293
  00000293: 83 7D 14 00        cmp         dword ptr [ebp+14h],0
  00000297: 74 18              je          000002B1
  00000299: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  0000029C: 50                 push        eax
  0000029D: 68 04 01 00 00     push        104h
  000002A2: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000002A5: 81 C1 2C 0A 00 00  add         ecx,0A2Ch
  000002AB: 51                 push        ecx
  000002AC: E8 00 00 00 00     call        000002B1
  000002B1: 83 C4 04           add         esp,4
  000002B4: 3B EC              cmp         ebp,esp
  000002B6: E8 00 00 00 00     call        000002BB
  000002BB: 8B E5              mov         esp,ebp
  000002BD: 5D                 pop         ebp
  000002BE: C2 10 00           ret         10h
  000002C1: CC                 int         3
  000002C2: CC                 int         3
  000002C3: CC                 int         3
  000002C4: CC                 int         3
  000002C5: CC                 int         3
  000002C6: CC                 int         3
  000002C7: CC                 int         3
  000002C8: CC                 int         3
  000002C9: CC                 int         3
  000002CA: CC                 int         3
  000002CB: CC                 int         3
  000002CC: CC                 int         3
  000002CD: CC                 int         3
  000002CE: CC                 int         3
  000002CF: CC                 int         3
?StringValidateDestA@@YGJPADIPAII@Z (long __stdcall StringValidateDestA(char *,unsigned int,unsigned int *,unsigned int)):
  000002D0: 55                 push        ebp
  000002D1: 8B EC              mov         ebp,esp
  000002D3: 51                 push        ecx
  000002D4: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  000002DB: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0DownloadFileInfo@@QAE@XZ
            00
  000002E2: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  000002E6: 74 08              je          000002F0
  000002E8: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  000002EB: 3B 45 14           cmp         eax,dword ptr [ebp+14h]
  000002EE: 76 07              jbe         000002F7
  000002F0: C7 45 FC 57 00 07  mov         dword ptr [ebp-4],80070057h
            80
  000002F7: 83 7D 10 00        cmp         dword ptr [ebp+10h],0
  000002FB: 74 25              je          00000322
  000002FD: 83 7D FC 00        cmp         dword ptr [ebp-4],0
  00000301: 7C 16              jl          00000319
  00000303: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  00000306: 51                 push        ecx
  00000307: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  0000030A: 52                 push        edx
  0000030B: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000030E: 50                 push        eax
  0000030F: E8 00 00 00 00     call        00000314
  00000314: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000317: EB 09              jmp         00000322
  00000319: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  0000031C: C7 01 00 00 00 00  mov         dword ptr [ecx],offset ??0DownloadFileInfo@@QAE@XZ
  00000322: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000325: 83 C4 04           add         esp,4
  00000328: 3B EC              cmp         ebp,esp
  0000032A: E8 00 00 00 00     call        0000032F
  0000032F: 8B E5              mov         esp,ebp
  00000331: 5D                 pop         ebp
  00000332: C2 10 00           ret         10h
  00000335: CC                 int         3
  00000336: CC                 int         3
  00000337: CC                 int         3
  00000338: CC                 int         3
  00000339: CC                 int         3
  0000033A: CC                 int         3
  0000033B: CC                 int         3
  0000033C: CC                 int         3
  0000033D: CC                 int         3
  0000033E: CC                 int         3
  0000033F: CC                 int         3
?StringLengthWorkerA@@YGJPBDIPAI@Z (long __stdcall StringLengthWorkerA(char const *,unsigned int,unsigned int *)):
  00000340: 55                 push        ebp
  00000341: 8B EC              mov         ebp,esp
  00000343: 83 EC 08           sub         esp,8
  00000346: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000034D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  00000354: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0DownloadFileInfo@@QAE@XZ
            00
  0000035B: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  0000035E: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000361: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  00000365: 74 1E              je          00000385
  00000367: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000036A: 0F BE 11           movsx       edx,byte ptr [ecx]
  0000036D: 85 D2              test        edx,edx
  0000036F: 74 14              je          00000385
  00000371: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000374: 83 C0 01           add         eax,1
  00000377: 89 45 08           mov         dword ptr [ebp+8],eax
  0000037A: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  0000037D: 83 E9 01           sub         ecx,1
  00000380: 89 4D 0C           mov         dword ptr [ebp+0Ch],ecx
  00000383: EB DC              jmp         00000361
  00000385: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  00000389: 75 07              jne         00000392
  0000038B: C7 45 FC 57 00 07  mov         dword ptr [ebp-4],80070057h
            80
  00000392: 83 7D 10 00        cmp         dword ptr [ebp+10h],0
  00000396: 74 1C              je          000003B4
  00000398: 83 7D FC 00        cmp         dword ptr [ebp-4],0
  0000039C: 7C 0D              jl          000003AB
  0000039E: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  000003A1: 2B 55 0C           sub         edx,dword ptr [ebp+0Ch]
  000003A4: 8B 45 10           mov         eax,dword ptr [ebp+10h]
  000003A7: 89 10              mov         dword ptr [eax],edx
  000003A9: EB 09              jmp         000003B4
  000003AB: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  000003AE: C7 01 00 00 00 00  mov         dword ptr [ecx],offset ??0DownloadFileInfo@@QAE@XZ
  000003B4: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000003B7: 8B E5              mov         esp,ebp
  000003B9: 5D                 pop         ebp
  000003BA: C2 0C 00           ret         0Ch
  000003BD: CC                 int         3
  000003BE: CC                 int         3
  000003BF: CC                 int         3
?StringCopyWorkerA@@YGJPADIPAIPBDI@Z (long __stdcall StringCopyWorkerA(char *,unsigned int,unsigned int *,char const *,unsigned int)):
  000003C0: 55                 push        ebp
  000003C1: 8B EC              mov         ebp,esp
  000003C3: 83 EC 08           sub         esp,8
  000003C6: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  000003CD: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  000003D4: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0DownloadFileInfo@@QAE@XZ
            00
  000003DB: C7 45 F8 00 00 00  mov         dword ptr [ebp-8],offset ??0DownloadFileInfo@@QAE@XZ
            00
  000003E2: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  000003E6: 74 49              je          00000431
  000003E8: 83 7D 18 00        cmp         dword ptr [ebp+18h],0
  000003EC: 74 43              je          00000431
  000003EE: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  000003F1: 0F BE 08           movsx       ecx,byte ptr [eax]
  000003F4: 85 C9              test        ecx,ecx
  000003F6: 74 39              je          00000431
  000003F8: 8B 55 08           mov         edx,dword ptr [ebp+8]
  000003FB: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  000003FE: 8A 08              mov         cl,byte ptr [eax]
  00000400: 88 0A              mov         byte ptr [edx],cl
  00000402: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000405: 83 C2 01           add         edx,1
  00000408: 89 55 08           mov         dword ptr [ebp+8],edx
  0000040B: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  0000040E: 83 C0 01           add         eax,1
  00000411: 89 45 14           mov         dword ptr [ebp+14h],eax
  00000414: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000417: 83 E9 01           sub         ecx,1
  0000041A: 89 4D 0C           mov         dword ptr [ebp+0Ch],ecx
  0000041D: 8B 55 18           mov         edx,dword ptr [ebp+18h]
  00000420: 83 EA 01           sub         edx,1
  00000423: 89 55 18           mov         dword ptr [ebp+18h],edx
  00000426: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  00000429: 83 C0 01           add         eax,1
  0000042C: 89 45 F8           mov         dword ptr [ebp-8],eax
  0000042F: EB B1              jmp         000003E2
  00000431: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  00000435: 75 19              jne         00000450
  00000437: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000043A: 83 E9 01           sub         ecx,1
  0000043D: 89 4D 08           mov         dword ptr [ebp+8],ecx
  00000440: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  00000443: 83 EA 01           sub         edx,1
  00000446: 89 55 F8           mov         dword ptr [ebp-8],edx
  00000449: C7 45 FC 7A 00 07  mov         dword ptr [ebp-4],8007007Ah
            80
  00000450: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000453: C6 00 00           mov         byte ptr [eax],0
  00000456: 83 7D 10 00        cmp         dword ptr [ebp+10h],0
  0000045A: 74 08              je          00000464
  0000045C: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  0000045F: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  00000462: 89 11              mov         dword ptr [ecx],edx
  00000464: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000467: 8B E5              mov         esp,ebp
  00000469: 5D                 pop         ebp
  0000046A: C2 14 00           ret         14h
  0000046D: CC                 int         3
  0000046E: CC                 int         3
  0000046F: CC                 int         3
?SetFileLength@DownloadFileInfo@@QAEX_K@Z (public: void __thiscall DownloadFileInfo::SetFileLength(unsigned __int64)):
  00000470: 55                 push        ebp
  00000471: 8B EC              mov         ebp,esp
  00000473: 51                 push        ecx
  00000474: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000047B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000047E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000481: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000484: 89 88 30 0B 00 00  mov         dword ptr [eax+0B30h],ecx
  0000048A: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  0000048D: 89 90 34 0B 00 00  mov         dword ptr [eax+0B34h],edx
  00000493: 8B E5              mov         esp,ebp
  00000495: 5D                 pop         ebp
  00000496: C2 08 00           ret         8
  00000499: CC                 int         3
  0000049A: CC                 int         3
  0000049B: CC                 int         3
  0000049C: CC                 int         3
  0000049D: CC                 int         3
  0000049E: CC                 int         3
  0000049F: CC                 int         3
??0DownloadServerInfo@@QAE@XZ (public: __thiscall DownloadServerInfo::DownloadServerInfo(void)):
  000004A0: 55                 push        ebp
  000004A1: 8B EC              mov         ebp,esp
  000004A3: 51                 push        ecx
  000004A4: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  000004AB: 89 4D FC           mov         dword ptr [ebp-4],ecx
  000004AE: B8 15 00 00 00     mov         eax,15h
  000004B3: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000004B6: 66 89 81 24 09 00  mov         word ptr [ecx+924h],ax
            00
  000004BD: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  000004C0: C7 82 28 09 00 00  mov         dword ptr [edx+928h],offset ??0DownloadFileInfo@@QAE@XZ
            00 00 00 00
  000004CA: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000004CD: C7 80 2C 09 00 00  mov         dword ptr [eax+92Ch],1000h
            00 10 00 00
  000004D7: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000004DA: C7 81 30 09 00 00  mov         dword ptr [ecx+930h],1
            01 00 00 00
  000004E4: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  000004E7: C7 82 34 09 00 00  mov         dword ptr [edx+934h],offset ??0DownloadFileInfo@@QAE@XZ
            00 00 00 00
  000004F1: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000004F4: C7 80 38 09 00 00  mov         dword ptr [eax+938h],offset ??0DownloadFileInfo@@QAE@XZ
            00 00 00 00
  000004FE: 68 24 08 00 00     push        824h
  00000503: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000506: 51                 push        ecx
  00000507: E8 00 00 00 00     call        0000050C
  0000050C: 83 C4 08           add         esp,8
  0000050F: 68 80 00 00 00     push        80h
  00000514: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000517: 81 C2 24 08 00 00  add         edx,824h
  0000051D: 52                 push        edx
  0000051E: E8 00 00 00 00     call        00000523
  00000523: 83 C4 08           add         esp,8
  00000526: 68 80 00 00 00     push        80h
  0000052B: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000052E: 05 A4 08 00 00     add         eax,8A4h
  00000533: 50                 push        eax
  00000534: E8 00 00 00 00     call        00000539
  00000539: 83 C4 08           add         esp,8
  0000053C: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000053F: 83 C4 04           add         esp,4
  00000542: 3B EC              cmp         ebp,esp
  00000544: E8 00 00 00 00     call        00000549
  00000549: 8B E5              mov         esp,ebp
  0000054B: 5D                 pop         ebp
  0000054C: C3                 ret
  0000054D: CC                 int         3
  0000054E: CC                 int         3
  0000054F: CC                 int         3
??1DownloadServerInfo@@QAE@XZ (public: __thiscall DownloadServerInfo::~DownloadServerInfo(void)):
  00000550: 55                 push        ebp
  00000551: 8B EC              mov         ebp,esp
  00000553: 51                 push        ecx
  00000554: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000055B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000055E: 8B E5              mov         esp,ebp
  00000560: 5D                 pop         ebp
  00000561: C3                 ret
  00000562: CC                 int         3
  00000563: CC                 int         3
  00000564: CC                 int         3
  00000565: CC                 int         3
  00000566: CC                 int         3
  00000567: CC                 int         3
  00000568: CC                 int         3
  00000569: CC                 int         3
  0000056A: CC                 int         3
  0000056B: CC                 int         3
  0000056C: CC                 int         3
  0000056D: CC                 int         3
  0000056E: CC                 int         3
  0000056F: CC                 int         3
?GetServerURL@DownloadServerInfo@@QAEPADXZ (public: char * __thiscall DownloadServerInfo::GetServerURL(void)):
  00000570: 55                 push        ebp
  00000571: 8B EC              mov         ebp,esp
  00000573: 51                 push        ecx
  00000574: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000057B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000057E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000581: 8B E5              mov         esp,ebp
  00000583: 5D                 pop         ebp
  00000584: C3                 ret
  00000585: CC                 int         3
  00000586: CC                 int         3
  00000587: CC                 int         3
  00000588: CC                 int         3
  00000589: CC                 int         3
  0000058A: CC                 int         3
  0000058B: CC                 int         3
  0000058C: CC                 int         3
  0000058D: CC                 int         3
  0000058E: CC                 int         3
  0000058F: CC                 int         3
?GetUserID@DownloadServerInfo@@QAEPADXZ (public: char * __thiscall DownloadServerInfo::GetUserID(void)):
  00000590: 55                 push        ebp
  00000591: 8B EC              mov         ebp,esp
  00000593: 51                 push        ecx
  00000594: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000059B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000059E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000005A1: 05 24 08 00 00     add         eax,824h
  000005A6: 8B E5              mov         esp,ebp
  000005A8: 5D                 pop         ebp
  000005A9: C3                 ret
  000005AA: CC                 int         3
  000005AB: CC                 int         3
  000005AC: CC                 int         3
  000005AD: CC                 int         3
  000005AE: CC                 int         3
  000005AF: CC                 int         3
?GetPassword@DownloadServerInfo@@QAEPADXZ (public: char * __thiscall DownloadServerInfo::GetPassword(void)):
  000005B0: 55                 push        ebp
  000005B1: 8B EC              mov         ebp,esp
  000005B3: 51                 push        ecx
  000005B4: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  000005BB: 89 4D FC           mov         dword ptr [ebp-4],ecx
  000005BE: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000005C1: 05 A4 08 00 00     add         eax,8A4h
  000005C6: 8B E5              mov         esp,ebp
  000005C8: 5D                 pop         ebp
  000005C9: C3                 ret
  000005CA: CC                 int         3
  000005CB: CC                 int         3
  000005CC: CC                 int         3
  000005CD: CC                 int         3
  000005CE: CC                 int         3
  000005CF: CC                 int         3
?GetPort@DownloadServerInfo@@QAEGXZ (public: unsigned short __thiscall DownloadServerInfo::GetPort(void)):
  000005D0: 55                 push        ebp
  000005D1: 8B EC              mov         ebp,esp
  000005D3: 51                 push        ecx
  000005D4: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  000005DB: 89 4D FC           mov         dword ptr [ebp-4],ecx
  000005DE: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000005E1: 66 8B 80 24 09 00  mov         ax,word ptr [eax+924h]
            00
  000005E8: 8B E5              mov         esp,ebp
  000005EA: 5D                 pop         ebp
  000005EB: C3                 ret
  000005EC: CC                 int         3
  000005ED: CC                 int         3
  000005EE: CC                 int         3
  000005EF: CC                 int         3
?GetDownloaderType@DownloadServerInfo@@QAE?AW4_DownloaderType@@XZ (public: enum _DownloaderType __thiscall DownloadServerInfo::GetDownloaderType(void)):
  000005F0: 55                 push        ebp
  000005F1: 8B EC              mov         ebp,esp
  000005F3: 51                 push        ecx
  000005F4: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  000005FB: 89 4D FC           mov         dword ptr [ebp-4],ecx
  000005FE: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000601: 8B 80 28 09 00 00  mov         eax,dword ptr [eax+928h]
  00000607: 8B E5              mov         esp,ebp
  00000609: 5D                 pop         ebp
  0000060A: C3                 ret
  0000060B: CC                 int         3
  0000060C: CC                 int         3
  0000060D: CC                 int         3
  0000060E: CC                 int         3
  0000060F: CC                 int         3
?GetReadBufferSize@DownloadServerInfo@@QAEKXZ (public: unsigned long __thiscall DownloadServerInfo::GetReadBufferSize(void)):
  00000610: 55                 push        ebp
  00000611: 8B EC              mov         ebp,esp
  00000613: 51                 push        ecx
  00000614: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000061B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000061E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000621: 8B 80 2C 09 00 00  mov         eax,dword ptr [eax+92Ch]
  00000627: 8B E5              mov         esp,ebp
  00000629: 5D                 pop         ebp
  0000062A: C3                 ret
  0000062B: CC                 int         3
  0000062C: CC                 int         3
  0000062D: CC                 int         3
  0000062E: CC                 int         3
  0000062F: CC                 int         3
?GetConnectTimeout@DownloadServerInfo@@QAEKXZ (public: unsigned long __thiscall DownloadServerInfo::GetConnectTimeout(void)):
  00000630: 55                 push        ebp
  00000631: 8B EC              mov         ebp,esp
  00000633: 51                 push        ecx
  00000634: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000063B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000063E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000641: 8B 80 38 09 00 00  mov         eax,dword ptr [eax+938h]
  00000647: 8B E5              mov         esp,ebp
  00000649: 5D                 pop         ebp
  0000064A: C3                 ret
  0000064B: CC                 int         3
  0000064C: CC                 int         3
  0000064D: CC                 int         3
  0000064E: CC                 int         3
  0000064F: CC                 int         3
?IsOverWrite@DownloadServerInfo@@QAEHXZ (public: int __thiscall DownloadServerInfo::IsOverWrite(void)):
  00000650: 55                 push        ebp
  00000651: 8B EC              mov         ebp,esp
  00000653: 51                 push        ecx
  00000654: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000065B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000065E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000661: 8B 80 30 09 00 00  mov         eax,dword ptr [eax+930h]
  00000667: 8B E5              mov         esp,ebp
  00000669: 5D                 pop         ebp
  0000066A: C3                 ret
  0000066B: CC                 int         3
  0000066C: CC                 int         3
  0000066D: CC                 int         3
  0000066E: CC                 int         3
  0000066F: CC                 int         3
?IsPassive@DownloadServerInfo@@QAEHXZ (public: int __thiscall DownloadServerInfo::IsPassive(void)):
  00000670: 55                 push        ebp
  00000671: 8B EC              mov         ebp,esp
  00000673: 51                 push        ecx
  00000674: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000067B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000067E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000681: 8B 80 34 09 00 00  mov         eax,dword ptr [eax+934h]
  00000687: 8B E5              mov         esp,ebp
  00000689: 5D                 pop         ebp
  0000068A: C3                 ret
  0000068B: CC                 int         3
  0000068C: CC                 int         3
  0000068D: CC                 int         3
  0000068E: CC                 int         3
  0000068F: CC                 int         3
?SetServerInfo@DownloadServerInfo@@QAEXPADG00@Z (public: void __thiscall DownloadServerInfo::SetServerInfo(char *,unsigned short,char *,char *)):
  00000690: 55                 push        ebp
  00000691: 8B EC              mov         ebp,esp
  00000693: 83 EC 08           sub         esp,8
  00000696: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  0000069D: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  000006A4: 89 4D FC           mov         dword ptr [ebp-4],ecx
  000006A7: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  000006AB: 75 1E              jne         000006CB
  000006AD: 68 00 00 00 00     push        offset ??0DownloadFileInfo@@QAE@XZ
  000006B2: 6A 00              push        0
  000006B4: 6A 60              push        60h
  000006B6: 68 00 00 00 00     push        offset ??0DownloadFileInfo@@QAE@XZ
  000006BB: 6A 02              push        2
  000006BD: E8 00 00 00 00     call        000006C2
  000006C2: 83 C4 14           add         esp,14h
  000006C5: 83 F8 01           cmp         eax,1
  000006C8: 75 01              jne         000006CB
  000006CA: CC                 int         3
  000006CB: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  000006CE: 0F BE 11           movsx       edx,byte ptr [ecx]
  000006D1: 85 D2              test        edx,edx
  000006D3: 75 1E              jne         000006F3
  000006D5: 68 00 00 00 00     push        offset ??0DownloadFileInfo@@QAE@XZ
  000006DA: 6A 00              push        0
  000006DC: 6A 61              push        61h
  000006DE: 68 00 00 00 00     push        offset ??0DownloadFileInfo@@QAE@XZ
  000006E3: 6A 02              push        2
  000006E5: E8 00 00 00 00     call        000006EA
  000006EA: 83 C4 14           add         esp,14h
  000006ED: 83 F8 01           cmp         eax,1
  000006F0: 75 01              jne         000006F3
  000006F2: CC                 int         3
  000006F3: 0F B7 4D 0C        movzx       ecx,word ptr [ebp+0Ch]
  000006F7: 85 C9              test        ecx,ecx
  000006F9: 7F 1E              jg          00000719
  000006FB: 68 00 00 00 00     push        offset ??0DownloadFileInfo@@QAE@XZ
  00000700: 6A 00              push        0
  00000702: 6A 62              push        62h
  00000704: 68 00 00 00 00     push        offset ??0DownloadFileInfo@@QAE@XZ
  00000709: 6A 02              push        2
  0000070B: E8 00 00 00 00     call        00000710
  00000710: 83 C4 14           add         esp,14h
  00000713: 83 F8 01           cmp         eax,1
  00000716: 75 01              jne         00000719
  00000718: CC                 int         3
  00000719: 0F B7 45 0C        movzx       eax,word ptr [ebp+0Ch]
  0000071D: 3D FF FF 00 00     cmp         eax,0FFFFh
  00000722: 7E 1E              jle         00000742
  00000724: 68 00 00 00 00     push        offset ??0DownloadFileInfo@@QAE@XZ
  00000729: 6A 00              push        0
  0000072B: 6A 63              push        63h
  0000072D: 68 00 00 00 00     push        offset ??0DownloadFileInfo@@QAE@XZ
  00000732: 6A 02              push        2
  00000734: E8 00 00 00 00     call        00000739
  00000739: 83 C4 14           add         esp,14h
  0000073C: 83 F8 01           cmp         eax,1
  0000073F: 75 01              jne         00000742
  00000741: CC                 int         3
  00000742: 6A 3A              push        3Ah
  00000744: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000747: 52                 push        edx
  00000748: E8 00 00 00 00     call        0000074D
  0000074D: 83 C4 08           add         esp,8
  00000750: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000753: 83 7D F8 00        cmp         dword ptr [ebp-8],0
  00000757: 74 2F              je          00000788
  00000759: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  0000075C: 0F BE 48 01        movsx       ecx,byte ptr [eax+1]
  00000760: 83 F9 2F           cmp         ecx,2Fh
  00000763: 75 23              jne         00000788
  00000765: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  00000768: 0F BE 42 02        movsx       eax,byte ptr [edx+2]
  0000076C: 83 F8 2F           cmp         eax,2Fh
  0000076F: 75 17              jne         00000788
  00000771: 8B 4D F8           mov         ecx,dword ptr [ebp-8]
  00000774: 83 C1 03           add         ecx,3
  00000777: 51                 push        ecx
  00000778: 68 24 08 00 00     push        824h
  0000077D: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000780: 52                 push        edx
  00000781: E8 00 00 00 00     call        00000786
  00000786: EB 12              jmp         0000079A
  00000788: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000078B: 50                 push        eax
  0000078C: 68 24 08 00 00     push        824h
  00000791: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000794: 51                 push        ecx
  00000795: E8 00 00 00 00     call        0000079A
  0000079A: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000079D: 66 8B 45 0C        mov         ax,word ptr [ebp+0Ch]
  000007A1: 66 89 82 24 09 00  mov         word ptr [edx+924h],ax
            00
  000007A8: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  000007AB: 51                 push        ecx
  000007AC: 68 80 00 00 00     push        80h
  000007B1: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  000007B4: 81 C2 24 08 00 00  add         edx,824h
  000007BA: 52                 push        edx
  000007BB: E8 00 00 00 00     call        000007C0
  000007C0: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  000007C3: 50                 push        eax
  000007C4: 68 80 00 00 00     push        80h
  000007C9: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000007CC: 81 C1 A4 08 00 00  add         ecx,8A4h
  000007D2: 51                 push        ecx
  000007D3: E8 00 00 00 00     call        000007D8
  000007D8: 83 C4 08           add         esp,8
  000007DB: 3B EC              cmp         ebp,esp
  000007DD: E8 00 00 00 00     call        000007E2
  000007E2: 8B E5              mov         esp,ebp
  000007E4: 5D                 pop         ebp
  000007E5: C2 10 00           ret         10h
  000007E8: CC                 int         3
  000007E9: CC                 int         3
  000007EA: CC                 int         3
  000007EB: CC                 int         3
  000007EC: CC                 int         3
  000007ED: CC                 int         3
  000007EE: CC                 int         3
  000007EF: CC                 int         3
?SetDownloaderType@DownloadServerInfo@@QAEXW4_DownloaderType@@@Z (public: void __thiscall DownloadServerInfo::SetDownloaderType(enum _DownloaderType)):
  000007F0: 55                 push        ebp
  000007F1: 8B EC              mov         ebp,esp
  000007F3: 51                 push        ecx
  000007F4: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  000007FB: 89 4D FC           mov         dword ptr [ebp-4],ecx
  000007FE: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000801: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000804: 89 88 28 09 00 00  mov         dword ptr [eax+928h],ecx
  0000080A: 8B E5              mov         esp,ebp
  0000080C: 5D                 pop         ebp
  0000080D: C2 04 00           ret         4
?SetOverWrite@DownloadServerInfo@@QAEXH@Z (public: void __thiscall DownloadServerInfo::SetOverWrite(int)):
  00000810: 55                 push        ebp
  00000811: 8B EC              mov         ebp,esp
  00000813: 51                 push        ecx
  00000814: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000081B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000081E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000821: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000824: 89 88 30 09 00 00  mov         dword ptr [eax+930h],ecx
  0000082A: 8B E5              mov         esp,ebp
  0000082C: 5D                 pop         ebp
  0000082D: C2 04 00           ret         4
?SetPassiveMode@DownloadServerInfo@@QAEXH@Z (public: void __thiscall DownloadServerInfo::SetPassiveMode(int)):
  00000830: 55                 push        ebp
  00000831: 8B EC              mov         ebp,esp
  00000833: 51                 push        ecx
  00000834: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000083B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000083E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000841: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000844: 89 88 34 09 00 00  mov         dword ptr [eax+934h],ecx
  0000084A: 8B E5              mov         esp,ebp
  0000084C: 5D                 pop         ebp
  0000084D: C2 04 00           ret         4
?SetReadBufferSize@DownloadServerInfo@@QAEXK@Z (public: void __thiscall DownloadServerInfo::SetReadBufferSize(unsigned long)):
  00000850: 55                 push        ebp
  00000851: 8B EC              mov         ebp,esp
  00000853: 51                 push        ecx
  00000854: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000085B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000085E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000861: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000864: 89 88 2C 09 00 00  mov         dword ptr [eax+92Ch],ecx
  0000086A: 8B E5              mov         esp,ebp
  0000086C: 5D                 pop         ebp
  0000086D: C2 04 00           ret         4
?SetConnectTimeout@DownloadServerInfo@@QAEXK@Z (public: void __thiscall DownloadServerInfo::SetConnectTimeout(unsigned long)):
  00000870: 55                 push        ebp
  00000871: 8B EC              mov         ebp,esp
  00000873: 51                 push        ecx
  00000874: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000087B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000087E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000881: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000884: 89 88 38 09 00 00  mov         dword ptr [eax+938h],ecx
  0000088A: 8B E5              mov         esp,ebp
  0000088C: 5D                 pop         ebp
  0000088D: C2 04 00           ret         4

_RtlSecureZeroMemory:
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000000E: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000011: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  00000015: 74 1A              je          00000031
  00000017: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001A: C6 01 00           mov         byte ptr [ecx],0
  0000001D: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000020: 83 C2 01           add         edx,1
  00000023: 89 55 FC           mov         dword ptr [ebp-4],edx
  00000026: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000029: 83 E8 01           sub         eax,1
  0000002C: 89 45 0C           mov         dword ptr [ebp+0Ch],eax
  0000002F: EB E0              jmp         00000011
  00000031: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000034: 8B E5              mov         esp,ebp
  00000036: 5D                 pop         ebp
  00000037: C3                 ret

?StringCchCopyA@@YGJPADIPBD@Z (long __stdcall StringCchCopyA(char *,unsigned int,char const *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 68 FF FF FF 7F     push        7FFFFFFFh
  00000010: 6A 00              push        0
  00000012: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000015: 50                 push        eax
  00000016: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000019: 51                 push        ecx
  0000001A: E8 00 00 00 00     call        0000001F
  0000001F: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000022: 83 7D FC 00        cmp         dword ptr [ebp-4],0
  00000026: 7C 1B              jl          00000043
  00000028: 68 FE FF FF 7F     push        7FFFFFFEh
  0000002D: 8B 55 10           mov         edx,dword ptr [ebp+10h]
  00000030: 52                 push        edx
  00000031: 6A 00              push        0
  00000033: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000036: 50                 push        eax
  00000037: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000003A: 51                 push        ecx
  0000003B: E8 00 00 00 00     call        00000040
  00000040: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000043: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000046: 83 C4 04           add         esp,4
  00000049: 3B EC              cmp         ebp,esp
  0000004B: E8 00 00 00 00     call        00000050
  00000050: 8B E5              mov         esp,ebp
  00000052: 5D                 pop         ebp
  00000053: C2 0C 00           ret         0Ch

?_tcschr@@YAPADPADI@Z (char * __cdecl _tcschr(char *,unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000006: 50                 push        eax
  00000007: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000000A: 51                 push        ecx
  0000000B: E8 00 00 00 00     call        00000010
  00000010: 83 C4 08           add         esp,8
  00000013: 3B EC              cmp         ebp,esp
  00000015: E8 00 00 00 00     call        0000001A
  0000001A: 5D                 pop         ebp
  0000001B: C3                 ret

__tcschr:
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000006: 50                 push        eax
  00000007: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  0000000A: 51                 push        ecx
  0000000B: E8 00 00 00 00     call        00000010
  00000010: 83 C4 08           add         esp,8
  00000013: 3B EC              cmp         ebp,esp
  00000015: E8 00 00 00 00     call        0000001A
  0000001A: 5D                 pop         ebp
  0000001B: C3                 ret

??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z (public: __thiscall HTTPConnecter::HTTPConnecter(class DownloadServerInfo *,class DownloadFileInfo *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000011: 50                 push        eax
  00000012: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000015: 51                 push        ecx
  00000016: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000019: E8 00 00 00 00     call        0000001E
  0000001E: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000021: C7 02 00 00 00 00  mov         dword ptr [edx],offset ??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  00000027: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002A: 83 C4 04           add         esp,4
  0000002D: 3B EC              cmp         ebp,esp
  0000002F: E8 00 00 00 00     call        00000034
  00000034: 8B E5              mov         esp,ebp
  00000036: 5D                 pop         ebp
  00000037: C2 08 00           ret         8
  0000003A: CC                 int         3
  0000003B: CC                 int         3
  0000003C: CC                 int         3
  0000003D: CC                 int         3
  0000003E: CC                 int         3
  0000003F: CC                 int         3
??1HTTPConnecter@@QAE@XZ (public: __thiscall HTTPConnecter::~HTTPConnecter(void)):
  00000040: 55                 push        ebp
  00000041: 8B EC              mov         ebp,esp
  00000043: 51                 push        ecx
  00000044: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000004B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000004E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000051: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  00000057: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000005A: E8 00 00 00 00     call        0000005F
  0000005F: 83 C4 04           add         esp,4
  00000062: 3B EC              cmp         ebp,esp
  00000064: E8 00 00 00 00     call        00000069
  00000069: 8B E5              mov         esp,ebp
  0000006B: 5D                 pop         ebp
  0000006C: C3                 ret
  0000006D: CC                 int         3
  0000006E: CC                 int         3
  0000006F: CC                 int         3
?CreateSession@HTTPConnecter@@UAE?AVWZResult@@AAPAX@Z (public: virtual class WZResult __thiscall HTTPConnecter::CreateSession(void * &)):
  00000070: 55                 push        ebp
  00000071: 8B EC              mov         ebp,esp
  00000073: 81 EC 1C 01 00 00  sub         esp,11Ch
  00000079: 56                 push        esi
  0000007A: 57                 push        edi
  0000007B: 51                 push        ecx
  0000007C: 8D BD E4 FE FF FF  lea         edi,[ebp-11Ch]
  00000082: B9 47 00 00 00     mov         ecx,47h
  00000087: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000008C: F3 AB              rep stos    dword ptr [edi]
  0000008E: 59                 pop         ecx
  0000008F: A1 00 00 00 00     mov         eax,[??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000094: 33 C5              xor         eax,ebp
  00000096: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000099: 89 4D F8           mov         dword ptr [ebp-8],ecx
  0000009C: C7 85 E4 FE FF FF  mov         dword ptr [ebp-11Ch],offset ??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00 00 00 00
  000000A6: C6 85 F0 FE FF FF  mov         byte ptr [ebp-110h],0
            00
  000000AD: 68 03 01 00 00     push        103h
  000000B2: 6A 00              push        0
  000000B4: 8D 85 F1 FE FF FF  lea         eax,[ebp-10Fh]
  000000BA: 50                 push        eax
  000000BB: E8 00 00 00 00     call        000000C0
  000000C0: 83 C4 0C           add         esp,0Ch
  000000C3: 8B F4              mov         esi,esp
  000000C5: 6A 00              push        0
  000000C7: 6A 00              push        0
  000000C9: 6A 00              push        0
  000000CB: 6A 00              push        0
  000000CD: 8D 8D F0 FE FF FF  lea         ecx,[ebp-110h]
  000000D3: 51                 push        ecx
  000000D4: E8 00 00 00 00     call        000000D9
  000000D9: 83 C4 04           add         esp,4
  000000DC: 50                 push        eax
  000000DD: FF 15 00 00 00 00  call        dword ptr [??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  000000E3: 3B F4              cmp         esi,esp
  000000E5: E8 00 00 00 00     call        000000EA
  000000EA: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  000000ED: 89 02              mov         dword ptr [edx],eax
  000000EF: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  000000F2: 83 38 00           cmp         dword ptr [eax],0
  000000F5: 75 46              jne         0000013D
  000000F7: 8B F4              mov         esi,esp
  000000F9: FF 15 00 00 00 00  call        dword ptr [??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  000000FF: 3B F4              cmp         esi,esp
  00000101: E8 00 00 00 00     call        00000106
  00000106: 89 85 E8 FE FF FF  mov         dword ptr [ebp-118h],eax
  0000010C: 8B 4D F8           mov         ecx,dword ptr [ebp-8]
  0000010F: 8B 89 10 04 00 00  mov         ecx,dword ptr [ecx+410h]
  00000115: E8 00 00 00 00     call        0000011A
  0000011A: 50                 push        eax
  0000011B: 68 00 00 00 00     push        offset ??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  00000120: 8B 95 E8 FE FF FF  mov         edx,dword ptr [ebp-118h]
  00000126: 52                 push        edx
  00000127: 68 09 00 00 20     push        20000009h
  0000012C: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  0000012F: 83 C0 04           add         eax,4
  00000132: 50                 push        eax
  00000133: E8 00 00 00 00     call        00000138
  00000138: 83 C4 14           add         esp,14h
  0000013B: EB 0B              jmp         00000148
  0000013D: 8B 4D F8           mov         ecx,dword ptr [ebp-8]
  00000140: 83 C1 04           add         ecx,4
  00000143: E8 00 00 00 00     call        00000148
  00000148: 8B 75 F8           mov         esi,dword ptr [ebp-8]
  0000014B: 83 C6 04           add         esi,4
  0000014E: B9 02 01 00 00     mov         ecx,102h
  00000153: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  00000156: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  00000158: 8B 8D E4 FE FF FF  mov         ecx,dword ptr [ebp-11Ch]
  0000015E: 83 C9 01           or          ecx,1
  00000161: 89 8D E4 FE FF FF  mov         dword ptr [ebp-11Ch],ecx
  00000167: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000016A: 52                 push        edx
  0000016B: 8B CD              mov         ecx,ebp
  0000016D: 50                 push        eax
  0000016E: 8D 15 00 00 00 00  lea         edx,[??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000174: E8 00 00 00 00     call        00000179
  00000179: 58                 pop         eax
  0000017A: 5A                 pop         edx
  0000017B: 5F                 pop         edi
  0000017C: 5E                 pop         esi
  0000017D: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000180: 33 CD              xor         ecx,ebp
  00000182: E8 00 00 00 00     call        00000187
  00000187: 81 C4 1C 01 00 00  add         esp,11Ch
  0000018D: 3B EC              cmp         ebp,esp
  0000018F: E8 00 00 00 00     call        00000194
  00000194: 8B E5              mov         esp,ebp
  00000196: 5D                 pop         ebp
  00000197: C2 08 00           ret         8
  0000019A: 8B FF              mov         edi,edi
$LN9:
  0000019C: 01 00              add         dword ptr [eax],eax
  0000019E: 00 00              add         byte ptr [eax],al
  000001A0: 00 00              add         byte ptr [eax],al
  000001A2: 00 00              add         byte ptr [eax],al
$LN8:
  000001A4: F0
  000001A5: FE
  000001A6: FF
  000001A7: FF 04 01           inc         dword ptr [ecx+eax]
  000001AA: 00 00              add         byte ptr [eax],al
  000001AC: 00 00              add         byte ptr [eax],al
  000001AE: 00 00              add         byte ptr [eax],al
$LN7:
  000001B0: 73 7A              jae         0000022C
  000001B2: 50                 push        eax
  000001B3: 61                 popad
  000001B4: 74 68              je          0000021E
  000001B6: 00 CC              add         ah,cl
  000001B8: CC                 int         3
  000001B9: CC                 int         3
  000001BA: CC                 int         3
  000001BB: CC                 int         3
  000001BC: CC                 int         3
  000001BD: CC                 int         3
  000001BE: CC                 int         3
  000001BF: CC                 int         3
?CreateConnection@HTTPConnecter@@UAE?AVWZResult@@AAPAX0@Z (public: virtual class WZResult __thiscall HTTPConnecter::CreateConnection(void * &,void * &)):
  000001C0: 55                 push        ebp
  000001C1: 8B EC              mov         ebp,esp
  000001C3: 83 EC 0C           sub         esp,0Ch
  000001C6: 56                 push        esi
  000001C7: 57                 push        edi
  000001C8: C7 45 F4 CC CC CC  mov         dword ptr [ebp-0Ch],0CCCCCCCCh
            CC
  000001CF: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  000001D6: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  000001DD: 89 4D FC           mov         dword ptr [ebp-4],ecx
  000001E0: C7 45 F4 00 00 00  mov         dword ptr [ebp-0Ch],offset ??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00
  000001E7: 8B F4              mov         esi,esp
  000001E9: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000001EC: 50                 push        eax
  000001ED: 6A 00              push        0
  000001EF: 6A 03              push        3
  000001F1: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000001F4: 8B 89 0C 04 00 00  mov         ecx,dword ptr [ecx+40Ch]
  000001FA: E8 00 00 00 00     call        000001FF
  000001FF: 50                 push        eax
  00000200: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000203: 8B 8A 0C 04 00 00  mov         ecx,dword ptr [edx+40Ch]
  00000209: E8 00 00 00 00     call        0000020E
  0000020E: 50                 push        eax
  0000020F: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000212: 8B 88 0C 04 00 00  mov         ecx,dword ptr [eax+40Ch]
  00000218: E8 00 00 00 00     call        0000021D
  0000021D: 0F B7 C8           movzx       ecx,ax
  00000220: 51                 push        ecx
  00000221: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000224: 8B 8A 0C 04 00 00  mov         ecx,dword ptr [edx+40Ch]
  0000022A: E8 00 00 00 00     call        0000022F
  0000022F: 50                 push        eax
  00000230: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000233: 8B 08              mov         ecx,dword ptr [eax]
  00000235: 51                 push        ecx
  00000236: FF 15 00 00 00 00  call        dword ptr [??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  0000023C: 3B F4              cmp         esi,esp
  0000023E: E8 00 00 00 00     call        00000243
  00000243: 8B 55 10           mov         edx,dword ptr [ebp+10h]
  00000246: 89 02              mov         dword ptr [edx],eax
  00000248: 8B 45 10           mov         eax,dword ptr [ebp+10h]
  0000024B: 83 38 00           cmp         dword ptr [eax],0
  0000024E: 75 40              jne         00000290
  00000250: 8B F4              mov         esi,esp
  00000252: FF 15 00 00 00 00  call        dword ptr [??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000258: 3B F4              cmp         esi,esp
  0000025A: E8 00 00 00 00     call        0000025F
  0000025F: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000262: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000265: 8B 89 10 04 00 00  mov         ecx,dword ptr [ecx+410h]
  0000026B: E8 00 00 00 00     call        00000270
  00000270: 50                 push        eax
  00000271: 68 00 00 00 00     push        offset ??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  00000276: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  00000279: 52                 push        edx
  0000027A: 68 0A 00 00 20     push        2000000Ah
  0000027F: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000282: 83 C0 04           add         eax,4
  00000285: 50                 push        eax
  00000286: E8 00 00 00 00     call        0000028B
  0000028B: 83 C4 14           add         esp,14h
  0000028E: EB 0B              jmp         0000029B
  00000290: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000293: 83 C1 04           add         ecx,4
  00000296: E8 00 00 00 00     call        0000029B
  0000029B: 8B 75 FC           mov         esi,dword ptr [ebp-4]
  0000029E: 83 C6 04           add         esi,4
  000002A1: B9 02 01 00 00     mov         ecx,102h
  000002A6: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  000002A9: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  000002AB: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  000002AE: 83 C9 01           or          ecx,1
  000002B1: 89 4D F4           mov         dword ptr [ebp-0Ch],ecx
  000002B4: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000002B7: 5F                 pop         edi
  000002B8: 5E                 pop         esi
  000002B9: 83 C4 0C           add         esp,0Ch
  000002BC: 3B EC              cmp         ebp,esp
  000002BE: E8 00 00 00 00     call        000002C3
  000002C3: 8B E5              mov         esp,ebp
  000002C5: 5D                 pop         ebp
  000002C6: C2 0C 00           ret         0Ch
  000002C9: CC                 int         3
  000002CA: CC                 int         3
  000002CB: CC                 int         3
  000002CC: CC                 int         3
  000002CD: CC                 int         3
  000002CE: CC                 int         3
  000002CF: CC                 int         3
?OpenRemoteFile@HTTPConnecter@@UAE?AVWZResult@@AAPAX0AA_K@Z (public: virtual class WZResult __thiscall HTTPConnecter::OpenRemoteFile(void * &,void * &,unsigned __int64 &)):
  000002D0: 55                 push        ebp
  000002D1: 8B EC              mov         ebp,esp
  000002D3: 83 EC 54           sub         esp,54h
  000002D6: 56                 push        esi
  000002D7: 57                 push        edi
  000002D8: 51                 push        ecx
  000002D9: 8D 7D AC           lea         edi,[ebp-54h]
  000002DC: B9 15 00 00 00     mov         ecx,15h
  000002E1: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  000002E6: F3 AB              rep stos    dword ptr [edi]
  000002E8: 59                 pop         ecx
  000002E9: A1 00 00 00 00     mov         eax,[??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  000002EE: 33 C5              xor         eax,ebp
  000002F0: 89 45 FC           mov         dword ptr [ebp-4],eax
  000002F3: 89 4D F8           mov         dword ptr [ebp-8],ecx
  000002F6: C7 45 B4 00 00 00  mov         dword ptr [ebp-4Ch],offset ??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00
  000002FD: 8B F4              mov         esi,esp
  000002FF: 6A 00              push        0
  00000301: 68 00 00 00 80     push        80000000h
  00000306: 6A 00              push        0
  00000308: 6A 00              push        0
  0000030A: 68 00 00 00 00     push        offset ??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  0000030F: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  00000312: 8B 88 10 04 00 00  mov         ecx,dword ptr [eax+410h]
  00000318: E8 00 00 00 00     call        0000031D
  0000031D: 50                 push        eax
  0000031E: 68 00 00 00 00     push        offset ??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  00000323: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000326: 8B 11              mov         edx,dword ptr [ecx]
  00000328: 52                 push        edx
  00000329: FF 15 00 00 00 00  call        dword ptr [??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  0000032F: 3B F4              cmp         esi,esp
  00000331: E8 00 00 00 00     call        00000336
  00000336: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  00000339: 89 01              mov         dword ptr [ecx],eax
  0000033B: 8B 55 10           mov         edx,dword ptr [ebp+10h]
  0000033E: 83 3A 00           cmp         dword ptr [edx],0
  00000341: 75 5F              jne         000003A2
  00000343: 8B F4              mov         esi,esp
  00000345: FF 15 00 00 00 00  call        dword ptr [??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  0000034B: 3B F4              cmp         esi,esp
  0000034D: E8 00 00 00 00     call        00000352
  00000352: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000355: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  00000358: 8B 88 10 04 00 00  mov         ecx,dword ptr [eax+410h]
  0000035E: E8 00 00 00 00     call        00000363
  00000363: 50                 push        eax
  00000364: 68 00 00 00 00     push        offset ??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  00000369: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  0000036C: 51                 push        ecx
  0000036D: 68 0C 00 00 20     push        2000000Ch
  00000372: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  00000375: 83 C2 04           add         edx,4
  00000378: 52                 push        edx
  00000379: E8 00 00 00 00     call        0000037E
  0000037E: 83 C4 14           add         esp,14h
  00000381: 8B 75 F8           mov         esi,dword ptr [ebp-8]
  00000384: 83 C6 04           add         esi,4
  00000387: B9 02 01 00 00     mov         ecx,102h
  0000038C: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  0000038F: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  00000391: 8B 45 B4           mov         eax,dword ptr [ebp-4Ch]
  00000394: 83 C8 01           or          eax,1
  00000397: 89 45 B4           mov         dword ptr [ebp-4Ch],eax
  0000039A: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000039D: E9 EB 01 00 00     jmp         0000058D
  000003A2: 8B F4              mov         esi,esp
  000003A4: 6A 00              push        0
  000003A6: 6A 00              push        0
  000003A8: 6A 00              push        0
  000003AA: 6A 00              push        0
  000003AC: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  000003AF: 8B 11              mov         edx,dword ptr [ecx]
  000003B1: 52                 push        edx
  000003B2: FF 15 00 00 00 00  call        dword ptr [??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  000003B8: 3B F4              cmp         esi,esp
  000003BA: E8 00 00 00 00     call        000003BF
  000003BF: C6 45 D0 00        mov         byte ptr [ebp-30h],0
  000003C3: 33 C0              xor         eax,eax
  000003C5: 89 45 D1           mov         dword ptr [ebp-2Fh],eax
  000003C8: 89 45 D5           mov         dword ptr [ebp-2Bh],eax
  000003CB: 89 45 D9           mov         dword ptr [ebp-27h],eax
  000003CE: 89 45 DD           mov         dword ptr [ebp-23h],eax
  000003D1: 89 45 E1           mov         dword ptr [ebp-1Fh],eax
  000003D4: 89 45 E5           mov         dword ptr [ebp-1Bh],eax
  000003D7: 89 45 E9           mov         dword ptr [ebp-17h],eax
  000003DA: 66 89 45 ED        mov         word ptr [ebp-13h],ax
  000003DE: 88 45 EF           mov         byte ptr [ebp-11h],al
  000003E1: C7 45 C4 20 00 00  mov         dword ptr [ebp-3Ch],20h
            00
  000003E8: 8B F4              mov         esi,esp
  000003EA: 6A 00              push        0
  000003EC: 8D 4D C4           lea         ecx,[ebp-3Ch]
  000003EF: 51                 push        ecx
  000003F0: 8D 55 D0           lea         edx,[ebp-30h]
  000003F3: 52                 push        edx
  000003F4: 6A 13              push        13h
  000003F6: 8B 45 10           mov         eax,dword ptr [ebp+10h]
  000003F9: 8B 08              mov         ecx,dword ptr [eax]
  000003FB: 51                 push        ecx
  000003FC: FF 15 00 00 00 00  call        dword ptr [??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000402: 3B F4              cmp         esi,esp
  00000404: E8 00 00 00 00     call        00000409
  00000409: 85 C0              test        eax,eax
  0000040B: 75 5F              jne         0000046C
  0000040D: 8B F4              mov         esi,esp
  0000040F: FF 15 00 00 00 00  call        dword ptr [??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000415: 3B F4              cmp         esi,esp
  00000417: E8 00 00 00 00     call        0000041C
  0000041C: 89 45 BC           mov         dword ptr [ebp-44h],eax
  0000041F: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  00000422: 8B 8A 10 04 00 00  mov         ecx,dword ptr [edx+410h]
  00000428: E8 00 00 00 00     call        0000042D
  0000042D: 50                 push        eax
  0000042E: 68 00 00 00 00     push        offset ??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  00000433: 8B 45 BC           mov         eax,dword ptr [ebp-44h]
  00000436: 50                 push        eax
  00000437: 68 0E 00 00 20     push        2000000Eh
  0000043C: 8B 4D F8           mov         ecx,dword ptr [ebp-8]
  0000043F: 83 C1 04           add         ecx,4
  00000442: 51                 push        ecx
  00000443: E8 00 00 00 00     call        00000448
  00000448: 83 C4 14           add         esp,14h
  0000044B: 8B 75 F8           mov         esi,dword ptr [ebp-8]
  0000044E: 83 C6 04           add         esi,4
  00000451: B9 02 01 00 00     mov         ecx,102h
  00000456: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  00000459: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  0000045B: 8B 55 B4           mov         edx,dword ptr [ebp-4Ch]
  0000045E: 83 CA 01           or          edx,1
  00000461: 89 55 B4           mov         dword ptr [ebp-4Ch],edx
  00000464: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000467: E9 21 01 00 00     jmp         0000058D
  0000046C: 8D 45 D0           lea         eax,[ebp-30h]
  0000046F: 50                 push        eax
  00000470: E8 00 00 00 00     call        00000475
  00000475: 83 C4 04           add         esp,4
  00000478: 89 45 AC           mov         dword ptr [ebp-54h],eax
  0000047B: 89 55 B0           mov         dword ptr [ebp-50h],edx
  0000047E: 81 7D AC C8 00 00  cmp         dword ptr [ebp-54h],0C8h
            00
  00000485: 75 06              jne         0000048D
  00000487: 83 7D B0 00        cmp         dword ptr [ebp-50h],0
  0000048B: 74 4B              je          000004D8
  0000048D: 8B 4D F8           mov         ecx,dword ptr [ebp-8]
  00000490: 8B 89 10 04 00 00  mov         ecx,dword ptr [ecx+410h]
  00000496: E8 00 00 00 00     call        0000049B
  0000049B: 50                 push        eax
  0000049C: 68 00 00 00 00     push        offset ??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  000004A1: 6A 00              push        0
  000004A3: 68 0F 00 00 20     push        2000000Fh
  000004A8: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  000004AB: 83 C2 04           add         edx,4
  000004AE: 52                 push        edx
  000004AF: E8 00 00 00 00     call        000004B4
  000004B4: 83 C4 14           add         esp,14h
  000004B7: 8B 75 F8           mov         esi,dword ptr [ebp-8]
  000004BA: 83 C6 04           add         esi,4
  000004BD: B9 02 01 00 00     mov         ecx,102h
  000004C2: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  000004C5: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  000004C7: 8B 45 B4           mov         eax,dword ptr [ebp-4Ch]
  000004CA: 83 C8 01           or          eax,1
  000004CD: 89 45 B4           mov         dword ptr [ebp-4Ch],eax
  000004D0: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000004D3: E9 B5 00 00 00     jmp         0000058D
  000004D8: 6A 20              push        20h
  000004DA: 8D 4D D0           lea         ecx,[ebp-30h]
  000004DD: 51                 push        ecx
  000004DE: E8 00 00 00 00     call        000004E3
  000004E3: 83 C4 08           add         esp,8
  000004E6: C7 45 C4 20 00 00  mov         dword ptr [ebp-3Ch],20h
            00
  000004ED: 8B F4              mov         esi,esp
  000004EF: 6A 00              push        0
  000004F1: 8D 55 C4           lea         edx,[ebp-3Ch]
  000004F4: 52                 push        edx
  000004F5: 8D 45 D0           lea         eax,[ebp-30h]
  000004F8: 50                 push        eax
  000004F9: 6A 05              push        5
  000004FB: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  000004FE: 8B 11              mov         edx,dword ptr [ecx]
  00000500: 52                 push        edx
  00000501: FF 15 00 00 00 00  call        dword ptr [??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000507: 3B F4              cmp         esi,esp
  00000509: E8 00 00 00 00     call        0000050E
  0000050E: 85 C0              test        eax,eax
  00000510: 75 40              jne         00000552
  00000512: 8B F4              mov         esi,esp
  00000514: FF 15 00 00 00 00  call        dword ptr [??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  0000051A: 3B F4              cmp         esi,esp
  0000051C: E8 00 00 00 00     call        00000521
  00000521: 89 45 B8           mov         dword ptr [ebp-48h],eax
  00000524: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  00000527: 8B 88 10 04 00 00  mov         ecx,dword ptr [eax+410h]
  0000052D: E8 00 00 00 00     call        00000532
  00000532: 50                 push        eax
  00000533: 68 00 00 00 00     push        offset ??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  00000538: 8B 4D B8           mov         ecx,dword ptr [ebp-48h]
  0000053B: 51                 push        ecx
  0000053C: 68 0B 00 00 20     push        2000000Bh
  00000541: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  00000544: 83 C2 04           add         edx,4
  00000547: 52                 push        edx
  00000548: E8 00 00 00 00     call        0000054D
  0000054D: 83 C4 14           add         esp,14h
  00000550: EB 1F              jmp         00000571
  00000552: 8D 45 D0           lea         eax,[ebp-30h]
  00000555: 50                 push        eax
  00000556: E8 00 00 00 00     call        0000055B
  0000055B: 83 C4 04           add         esp,4
  0000055E: 8B 4D 14           mov         ecx,dword ptr [ebp+14h]
  00000561: 89 01              mov         dword ptr [ecx],eax
  00000563: 89 51 04           mov         dword ptr [ecx+4],edx
  00000566: 8B 4D F8           mov         ecx,dword ptr [ebp-8]
  00000569: 83 C1 04           add         ecx,4
  0000056C: E8 00 00 00 00     call        00000571
  00000571: 8B 75 F8           mov         esi,dword ptr [ebp-8]
  00000574: 83 C6 04           add         esi,4
  00000577: B9 02 01 00 00     mov         ecx,102h
  0000057C: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  0000057F: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  00000581: 8B 55 B4           mov         edx,dword ptr [ebp-4Ch]
  00000584: 83 CA 01           or          edx,1
  00000587: 89 55 B4           mov         dword ptr [ebp-4Ch],edx
  0000058A: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000058D: 52                 push        edx
  0000058E: 8B CD              mov         ecx,ebp
  00000590: 50                 push        eax
  00000591: 8D 15 00 00 00 00  lea         edx,[??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000597: E8 00 00 00 00     call        0000059C
  0000059C: 58                 pop         eax
  0000059D: 5A                 pop         edx
  0000059E: 5F                 pop         edi
  0000059F: 5E                 pop         esi
  000005A0: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000005A3: 33 CD              xor         ecx,ebp
  000005A5: E8 00 00 00 00     call        000005AA
  000005AA: 83 C4 54           add         esp,54h
  000005AD: 3B EC              cmp         ebp,esp
  000005AF: E8 00 00 00 00     call        000005B4
  000005B4: 8B E5              mov         esp,ebp
  000005B6: 5D                 pop         ebp
  000005B7: C2 10 00           ret         10h
  000005BA: 8B FF              mov         edi,edi
$LN14:
  000005BC: 02 00              add         al,byte ptr [eax]
  000005BE: 00 00              add         byte ptr [eax],al
  000005C0: 00 00              add         byte ptr [eax],al
  000005C2: 00 00              add         byte ptr [eax],al
$LN13:
  000005C4: D0 FF              sar         bh,1
  000005C6: FF
  000005C7: FF 20              jmp         dword ptr [eax]
  000005C9: 00 00              add         byte ptr [eax],al
  000005CB: 00 00              add         byte ptr [eax],al
  000005CD: 00 00              add         byte ptr [eax],al
  000005CF: 00 C4              add         ah,al
  000005D1: FF
  000005D2: FF
  000005D3: FF 04 00           inc         dword ptr [eax+eax]
  000005D6: 00 00              add         byte ptr [eax],al
  000005D8: 00 00              add         byte ptr [eax],al
  000005DA: 00 00              add         byte ptr [eax],al
$LN12:
  000005DC: 64 77 42           ja          00000621
  000005DF: 75 66              jne         00000647
  000005E1: 53                 push        ebx
  000005E2: 69 7A 65 00 62 75  imul        edi,dword ptr [edx+65h],66756200h
            66
  000005E9: 66 65 72 00        jb          000005ED
  000005ED: CC                 int         3
  000005EE: CC                 int         3
  000005EF: CC                 int         3
?ReadRemoteFile@HTTPConnecter@@UAE?AVWZResult@@AAPAXPAEPAK@Z (public: virtual class WZResult __thiscall HTTPConnecter::ReadRemoteFile(void * &,unsigned char *,unsigned long *)):
  000005F0: 55                 push        ebp
  000005F1: 8B EC              mov         ebp,esp
  000005F3: 83 EC 18           sub         esp,18h
  000005F6: 56                 push        esi
  000005F7: 57                 push        edi
  000005F8: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  000005FD: 89 45 E8           mov         dword ptr [ebp-18h],eax
  00000600: 89 45 EC           mov         dword ptr [ebp-14h],eax
  00000603: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000606: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000609: 89 45 F8           mov         dword ptr [ebp-8],eax
  0000060C: 89 45 FC           mov         dword ptr [ebp-4],eax
  0000060F: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000612: C7 45 E8 00 00 00  mov         dword ptr [ebp-18h],offset ??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00
  00000619: 8B F4              mov         esi,esp
  0000061B: 6A 00              push        0
  0000061D: 6A 00              push        0
  0000061F: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000622: 50                 push        eax
  00000623: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000626: 8B 11              mov         edx,dword ptr [ecx]
  00000628: 52                 push        edx
  00000629: FF 15 00 00 00 00  call        dword ptr [??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  0000062F: 3B F4              cmp         esi,esp
  00000631: E8 00 00 00 00     call        00000636
  00000636: 8B F4              mov         esi,esp
  00000638: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  0000063B: 50                 push        eax
  0000063C: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000063F: 8B 89 0C 04 00 00  mov         ecx,dword ptr [ecx+40Ch]
  00000645: E8 00 00 00 00     call        0000064A
  0000064A: 50                 push        eax
  0000064B: 8B 55 10           mov         edx,dword ptr [ebp+10h]
  0000064E: 52                 push        edx
  0000064F: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000652: 8B 08              mov         ecx,dword ptr [eax]
  00000654: 51                 push        ecx
  00000655: FF 15 00 00 00 00  call        dword ptr [??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  0000065B: 3B F4              cmp         esi,esp
  0000065D: E8 00 00 00 00     call        00000662
  00000662: 85 C0              test        eax,eax
  00000664: 75 40              jne         000006A6
  00000666: 8B F4              mov         esi,esp
  00000668: FF 15 00 00 00 00  call        dword ptr [??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  0000066E: 3B F4              cmp         esi,esp
  00000670: E8 00 00 00 00     call        00000675
  00000675: 89 45 EC           mov         dword ptr [ebp-14h],eax
  00000678: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000067B: 8B 8A 10 04 00 00  mov         ecx,dword ptr [edx+410h]
  00000681: E8 00 00 00 00     call        00000686
  00000686: 50                 push        eax
  00000687: 68 00 00 00 00     push        offset ??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  0000068C: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  0000068F: 50                 push        eax
  00000690: 68 0D 00 00 20     push        2000000Dh
  00000695: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000698: 83 C1 04           add         ecx,4
  0000069B: 51                 push        ecx
  0000069C: E8 00 00 00 00     call        000006A1
  000006A1: 83 C4 14           add         esp,14h
  000006A4: EB 0B              jmp         000006B1
  000006A6: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000006A9: 83 C1 04           add         ecx,4
  000006AC: E8 00 00 00 00     call        000006B1
  000006B1: 8B 75 FC           mov         esi,dword ptr [ebp-4]
  000006B4: 83 C6 04           add         esi,4
  000006B7: B9 02 01 00 00     mov         ecx,102h
  000006BC: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  000006BF: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  000006C1: 8B 55 E8           mov         edx,dword ptr [ebp-18h]
  000006C4: 83 CA 01           or          edx,1
  000006C7: 89 55 E8           mov         dword ptr [ebp-18h],edx
  000006CA: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000006CD: 52                 push        edx
  000006CE: 8B CD              mov         ecx,ebp
  000006D0: 50                 push        eax
  000006D1: 8D 15 00 00 00 00  lea         edx,[??0HTTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  000006D7: E8 00 00 00 00     call        000006DC
  000006DC: 58                 pop         eax
  000006DD: 5A                 pop         edx
  000006DE: 5F                 pop         edi
  000006DF: 5E                 pop         esi
  000006E0: 83 C4 18           add         esp,18h
  000006E3: 3B EC              cmp         ebp,esp
  000006E5: E8 00 00 00 00     call        000006EA
  000006EA: 8B E5              mov         esp,ebp
  000006EC: 5D                 pop         ebp
  000006ED: C2 10 00           ret         10h
$LN9:
  000006F0: 01 00              add         dword ptr [eax],eax
  000006F2: 00 00              add         byte ptr [eax],al
  000006F4: 00 00              add         byte ptr [eax],al
  000006F6: 00 00              add         byte ptr [eax],al
$LN8:
  000006F8: F4                 hlt
  000006F9: FF
  000006FA: FF
  000006FB: FF 04 00           inc         dword ptr [eax+eax]
  000006FE: 00 00              add         byte ptr [eax],al
  00000700: 00 00              add         byte ptr [eax],al
  00000702: 00 00              add         byte ptr [eax],al
$LN7:
  00000704: 53                 push        ebx
  00000705: 69
  00000706: 7A 65              jp          0000076D
  00000708: 00

??0IConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z (public: __thiscall IConnecter::IConnecter(class DownloadServerInfo *,class DownloadFileInfo *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??0IConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  00000017: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001A: 83 C1 04           add         ecx,4
  0000001D: E8 00 00 00 00     call        00000022
  00000022: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000025: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000028: 89 91 0C 04 00 00  mov         dword ptr [ecx+40Ch],edx
  0000002E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000031: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000034: 89 88 10 04 00 00  mov         dword ptr [eax+410h],ecx
  0000003A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000003D: 83 C4 04           add         esp,4
  00000040: 3B EC              cmp         ebp,esp
  00000042: E8 00 00 00 00     call        00000047
  00000047: 8B E5              mov         esp,ebp
  00000049: 5D                 pop         ebp
  0000004A: C2 08 00           ret         8

??1IConnecter@@QAE@XZ (public: __thiscall IConnecter::~IConnecter(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??1IConnecter@@QAE@XZ
  00000017: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001A: 83 C1 04           add         ecx,4
  0000001D: E8 00 00 00 00     call        00000022
  00000022: 83 C4 04           add         esp,4
  00000025: 3B EC              cmp         ebp,esp
  00000027: E8 00 00 00 00     call        0000002C
  0000002C: 8B E5              mov         esp,ebp
  0000002E: 5D                 pop         ebp
  0000002F: C3                 ret

_RtlSecureZeroMemory:
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000000E: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000011: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  00000015: 74 1A              je          00000031
  00000017: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001A: C6 01 00           mov         byte ptr [ecx],0
  0000001D: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000020: 83 C2 01           add         edx,1
  00000023: 89 55 FC           mov         dword ptr [ebp-4],edx
  00000026: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000029: 83 E8 01           sub         eax,1
  0000002C: 89 45 0C           mov         dword ptr [ebp+0Ch],eax
  0000002F: EB E0              jmp         00000011
  00000031: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000034: 8B E5              mov         esp,ebp
  00000036: 5D                 pop         ebp
  00000037: C3                 ret

?allocate@?$_DebugHeapAllocator@D@std@@QAAPADIPBX@Z (public: char * __cdecl std::_DebugHeapAllocator<char>::allocate(unsigned int,void const *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 10           sub         esp,10h
  00000006: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000B: 89 45 F0           mov         dword ptr [ebp-10h],eax
  0000000E: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000011: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000014: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000017: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  0000001B: 77 09              ja          00000026
  0000001D: C7 45 0C 00 00 00  mov         dword ptr [ebp+0Ch],offset ?allocate@?$_DebugHeapAllocator@D@std@@QAAPADIPBX@Z
            00
  00000024: EB 25              jmp         0000004B
  00000026: 83 C8 FF           or          eax,0FFh
  00000029: 33 D2              xor         edx,edx
  0000002B: F7 75 0C           div         eax,dword ptr [ebp+0Ch]
  0000002E: 83 F8 01           cmp         eax,1
  00000031: 73 18              jae         0000004B
  00000033: 6A 00              push        0
  00000035: 8D 4D F4           lea         ecx,[ebp-0Ch]
  00000038: E8 00 00 00 00     call        0000003D
  0000003D: 68 00 00 00 00     push        offset ?allocate@?$_DebugHeapAllocator@D@std@@QAAPADIPBX@Z
  00000042: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000045: 50                 push        eax
  00000046: E8 00 00 00 00     call        0000004B
  0000004B: 6A 56              push        56h
  0000004D: 68 00 00 00 00     push        offset ?allocate@?$_DebugHeapAllocator@D@std@@QAAPADIPBX@Z
  00000052: E8 00 00 00 00     call        00000057
  00000057: 50                 push        eax
  00000058: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  0000005B: 51                 push        ecx
  0000005C: E8 00 00 00 00     call        00000061
  00000061: 83 C4 10           add         esp,10h
  00000064: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000067: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  0000006A: 83 C4 10           add         esp,10h
  0000006D: 3B EC              cmp         ebp,esp
  0000006F: E8 00 00 00 00     call        00000074
  00000074: 8B E5              mov         esp,ebp
  00000076: 5D                 pop         ebp
  00000077: C3                 ret

??0bad_alloc@std@@QAE@PBD@Z (public: __thiscall std::bad_alloc::bad_alloc(char const *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8D 45 08           lea         eax,[ebp+8]
  00000011: 50                 push        eax
  00000012: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000015: E8 00 00 00 00     call        0000001A
  0000001A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001D: C7 01 00 00 00 00  mov         dword ptr [ecx],offset ??0bad_alloc@std@@QAE@PBD@Z
  00000023: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000026: 83 C4 04           add         esp,4
  00000029: 3B EC              cmp         ebp,esp
  0000002B: E8 00 00 00 00     call        00000030
  00000030: 8B E5              mov         esp,ebp
  00000032: 5D                 pop         ebp
  00000033: C2 04 00           ret         4

??1bad_alloc@std@@UAE@XZ (public: virtual __thiscall std::bad_alloc::~bad_alloc(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??1bad_alloc@std@@UAE@XZ
  00000017: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001A: E8 00 00 00 00     call        0000001F
  0000001F: 83 C4 04           add         esp,4
  00000022: 3B EC              cmp         ebp,esp
  00000024: E8 00 00 00 00     call        00000029
  00000029: 8B E5              mov         esp,ebp
  0000002B: 5D                 pop         ebp
  0000002C: C3                 ret

??_Gbad_alloc@std@@UAEPAXI@Z (public: virtual void * __thiscall std::bad_alloc::`scalar deleting destructor'(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000019: 83 E0 01           and         eax,1
  0000001C: 74 0C              je          0000002A
  0000001E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000021: 51                 push        ecx
  00000022: E8 00 00 00 00     call        00000027
  00000027: 83 C4 04           add         esp,4
  0000002A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002D: 83 C4 04           add         esp,4
  00000030: 3B EC              cmp         ebp,esp
  00000032: E8 00 00 00 00     call        00000037
  00000037: 8B E5              mov         esp,ebp
  00000039: 5D                 pop         ebp
  0000003A: C2 04 00           ret         4

?allocate@?$_DebugHeapAllocator@D@std@@QAEPADI@Z (public: char * __thiscall std::_DebugHeapAllocator<char>::allocate(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 14           sub         esp,14h
  00000006: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000B: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000000E: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000011: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000014: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000017: 89 45 FC           mov         dword ptr [ebp-4],eax
  0000001A: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000001D: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  00000021: 77 09              ja          0000002C
  00000023: C7 45 08 00 00 00  mov         dword ptr [ebp+8],offset ?allocate@?$_DebugHeapAllocator@D@std@@QAEPADI@Z
            00
  0000002A: EB 25              jmp         00000051
  0000002C: 83 C8 FF           or          eax,0FFh
  0000002F: 33 D2              xor         edx,edx
  00000031: F7 75 08           div         eax,dword ptr [ebp+8]
  00000034: 83 F8 01           cmp         eax,1
  00000037: 73 18              jae         00000051
  00000039: 6A 00              push        0
  0000003B: 8D 4D F0           lea         ecx,[ebp-10h]
  0000003E: E8 00 00 00 00     call        00000043
  00000043: 68 00 00 00 00     push        offset ?allocate@?$_DebugHeapAllocator@D@std@@QAEPADI@Z
  00000048: 8D 45 F0           lea         eax,[ebp-10h]
  0000004B: 50                 push        eax
  0000004C: E8 00 00 00 00     call        00000051
  00000051: 6A 61              push        61h
  00000053: 68 00 00 00 00     push        offset ?allocate@?$_DebugHeapAllocator@D@std@@QAEPADI@Z
  00000058: E8 00 00 00 00     call        0000005D
  0000005D: 50                 push        eax
  0000005E: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000061: 51                 push        ecx
  00000062: E8 00 00 00 00     call        00000067
  00000067: 83 C4 10           add         esp,10h
  0000006A: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000006D: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000070: 83 C4 14           add         esp,14h
  00000073: 3B EC              cmp         ebp,esp
  00000075: E8 00 00 00 00     call        0000007A
  0000007A: 8B E5              mov         esp,ebp
  0000007C: 5D                 pop         ebp
  0000007D: C2 04 00           ret         4

?deallocate@?$_DebugHeapAllocator@D@std@@QAEXPADI@Z (public: void __thiscall std::_DebugHeapAllocator<char>::deallocate(char *,unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000011: 50                 push        eax
  00000012: E8 00 00 00 00     call        00000017
  00000017: 83 C4 04           add         esp,4
  0000001A: 83 C4 04           add         esp,4
  0000001D: 3B EC              cmp         ebp,esp
  0000001F: E8 00 00 00 00     call        00000024
  00000024: 8B E5              mov         esp,ebp
  00000026: 5D                 pop         ebp
  00000027: C2 08 00           ret         8

??0bad_alloc@std@@QAE@ABV01@@Z (public: __thiscall std::bad_alloc::bad_alloc(class std::bad_alloc const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000011: 50                 push        eax
  00000012: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000015: E8 00 00 00 00     call        0000001A
  0000001A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001D: C7 01 00 00 00 00  mov         dword ptr [ecx],offset ??0bad_alloc@std@@QAE@ABV01@@Z
  00000023: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000026: 83 C4 04           add         esp,4
  00000029: 3B EC              cmp         ebp,esp
  0000002B: E8 00 00 00 00     call        00000030
  00000030: 8B E5              mov         esp,ebp
  00000032: 5D                 pop         ebp
  00000033: C2 04 00           ret         4

??0?$_DebugHeapAllocator@D@std@@QAE@XZ (public: __thiscall std::_DebugHeapAllocator<char>::_DebugHeapAllocator<char>(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000019: 83 C4 04           add         esp,4
  0000001C: 3B EC              cmp         ebp,esp
  0000001E: E8 00 00 00 00     call        00000023
  00000023: 8B E5              mov         esp,ebp
  00000025: 5D                 pop         ebp
  00000026: C3                 ret

??0?$allocator@D@std@@QAE@XZ (public: __thiscall std::allocator<char>::allocator<char>(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B E5              mov         esp,ebp
  00000013: 5D                 pop         ebp
  00000014: C3                 ret

??0?$_DebugHeapAllocator@D@std@@QAE@ABV01@@Z (public: __thiscall std::_DebugHeapAllocator<char>::_DebugHeapAllocator<char>(class std::_DebugHeapAllocator<char> const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000011: 50                 push        eax
  00000012: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000015: E8 00 00 00 00     call        0000001A
  0000001A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001D: 83 C4 04           add         esp,4
  00000020: 3B EC              cmp         ebp,esp
  00000022: E8 00 00 00 00     call        00000027
  00000027: 8B E5              mov         esp,ebp
  00000029: 5D                 pop         ebp
  0000002A: C2 04 00           ret         4

??0?$allocator@D@std@@QAE@ABV01@@Z (public: __thiscall std::allocator<char>::allocator<char>(class std::allocator<char> const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B E5              mov         esp,ebp
  00000013: 5D                 pop         ebp
  00000014: C2 04 00           ret         4

??$_DebugHeapDelete@X@std@@YAXPAX@Z (void __cdecl std::_DebugHeapDelete<void>(void *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  00000007: 74 0C              je          00000015
  00000009: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000000C: 50                 push        eax
  0000000D: E8 00 00 00 00     call        00000012
  00000012: 83 C4 04           add         esp,4
  00000015: 3B EC              cmp         ebp,esp
  00000017: E8 00 00 00 00     call        0000001C
  0000001C: 5D                 pop         ebp
  0000001D: C3                 ret

??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z (public: __thiscall FTPConnecter::FTPConnecter(class DownloadServerInfo *,class DownloadFileInfo *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000011: 50                 push        eax
  00000012: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000015: 51                 push        ecx
  00000016: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000019: E8 00 00 00 00     call        0000001E
  0000001E: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000021: C7 02 00 00 00 00  mov         dword ptr [edx],offset ??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  00000027: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002A: 83 C4 04           add         esp,4
  0000002D: 3B EC              cmp         ebp,esp
  0000002F: E8 00 00 00 00     call        00000034
  00000034: 8B E5              mov         esp,ebp
  00000036: 5D                 pop         ebp
  00000037: C2 08 00           ret         8
  0000003A: CC                 int         3
  0000003B: CC                 int         3
  0000003C: CC                 int         3
  0000003D: CC                 int         3
  0000003E: CC                 int         3
  0000003F: CC                 int         3
??1FTPConnecter@@QAE@XZ (public: __thiscall FTPConnecter::~FTPConnecter(void)):
  00000040: 55                 push        ebp
  00000041: 8B EC              mov         ebp,esp
  00000043: 51                 push        ecx
  00000044: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000004B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000004E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000051: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  00000057: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000005A: E8 00 00 00 00     call        0000005F
  0000005F: 83 C4 04           add         esp,4
  00000062: 3B EC              cmp         ebp,esp
  00000064: E8 00 00 00 00     call        00000069
  00000069: 8B E5              mov         esp,ebp
  0000006B: 5D                 pop         ebp
  0000006C: C3                 ret
  0000006D: CC                 int         3
  0000006E: CC                 int         3
  0000006F: CC                 int         3
?CreateSession@FTPConnecter@@UAE?AVWZResult@@AAPAX@Z (public: virtual class WZResult __thiscall FTPConnecter::CreateSession(void * &)):
  00000070: 55                 push        ebp
  00000071: 8B EC              mov         ebp,esp
  00000073: 81 EC 1C 01 00 00  sub         esp,11Ch
  00000079: 56                 push        esi
  0000007A: 57                 push        edi
  0000007B: 51                 push        ecx
  0000007C: 8D BD E4 FE FF FF  lea         edi,[ebp-11Ch]
  00000082: B9 47 00 00 00     mov         ecx,47h
  00000087: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000008C: F3 AB              rep stos    dword ptr [edi]
  0000008E: 59                 pop         ecx
  0000008F: A1 00 00 00 00     mov         eax,[??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000094: 33 C5              xor         eax,ebp
  00000096: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000099: 89 4D F8           mov         dword ptr [ebp-8],ecx
  0000009C: C7 85 E4 FE FF FF  mov         dword ptr [ebp-11Ch],offset ??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00 00 00 00
  000000A6: C6 85 F0 FE FF FF  mov         byte ptr [ebp-110h],0
            00
  000000AD: 68 03 01 00 00     push        103h
  000000B2: 6A 00              push        0
  000000B4: 8D 85 F1 FE FF FF  lea         eax,[ebp-10Fh]
  000000BA: 50                 push        eax
  000000BB: E8 00 00 00 00     call        000000C0
  000000C0: 83 C4 0C           add         esp,0Ch
  000000C3: 8B F4              mov         esi,esp
  000000C5: 6A 00              push        0
  000000C7: 6A 00              push        0
  000000C9: 6A 00              push        0
  000000CB: 6A 00              push        0
  000000CD: 8D 8D F0 FE FF FF  lea         ecx,[ebp-110h]
  000000D3: 51                 push        ecx
  000000D4: E8 00 00 00 00     call        000000D9
  000000D9: 83 C4 04           add         esp,4
  000000DC: 50                 push        eax
  000000DD: FF 15 00 00 00 00  call        dword ptr [??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  000000E3: 3B F4              cmp         esi,esp
  000000E5: E8 00 00 00 00     call        000000EA
  000000EA: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  000000ED: 89 02              mov         dword ptr [edx],eax
  000000EF: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  000000F2: 83 38 00           cmp         dword ptr [eax],0
  000000F5: 75 46              jne         0000013D
  000000F7: 8B F4              mov         esi,esp
  000000F9: FF 15 00 00 00 00  call        dword ptr [??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  000000FF: 3B F4              cmp         esi,esp
  00000101: E8 00 00 00 00     call        00000106
  00000106: 89 85 E8 FE FF FF  mov         dword ptr [ebp-118h],eax
  0000010C: 8B 4D F8           mov         ecx,dword ptr [ebp-8]
  0000010F: 8B 89 10 04 00 00  mov         ecx,dword ptr [ecx+410h]
  00000115: E8 00 00 00 00     call        0000011A
  0000011A: 50                 push        eax
  0000011B: 68 00 00 00 00     push        offset ??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  00000120: 8B 95 E8 FE FF FF  mov         edx,dword ptr [ebp-118h]
  00000126: 52                 push        edx
  00000127: 68 09 00 00 20     push        20000009h
  0000012C: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  0000012F: 83 C0 04           add         eax,4
  00000132: 50                 push        eax
  00000133: E8 00 00 00 00     call        00000138
  00000138: 83 C4 14           add         esp,14h
  0000013B: EB 0B              jmp         00000148
  0000013D: 8B 4D F8           mov         ecx,dword ptr [ebp-8]
  00000140: 83 C1 04           add         ecx,4
  00000143: E8 00 00 00 00     call        00000148
  00000148: 8B 75 F8           mov         esi,dword ptr [ebp-8]
  0000014B: 83 C6 04           add         esi,4
  0000014E: B9 02 01 00 00     mov         ecx,102h
  00000153: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  00000156: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  00000158: 8B 8D E4 FE FF FF  mov         ecx,dword ptr [ebp-11Ch]
  0000015E: 83 C9 01           or          ecx,1
  00000161: 89 8D E4 FE FF FF  mov         dword ptr [ebp-11Ch],ecx
  00000167: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000016A: 52                 push        edx
  0000016B: 8B CD              mov         ecx,ebp
  0000016D: 50                 push        eax
  0000016E: 8D 15 00 00 00 00  lea         edx,[??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000174: E8 00 00 00 00     call        00000179
  00000179: 58                 pop         eax
  0000017A: 5A                 pop         edx
  0000017B: 5F                 pop         edi
  0000017C: 5E                 pop         esi
  0000017D: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000180: 33 CD              xor         ecx,ebp
  00000182: E8 00 00 00 00     call        00000187
  00000187: 81 C4 1C 01 00 00  add         esp,11Ch
  0000018D: 3B EC              cmp         ebp,esp
  0000018F: E8 00 00 00 00     call        00000194
  00000194: 8B E5              mov         esp,ebp
  00000196: 5D                 pop         ebp
  00000197: C2 08 00           ret         8
  0000019A: 8B FF              mov         edi,edi
$LN9:
  0000019C: 01 00              add         dword ptr [eax],eax
  0000019E: 00 00              add         byte ptr [eax],al
  000001A0: 00 00              add         byte ptr [eax],al
  000001A2: 00 00              add         byte ptr [eax],al
$LN8:
  000001A4: F0
  000001A5: FE
  000001A6: FF
  000001A7: FF 04 01           inc         dword ptr [ecx+eax]
  000001AA: 00 00              add         byte ptr [eax],al
  000001AC: 00 00              add         byte ptr [eax],al
  000001AE: 00 00              add         byte ptr [eax],al
$LN7:
  000001B0: 73 7A              jae         0000022C
  000001B2: 50                 push        eax
  000001B3: 61                 popad
  000001B4: 74 68              je          0000021E
  000001B6: 00 CC              add         ah,cl
  000001B8: CC                 int         3
  000001B9: CC                 int         3
  000001BA: CC                 int         3
  000001BB: CC                 int         3
  000001BC: CC                 int         3
  000001BD: CC                 int         3
  000001BE: CC                 int         3
  000001BF: CC                 int         3
?CreateConnection@FTPConnecter@@UAE?AVWZResult@@AAPAX0@Z (public: virtual class WZResult __thiscall FTPConnecter::CreateConnection(void * &,void * &)):
  000001C0: 55                 push        ebp
  000001C1: 8B EC              mov         ebp,esp
  000001C3: 83 EC 0C           sub         esp,0Ch
  000001C6: 56                 push        esi
  000001C7: 57                 push        edi
  000001C8: C7 45 F4 CC CC CC  mov         dword ptr [ebp-0Ch],0CCCCCCCCh
            CC
  000001CF: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  000001D6: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  000001DD: 89 4D FC           mov         dword ptr [ebp-4],ecx
  000001E0: C7 45 F4 00 00 00  mov         dword ptr [ebp-0Ch],offset ??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00
  000001E7: 8B F4              mov         esi,esp
  000001E9: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000001EC: 50                 push        eax
  000001ED: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000001F0: 8B 89 0C 04 00 00  mov         ecx,dword ptr [ecx+40Ch]
  000001F6: E8 00 00 00 00     call        000001FB
  000001FB: F7 D8              neg         eax
  000001FD: 1B C0              sbb         eax,eax
  000001FF: 25 00 00 00 08     and         eax,8000000h
  00000204: 50                 push        eax
  00000205: 6A 01              push        1
  00000207: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000020A: 8B 8A 0C 04 00 00  mov         ecx,dword ptr [edx+40Ch]
  00000210: E8 00 00 00 00     call        00000215
  00000215: 50                 push        eax
  00000216: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000219: 8B 88 0C 04 00 00  mov         ecx,dword ptr [eax+40Ch]
  0000021F: E8 00 00 00 00     call        00000224
  00000224: 50                 push        eax
  00000225: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000228: 8B 89 0C 04 00 00  mov         ecx,dword ptr [ecx+40Ch]
  0000022E: E8 00 00 00 00     call        00000233
  00000233: 0F B7 D0           movzx       edx,ax
  00000236: 52                 push        edx
  00000237: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000023A: 8B 88 0C 04 00 00  mov         ecx,dword ptr [eax+40Ch]
  00000240: E8 00 00 00 00     call        00000245
  00000245: 50                 push        eax
  00000246: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000249: 8B 11              mov         edx,dword ptr [ecx]
  0000024B: 52                 push        edx
  0000024C: FF 15 00 00 00 00  call        dword ptr [??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000252: 3B F4              cmp         esi,esp
  00000254: E8 00 00 00 00     call        00000259
  00000259: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  0000025C: 89 01              mov         dword ptr [ecx],eax
  0000025E: 8B 55 10           mov         edx,dword ptr [ebp+10h]
  00000261: 83 3A 00           cmp         dword ptr [edx],0
  00000264: 75 40              jne         000002A6
  00000266: 8B F4              mov         esi,esp
  00000268: FF 15 00 00 00 00  call        dword ptr [??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  0000026E: 3B F4              cmp         esi,esp
  00000270: E8 00 00 00 00     call        00000275
  00000275: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000278: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000027B: 8B 88 10 04 00 00  mov         ecx,dword ptr [eax+410h]
  00000281: E8 00 00 00 00     call        00000286
  00000286: 50                 push        eax
  00000287: 68 00 00 00 00     push        offset ??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  0000028C: 8B 4D F8           mov         ecx,dword ptr [ebp-8]
  0000028F: 51                 push        ecx
  00000290: 68 0A 00 00 20     push        2000000Ah
  00000295: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000298: 83 C2 04           add         edx,4
  0000029B: 52                 push        edx
  0000029C: E8 00 00 00 00     call        000002A1
  000002A1: 83 C4 14           add         esp,14h
  000002A4: EB 0B              jmp         000002B1
  000002A6: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000002A9: 83 C1 04           add         ecx,4
  000002AC: E8 00 00 00 00     call        000002B1
  000002B1: 8B 75 FC           mov         esi,dword ptr [ebp-4]
  000002B4: 83 C6 04           add         esi,4
  000002B7: B9 02 01 00 00     mov         ecx,102h
  000002BC: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  000002BF: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  000002C1: 8B 45 F4           mov         eax,dword ptr [ebp-0Ch]
  000002C4: 83 C8 01           or          eax,1
  000002C7: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  000002CA: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000002CD: 5F                 pop         edi
  000002CE: 5E                 pop         esi
  000002CF: 83 C4 0C           add         esp,0Ch
  000002D2: 3B EC              cmp         ebp,esp
  000002D4: E8 00 00 00 00     call        000002D9
  000002D9: 8B E5              mov         esp,ebp
  000002DB: 5D                 pop         ebp
  000002DC: C2 0C 00           ret         0Ch
  000002DF: CC                 int         3
?OpenRemoteFile@FTPConnecter@@UAE?AVWZResult@@AAPAX0AA_K@Z (public: virtual class WZResult __thiscall FTPConnecter::OpenRemoteFile(void * &,void * &,unsigned __int64 &)):
  000002E0: 55                 push        ebp
  000002E1: 8B EC              mov         ebp,esp
  000002E3: 81 EC 5C 01 00 00  sub         esp,15Ch
  000002E9: 56                 push        esi
  000002EA: 57                 push        edi
  000002EB: 51                 push        ecx
  000002EC: 8D BD A4 FE FF FF  lea         edi,[ebp-15Ch]
  000002F2: B9 57 00 00 00     mov         ecx,57h
  000002F7: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  000002FC: F3 AB              rep stos    dword ptr [edi]
  000002FE: 59                 pop         ecx
  000002FF: A1 00 00 00 00     mov         eax,[??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000304: 33 C5              xor         eax,ebp
  00000306: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000309: 89 4D F8           mov         dword ptr [ebp-8],ecx
  0000030C: C7 85 A4 FE FF FF  mov         dword ptr [ebp-15Ch],offset ??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00 00 00 00
  00000316: 8B F4              mov         esi,esp
  00000318: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  0000031B: 50                 push        eax
  0000031C: 68 00 00 00 84     push        84000000h
  00000321: 8D 8D B4 FE FF FF  lea         ecx,[ebp-14Ch]
  00000327: 51                 push        ecx
  00000328: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  0000032B: 8B 8A 10 04 00 00  mov         ecx,dword ptr [edx+410h]
  00000331: E8 00 00 00 00     call        00000336
  00000336: 50                 push        eax
  00000337: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  0000033A: 8B 08              mov         ecx,dword ptr [eax]
  0000033C: 51                 push        ecx
  0000033D: FF 15 00 00 00 00  call        dword ptr [??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000343: 3B F4              cmp         esi,esp
  00000345: E8 00 00 00 00     call        0000034A
  0000034A: 89 85 AC FE FF FF  mov         dword ptr [ebp-154h],eax
  00000350: 83 BD AC FE FF FF  cmp         dword ptr [ebp-154h],0
            00
  00000357: 75 51              jne         000003AA
  00000359: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  0000035C: 8B 8A 10 04 00 00  mov         ecx,dword ptr [edx+410h]
  00000362: E8 00 00 00 00     call        00000367
  00000367: 50                 push        eax
  00000368: 68 00 00 00 00     push        offset ??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  0000036D: 6A 00              push        0
  0000036F: 68 0B 00 00 20     push        2000000Bh
  00000374: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  00000377: 83 C0 04           add         eax,4
  0000037A: 50                 push        eax
  0000037B: E8 00 00 00 00     call        00000380
  00000380: 83 C4 14           add         esp,14h
  00000383: 8B 75 F8           mov         esi,dword ptr [ebp-8]
  00000386: 83 C6 04           add         esi,4
  00000389: B9 02 01 00 00     mov         ecx,102h
  0000038E: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  00000391: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  00000393: 8B 8D A4 FE FF FF  mov         ecx,dword ptr [ebp-15Ch]
  00000399: 83 C9 01           or          ecx,1
  0000039C: 89 8D A4 FE FF FF  mov         dword ptr [ebp-15Ch],ecx
  000003A2: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000003A5: E9 EB 00 00 00     jmp         00000495
  000003AA: 8B B5 D4 FE FF FF  mov         esi,dword ptr [ebp-12Ch]
  000003B0: 33 FF              xor         edi,edi
  000003B2: 8B 85 D0 FE FF FF  mov         eax,dword ptr [ebp-130h]
  000003B8: 33 D2              xor         edx,edx
  000003BA: B1 20              mov         cl,20h
  000003BC: E8 00 00 00 00     call        000003C1
  000003C1: 03 F0              add         esi,eax
  000003C3: 13 FA              adc         edi,edx
  000003C5: 8B 55 14           mov         edx,dword ptr [ebp+14h]
  000003C8: 89 32              mov         dword ptr [edx],esi
  000003CA: 89 7A 04           mov         dword ptr [edx+4],edi
  000003CD: 8B F4              mov         esi,esp
  000003CF: 8B 85 AC FE FF FF  mov         eax,dword ptr [ebp-154h]
  000003D5: 50                 push        eax
  000003D6: FF 15 00 00 00 00  call        dword ptr [??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  000003DC: 3B F4              cmp         esi,esp
  000003DE: E8 00 00 00 00     call        000003E3
  000003E3: 8B F4              mov         esi,esp
  000003E5: 8B 4D F8           mov         ecx,dword ptr [ebp-8]
  000003E8: 51                 push        ecx
  000003E9: 68 02 00 00 84     push        84000002h
  000003EE: 68 00 00 00 80     push        80000000h
  000003F3: 8B 55 F8           mov         edx,dword ptr [ebp-8]
  000003F6: 8B 8A 10 04 00 00  mov         ecx,dword ptr [edx+410h]
  000003FC: E8 00 00 00 00     call        00000401
  00000401: 50                 push        eax
  00000402: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000405: 8B 08              mov         ecx,dword ptr [eax]
  00000407: 51                 push        ecx
  00000408: FF 15 00 00 00 00  call        dword ptr [??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  0000040E: 3B F4              cmp         esi,esp
  00000410: E8 00 00 00 00     call        00000415
  00000415: 8B 55 10           mov         edx,dword ptr [ebp+10h]
  00000418: 89 02              mov         dword ptr [edx],eax
  0000041A: 8B 45 10           mov         eax,dword ptr [ebp+10h]
  0000041D: 83 38 00           cmp         dword ptr [eax],0
  00000420: 75 46              jne         00000468
  00000422: 8B F4              mov         esi,esp
  00000424: FF 15 00 00 00 00  call        dword ptr [??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  0000042A: 3B F4              cmp         esi,esp
  0000042C: E8 00 00 00 00     call        00000431
  00000431: 89 85 A8 FE FF FF  mov         dword ptr [ebp-158h],eax
  00000437: 8B 4D F8           mov         ecx,dword ptr [ebp-8]
  0000043A: 8B 89 10 04 00 00  mov         ecx,dword ptr [ecx+410h]
  00000440: E8 00 00 00 00     call        00000445
  00000445: 50                 push        eax
  00000446: 68 00 00 00 00     push        offset ??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  0000044B: 8B 95 A8 FE FF FF  mov         edx,dword ptr [ebp-158h]
  00000451: 52                 push        edx
  00000452: 68 0C 00 00 20     push        2000000Ch
  00000457: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  0000045A: 83 C0 04           add         eax,4
  0000045D: 50                 push        eax
  0000045E: E8 00 00 00 00     call        00000463
  00000463: 83 C4 14           add         esp,14h
  00000466: EB 0B              jmp         00000473
  00000468: 8B 4D F8           mov         ecx,dword ptr [ebp-8]
  0000046B: 83 C1 04           add         ecx,4
  0000046E: E8 00 00 00 00     call        00000473
  00000473: 8B 75 F8           mov         esi,dword ptr [ebp-8]
  00000476: 83 C6 04           add         esi,4
  00000479: B9 02 01 00 00     mov         ecx,102h
  0000047E: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  00000481: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  00000483: 8B 8D A4 FE FF FF  mov         ecx,dword ptr [ebp-15Ch]
  00000489: 83 C9 01           or          ecx,1
  0000048C: 89 8D A4 FE FF FF  mov         dword ptr [ebp-15Ch],ecx
  00000492: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000495: 52                 push        edx
  00000496: 8B CD              mov         ecx,ebp
  00000498: 50                 push        eax
  00000499: 8D 15 00 00 00 00  lea         edx,[??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  0000049F: E8 00 00 00 00     call        000004A4
  000004A4: 58                 pop         eax
  000004A5: 5A                 pop         edx
  000004A6: 5F                 pop         edi
  000004A7: 5E                 pop         esi
  000004A8: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000004AB: 33 CD              xor         ecx,ebp
  000004AD: E8 00 00 00 00     call        000004B2
  000004B2: 81 C4 5C 01 00 00  add         esp,15Ch
  000004B8: 3B EC              cmp         ebp,esp
  000004BA: E8 00 00 00 00     call        000004BF
  000004BF: 8B E5              mov         esp,ebp
  000004C1: 5D                 pop         ebp
  000004C2: C2 10 00           ret         10h
  000004C5: 8D 49 00           lea         ecx,[ecx]
$LN10:
  000004C8: 01 00              add         dword ptr [eax],eax
  000004CA: 00 00              add         byte ptr [eax],al
  000004CC: 00 00              add         byte ptr [eax],al
  000004CE: 00 00              add         byte ptr [eax],al
$LN9:
  000004D0: B4 FE              mov         ah,0FEh
  000004D2: FF
  000004D3: FF 40 01           inc         dword ptr [eax+1]
  000004D6: 00 00              add         byte ptr [eax],al
  000004D8: 00 00              add         byte ptr [eax],al
  000004DA: 00 00              add         byte ptr [eax],al
$LN8:
  000004DC: 77 66              ja          00000544
  000004DE: 64 00 55 8B        add         byte ptr fs:[ebp-75h],dl
  000004E2: EC                 in          al,dx
  000004E3: 83 EC 0C           sub         esp,0Ch
  000004E6: 56                 push        esi
  000004E7: 57                 push        edi
  000004E8: C7 45 F4 CC CC CC  mov         dword ptr [ebp-0Ch],0CCCCCCCCh
            CC
  000004EF: C7 45 F8 CC CC CC  mov         dword ptr [ebp-8],0CCCCCCCCh
            CC
  000004F6: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  000004FD: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000500: C7 45 F4 00 00 00  mov         dword ptr [ebp-0Ch],offset ??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00
  00000507: 8B F4              mov         esi,esp
  00000509: 8B 45 14           mov         eax,dword ptr [ebp+14h]
  0000050C: 50                 push        eax
  0000050D: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000510: 8B 89 0C 04 00 00  mov         ecx,dword ptr [ecx+40Ch]
  00000516: E8 00 00 00 00     call        0000051B
  0000051B: 50                 push        eax
  0000051C: 8B 55 10           mov         edx,dword ptr [ebp+10h]
  0000051F: 52                 push        edx
  00000520: 8B 45 0C           mov         eax,dword ptr [ebp+0Ch]
  00000523: 8B 08              mov         ecx,dword ptr [eax]
  00000525: 51                 push        ecx
  00000526: FF 15 00 00 00 00  call        dword ptr [??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  0000052C: 3B F4              cmp         esi,esp
  0000052E: E8 00 00 00 00     call        00000533
  00000533: 85 C0              test        eax,eax
  00000535: 75 40              jne         00000577
  00000537: 8B F4              mov         esi,esp
  00000539: FF 15 00 00 00 00  call        dword ptr [??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  0000053F: 3B F4              cmp         esi,esp
  00000541: E8 00 00 00 00     call        00000546
  00000546: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000549: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000054C: 8B 8A 10 04 00 00  mov         ecx,dword ptr [edx+410h]
  00000552: E8 00 00 00 00     call        00000557
  00000557: 50                 push        eax
  00000558: 68 00 00 00 00     push        offset ??0FTPConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  0000055D: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  00000560: 50                 push        eax
  00000561: 68 0D 00 00 20     push        2000000Dh
  00000566: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000569: 83 C1 04           add         ecx,4
  0000056C: 51                 push        ecx
  0000056D: E8 00 00 00 00     call        00000572
  00000572: 83 C4 14           add         esp,14h
  00000575: EB 0B              jmp         00000582
  00000577: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000057A: 83 C1 04           add         ecx,4
  0000057D: E8 00 00 00 00     call        00000582
  00000582: 8B 75 FC           mov         esi,dword ptr [ebp-4]
  00000585: 83 C6 04           add         esi,4
  00000588: B9 02 01 00 00     mov         ecx,102h
  0000058D: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  00000590: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  00000592: 8B 55 F4           mov         edx,dword ptr [ebp-0Ch]
  00000595: 83 CA 01           or          edx,1
  00000598: 89 55 F4           mov         dword ptr [ebp-0Ch],edx
  0000059B: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000059E: 5F                 pop         edi
  0000059F: 5E                 pop         esi
  000005A0: 83 C4 0C           add         esp,0Ch
  000005A3: 3B EC              cmp         ebp,esp
  000005A5: E8 00 00 00 00     call        000005AA
  000005AA: 8B E5              mov         esp,ebp
  000005AC: 5D                 pop         ebp
  000005AD: C2 10 00           ret         10h

??0IConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z (public: __thiscall IConnecter::IConnecter(class DownloadServerInfo *,class DownloadFileInfo *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??0IConnecter@@QAE@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  00000017: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001A: 83 C1 04           add         ecx,4
  0000001D: E8 00 00 00 00     call        00000022
  00000022: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000025: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000028: 89 91 0C 04 00 00  mov         dword ptr [ecx+40Ch],edx
  0000002E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000031: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000034: 89 88 10 04 00 00  mov         dword ptr [eax+410h],ecx
  0000003A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000003D: 83 C4 04           add         esp,4
  00000040: 3B EC              cmp         ebp,esp
  00000042: E8 00 00 00 00     call        00000047
  00000047: 8B E5              mov         esp,ebp
  00000049: 5D                 pop         ebp
  0000004A: C2 08 00           ret         8

??1IConnecter@@QAE@XZ (public: __thiscall IConnecter::~IConnecter(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??1IConnecter@@QAE@XZ
  00000017: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001A: 83 C1 04           add         ecx,4
  0000001D: E8 00 00 00 00     call        00000022
  00000022: 83 C4 04           add         esp,4
  00000025: 3B EC              cmp         ebp,esp
  00000027: E8 00 00 00 00     call        0000002C
  0000002C: 8B E5              mov         esp,ebp
  0000002E: 5D                 pop         ebp
  0000002F: C3                 ret

?allocate@?$_DebugHeapAllocator@D@std@@QAAPADIPBX@Z (public: char * __cdecl std::_DebugHeapAllocator<char>::allocate(unsigned int,void const *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 10           sub         esp,10h
  00000006: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000B: 89 45 F0           mov         dword ptr [ebp-10h],eax
  0000000E: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000011: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000014: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000017: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  0000001B: 77 09              ja          00000026
  0000001D: C7 45 0C 00 00 00  mov         dword ptr [ebp+0Ch],offset ?allocate@?$_DebugHeapAllocator@D@std@@QAAPADIPBX@Z
            00
  00000024: EB 25              jmp         0000004B
  00000026: 83 C8 FF           or          eax,0FFh
  00000029: 33 D2              xor         edx,edx
  0000002B: F7 75 0C           div         eax,dword ptr [ebp+0Ch]
  0000002E: 83 F8 01           cmp         eax,1
  00000031: 73 18              jae         0000004B
  00000033: 6A 00              push        0
  00000035: 8D 4D F4           lea         ecx,[ebp-0Ch]
  00000038: E8 00 00 00 00     call        0000003D
  0000003D: 68 00 00 00 00     push        offset ?allocate@?$_DebugHeapAllocator@D@std@@QAAPADIPBX@Z
  00000042: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000045: 50                 push        eax
  00000046: E8 00 00 00 00     call        0000004B
  0000004B: 6A 56              push        56h
  0000004D: 68 00 00 00 00     push        offset ?allocate@?$_DebugHeapAllocator@D@std@@QAAPADIPBX@Z
  00000052: E8 00 00 00 00     call        00000057
  00000057: 50                 push        eax
  00000058: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  0000005B: 51                 push        ecx
  0000005C: E8 00 00 00 00     call        00000061
  00000061: 83 C4 10           add         esp,10h
  00000064: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000067: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  0000006A: 83 C4 10           add         esp,10h
  0000006D: 3B EC              cmp         ebp,esp
  0000006F: E8 00 00 00 00     call        00000074
  00000074: 8B E5              mov         esp,ebp
  00000076: 5D                 pop         ebp
  00000077: C3                 ret

??0bad_alloc@std@@QAE@PBD@Z (public: __thiscall std::bad_alloc::bad_alloc(char const *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8D 45 08           lea         eax,[ebp+8]
  00000011: 50                 push        eax
  00000012: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000015: E8 00 00 00 00     call        0000001A
  0000001A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001D: C7 01 00 00 00 00  mov         dword ptr [ecx],offset ??0bad_alloc@std@@QAE@PBD@Z
  00000023: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000026: 83 C4 04           add         esp,4
  00000029: 3B EC              cmp         ebp,esp
  0000002B: E8 00 00 00 00     call        00000030
  00000030: 8B E5              mov         esp,ebp
  00000032: 5D                 pop         ebp
  00000033: C2 04 00           ret         4

??1bad_alloc@std@@UAE@XZ (public: virtual __thiscall std::bad_alloc::~bad_alloc(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??1bad_alloc@std@@UAE@XZ
  00000017: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001A: E8 00 00 00 00     call        0000001F
  0000001F: 83 C4 04           add         esp,4
  00000022: 3B EC              cmp         ebp,esp
  00000024: E8 00 00 00 00     call        00000029
  00000029: 8B E5              mov         esp,ebp
  0000002B: 5D                 pop         ebp
  0000002C: C3                 ret

??_Gbad_alloc@std@@UAEPAXI@Z (public: virtual void * __thiscall std::bad_alloc::`scalar deleting destructor'(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000019: 83 E0 01           and         eax,1
  0000001C: 74 0C              je          0000002A
  0000001E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000021: 51                 push        ecx
  00000022: E8 00 00 00 00     call        00000027
  00000027: 83 C4 04           add         esp,4
  0000002A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002D: 83 C4 04           add         esp,4
  00000030: 3B EC              cmp         ebp,esp
  00000032: E8 00 00 00 00     call        00000037
  00000037: 8B E5              mov         esp,ebp
  00000039: 5D                 pop         ebp
  0000003A: C2 04 00           ret         4

?allocate@?$_DebugHeapAllocator@D@std@@QAEPADI@Z (public: char * __thiscall std::_DebugHeapAllocator<char>::allocate(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 14           sub         esp,14h
  00000006: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000B: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000000E: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000011: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000014: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000017: 89 45 FC           mov         dword ptr [ebp-4],eax
  0000001A: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000001D: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  00000021: 77 09              ja          0000002C
  00000023: C7 45 08 00 00 00  mov         dword ptr [ebp+8],offset ?allocate@?$_DebugHeapAllocator@D@std@@QAEPADI@Z
            00
  0000002A: EB 25              jmp         00000051
  0000002C: 83 C8 FF           or          eax,0FFh
  0000002F: 33 D2              xor         edx,edx
  00000031: F7 75 08           div         eax,dword ptr [ebp+8]
  00000034: 83 F8 01           cmp         eax,1
  00000037: 73 18              jae         00000051
  00000039: 6A 00              push        0
  0000003B: 8D 4D F0           lea         ecx,[ebp-10h]
  0000003E: E8 00 00 00 00     call        00000043
  00000043: 68 00 00 00 00     push        offset ?allocate@?$_DebugHeapAllocator@D@std@@QAEPADI@Z
  00000048: 8D 45 F0           lea         eax,[ebp-10h]
  0000004B: 50                 push        eax
  0000004C: E8 00 00 00 00     call        00000051
  00000051: 6A 61              push        61h
  00000053: 68 00 00 00 00     push        offset ?allocate@?$_DebugHeapAllocator@D@std@@QAEPADI@Z
  00000058: E8 00 00 00 00     call        0000005D
  0000005D: 50                 push        eax
  0000005E: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000061: 51                 push        ecx
  00000062: E8 00 00 00 00     call        00000067
  00000067: 83 C4 10           add         esp,10h
  0000006A: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000006D: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000070: 83 C4 14           add         esp,14h
  00000073: 3B EC              cmp         ebp,esp
  00000075: E8 00 00 00 00     call        0000007A
  0000007A: 8B E5              mov         esp,ebp
  0000007C: 5D                 pop         ebp
  0000007D: C2 04 00           ret         4

?deallocate@?$_DebugHeapAllocator@D@std@@QAEXPADI@Z (public: void __thiscall std::_DebugHeapAllocator<char>::deallocate(char *,unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000011: 50                 push        eax
  00000012: E8 00 00 00 00     call        00000017
  00000017: 83 C4 04           add         esp,4
  0000001A: 83 C4 04           add         esp,4
  0000001D: 3B EC              cmp         ebp,esp
  0000001F: E8 00 00 00 00     call        00000024
  00000024: 8B E5              mov         esp,ebp
  00000026: 5D                 pop         ebp
  00000027: C2 08 00           ret         8

??0bad_alloc@std@@QAE@ABV01@@Z (public: __thiscall std::bad_alloc::bad_alloc(class std::bad_alloc const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000011: 50                 push        eax
  00000012: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000015: E8 00 00 00 00     call        0000001A
  0000001A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001D: C7 01 00 00 00 00  mov         dword ptr [ecx],offset ??0bad_alloc@std@@QAE@ABV01@@Z
  00000023: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000026: 83 C4 04           add         esp,4
  00000029: 3B EC              cmp         ebp,esp
  0000002B: E8 00 00 00 00     call        00000030
  00000030: 8B E5              mov         esp,ebp
  00000032: 5D                 pop         ebp
  00000033: C2 04 00           ret         4

??0?$_DebugHeapAllocator@D@std@@QAE@XZ (public: __thiscall std::_DebugHeapAllocator<char>::_DebugHeapAllocator<char>(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000019: 83 C4 04           add         esp,4
  0000001C: 3B EC              cmp         ebp,esp
  0000001E: E8 00 00 00 00     call        00000023
  00000023: 8B E5              mov         esp,ebp
  00000025: 5D                 pop         ebp
  00000026: C3                 ret

??0?$allocator@D@std@@QAE@XZ (public: __thiscall std::allocator<char>::allocator<char>(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B E5              mov         esp,ebp
  00000013: 5D                 pop         ebp
  00000014: C3                 ret

??0?$_DebugHeapAllocator@D@std@@QAE@ABV01@@Z (public: __thiscall std::_DebugHeapAllocator<char>::_DebugHeapAllocator<char>(class std::_DebugHeapAllocator<char> const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000011: 50                 push        eax
  00000012: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000015: E8 00 00 00 00     call        0000001A
  0000001A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001D: 83 C4 04           add         esp,4
  00000020: 3B EC              cmp         ebp,esp
  00000022: E8 00 00 00 00     call        00000027
  00000027: 8B E5              mov         esp,ebp
  00000029: 5D                 pop         ebp
  0000002A: C2 04 00           ret         4

??0?$allocator@D@std@@QAE@ABV01@@Z (public: __thiscall std::allocator<char>::allocator<char>(class std::allocator<char> const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B E5              mov         esp,ebp
  00000013: 5D                 pop         ebp
  00000014: C2 04 00           ret         4

??$_DebugHeapDelete@X@std@@YAXPAX@Z (void __cdecl std::_DebugHeapDelete<void>(void *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  00000007: 74 0C              je          00000015
  00000009: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000000C: 50                 push        eax
  0000000D: E8 00 00 00 00     call        00000012
  00000012: 83 C4 04           add         esp,4
  00000015: 3B EC              cmp         ebp,esp
  00000017: E8 00 00 00 00     call        0000001C
  0000001C: 5D                 pop         ebp
  0000001D: C3                 ret

??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z (public: __thiscall FileDownloader::FileDownloader(class IDownloaderStateEvent *,class DownloadServerInfo *,class DownloadFileInfo *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  00000017: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001A: 83 C1 04           add         ecx,4
  0000001D: E8 00 00 00 00     call        00000022
  00000022: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000025: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00000028: 89 91 0C 04 00 00  mov         dword ptr [ecx+40Ch],edx
  0000002E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000031: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00000034: 89 88 10 04 00 00  mov         dword ptr [eax+410h],ecx
  0000003A: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000003D: 8B 45 10           mov         eax,dword ptr [ebp+10h]
  00000040: 89 82 14 04 00 00  mov         dword ptr [edx+414h],eax
  00000046: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000049: C7 81 18 04 00 00  mov         dword ptr [ecx+418h],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00 00 00 00
  00000053: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000056: C7 82 28 04 00 00  mov         dword ptr [edx+428h],0FFFFFFFFh
            FF FF FF FF
  00000060: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000063: C7 80 30 04 00 00  mov         dword ptr [eax+430h],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00 00 00 00
  0000006D: C7 80 34 04 00 00  mov         dword ptr [eax+434h],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00 00 00 00
  00000077: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  0000007B: 75 1E              jne         0000009B
  0000007D: 68 00 00 00 00     push        offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  00000082: 6A 00              push        0
  00000084: 6A 1C              push        1Ch
  00000086: 68 00 00 00 00     push        offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  0000008B: 6A 02              push        2
  0000008D: E8 00 00 00 00     call        00000092
  00000092: 83 C4 14           add         esp,14h
  00000095: 83 F8 01           cmp         eax,1
  00000098: 75 01              jne         0000009B
  0000009A: CC                 int         3
  0000009B: 83 7D 10 00        cmp         dword ptr [ebp+10h],0
  0000009F: 75 1E              jne         000000BF
  000000A1: 68 00 00 00 00     push        offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  000000A6: 6A 00              push        0
  000000A8: 6A 1D              push        1Dh
  000000AA: 68 00 00 00 00     push        offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  000000AF: 6A 02              push        2
  000000B1: E8 00 00 00 00     call        000000B6
  000000B6: 83 C4 14           add         esp,14h
  000000B9: 83 F8 01           cmp         eax,1
  000000BC: 75 01              jne         000000BF
  000000BE: CC                 int         3
  000000BF: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000000C2: 83 C4 04           add         esp,4
  000000C5: 3B EC              cmp         ebp,esp
  000000C7: E8 00 00 00 00     call        000000CC
  000000CC: 8B E5              mov         esp,ebp
  000000CE: 5D                 pop         ebp
  000000CF: C2 0C 00           ret         0Ch
  000000D2: CC                 int         3
  000000D3: CC                 int         3
  000000D4: CC                 int         3
  000000D5: CC                 int         3
  000000D6: CC                 int         3
  000000D7: CC                 int         3
  000000D8: CC                 int         3
  000000D9: CC                 int         3
  000000DA: CC                 int         3
  000000DB: CC                 int         3
  000000DC: CC                 int         3
  000000DD: CC                 int         3
  000000DE: CC                 int         3
  000000DF: CC                 int         3
??1FileDownloader@@QAE@XZ (public: __thiscall FileDownloader::~FileDownloader(void)):
  000000E0: 55                 push        ebp
  000000E1: 8B EC              mov         ebp,esp
  000000E3: 6A FF              push        0FFh
  000000E5: 68 00 00 00 00     push        offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  000000EA: 64 A1 00 00 00 00  mov         eax,fs:[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  000000F0: 50                 push        eax
  000000F1: 51                 push        ecx
  000000F2: C7 45 F0 CC CC CC  mov         dword ptr [ebp-10h],0CCCCCCCCh
            CC
  000000F9: A1 00 00 00 00     mov         eax,[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  000000FE: 33 C5              xor         eax,ebp
  00000100: 50                 push        eax
  00000101: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000104: 64 A3 00 00 00 00  mov         fs:[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z],eax
  0000010A: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  0000010D: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00
  00000114: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000117: E8 00 00 00 00     call        0000011C
  0000011C: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000123: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000126: 83 C1 04           add         ecx,4
  00000129: E8 00 00 00 00     call        0000012E
  0000012E: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000131: 64 89 0D 00 00 00  mov         dword ptr fs:[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z],ecx
            00
  00000138: 59                 pop         ecx
  00000139: 83 C4 10           add         esp,10h
  0000013C: 3B EC              cmp         ebp,esp
  0000013E: E8 00 00 00 00     call        00000143
  00000143: 8B E5              mov         esp,ebp
  00000145: 5D                 pop         ebp
  00000146: C3                 ret
  00000147: CC                 int         3
  00000148: CC                 int         3
  00000149: CC                 int         3
  0000014A: CC                 int         3
  0000014B: CC                 int         3
  0000014C: CC                 int         3
  0000014D: CC                 int         3
  0000014E: CC                 int         3
  0000014F: CC                 int         3
?CanBeContinue@FileDownloader@@AAEHXZ (private: int __thiscall FileDownloader::CanBeContinue(void)):
  00000150: 55                 push        ebp
  00000151: 8B EC              mov         ebp,esp
  00000153: 51                 push        ecx
  00000154: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000015B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000015E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000161: 83 38 00           cmp         dword ptr [eax],0
  00000164: 74 18              je          0000017E
  00000166: 68 00 00 00 00     push        offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  0000016B: 6A 00              push        0
  0000016D: 6A 01              push        1
  0000016F: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000172: 83 C1 04           add         ecx,4
  00000175: 51                 push        ecx
  00000176: E8 00 00 00 00     call        0000017B
  0000017B: 83 C4 10           add         esp,10h
  0000017E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000181: 83 C1 04           add         ecx,4
  00000184: E8 00 00 00 00     call        00000189
  00000189: 83 C4 04           add         esp,4
  0000018C: 3B EC              cmp         ebp,esp
  0000018E: E8 00 00 00 00     call        00000193
  00000193: 8B E5              mov         esp,ebp
  00000195: 5D                 pop         ebp
  00000196: C3                 ret
  00000197: CC                 int         3
  00000198: CC                 int         3
  00000199: CC                 int         3
  0000019A: CC                 int         3
  0000019B: CC                 int         3
  0000019C: CC                 int         3
  0000019D: CC                 int         3
  0000019E: CC                 int         3
  0000019F: CC                 int         3
?Release@FileDownloader@@AAEXXZ (private: void __thiscall FileDownloader::Release(void)):
  000001A0: 55                 push        ebp
  000001A1: 8B EC              mov         ebp,esp
  000001A3: 83 EC 10           sub         esp,10h
  000001A6: 56                 push        esi
  000001A7: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  000001AC: 89 45 F0           mov         dword ptr [ebp-10h],eax
  000001AF: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  000001B2: 89 45 F8           mov         dword ptr [ebp-8],eax
  000001B5: 89 45 FC           mov         dword ptr [ebp-4],eax
  000001B8: 89 4D FC           mov         dword ptr [ebp-4],ecx
  000001BB: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000001BE: 83 B8 28 04 00 00  cmp         dword ptr [eax+428h],0FFh
            FF
  000001C5: 74 26              je          000001ED
  000001C7: 8B F4              mov         esi,esp
  000001C9: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000001CC: 8B 91 28 04 00 00  mov         edx,dword ptr [ecx+428h]
  000001D2: 52                 push        edx
  000001D3: FF 15 00 00 00 00  call        dword ptr [??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  000001D9: 3B F4              cmp         esi,esp
  000001DB: E8 00 00 00 00     call        000001E0
  000001E0: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000001E3: C7 80 28 04 00 00  mov         dword ptr [eax+428h],0FFFFFFFFh
            FF FF FF FF
  000001ED: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000001F0: 83 B9 24 04 00 00  cmp         dword ptr [ecx+424h],0
            00
  000001F7: 74 26              je          0000021F
  000001F9: 8B F4              mov         esi,esp
  000001FB: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  000001FE: 8B 82 24 04 00 00  mov         eax,dword ptr [edx+424h]
  00000204: 50                 push        eax
  00000205: FF 15 00 00 00 00  call        dword ptr [??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  0000020B: 3B F4              cmp         esi,esp
  0000020D: E8 00 00 00 00     call        00000212
  00000212: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000215: C7 81 24 04 00 00  mov         dword ptr [ecx+424h],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00 00 00 00
  0000021F: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000222: 83 BA 20 04 00 00  cmp         dword ptr [edx+420h],0
            00
  00000229: 74 26              je          00000251
  0000022B: 8B F4              mov         esi,esp
  0000022D: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000230: 8B 88 20 04 00 00  mov         ecx,dword ptr [eax+420h]
  00000236: 51                 push        ecx
  00000237: FF 15 00 00 00 00  call        dword ptr [??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  0000023D: 3B F4              cmp         esi,esp
  0000023F: E8 00 00 00 00     call        00000244
  00000244: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000247: C7 82 20 04 00 00  mov         dword ptr [edx+420h],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00 00 00 00
  00000251: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000254: 83 B8 1C 04 00 00  cmp         dword ptr [eax+41Ch],0
            00
  0000025B: 74 26              je          00000283
  0000025D: 8B F4              mov         esi,esp
  0000025F: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000262: 8B 91 1C 04 00 00  mov         edx,dword ptr [ecx+41Ch]
  00000268: 52                 push        edx
  00000269: FF 15 00 00 00 00  call        dword ptr [??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  0000026F: 3B F4              cmp         esi,esp
  00000271: E8 00 00 00 00     call        00000276
  00000276: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000279: C7 80 1C 04 00 00  mov         dword ptr [eax+41Ch],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00 00 00 00
  00000283: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000286: 83 B9 18 04 00 00  cmp         dword ptr [ecx+418h],0
            00
  0000028D: 74 3B              je          000002CA
  0000028F: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000292: 8B 82 18 04 00 00  mov         eax,dword ptr [edx+418h]
  00000298: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  0000029B: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  0000029E: 89 4D F8           mov         dword ptr [ebp-8],ecx
  000002A1: 83 7D F8 00        cmp         dword ptr [ebp-8],0
  000002A5: 74 0F              je          000002B6
  000002A7: 6A 01              push        1
  000002A9: 8B 4D F8           mov         ecx,dword ptr [ebp-8]
  000002AC: E8 00 00 00 00     call        000002B1
  000002B1: 89 45 F0           mov         dword ptr [ebp-10h],eax
  000002B4: EB 07              jmp         000002BD
  000002B6: C7 45 F0 00 00 00  mov         dword ptr [ebp-10h],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00
  000002BD: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  000002C0: C7 82 18 04 00 00  mov         dword ptr [edx+418h],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00 00 00 00
  000002CA: 5E                 pop         esi
  000002CB: 83 C4 10           add         esp,10h
  000002CE: 3B EC              cmp         ebp,esp
  000002D0: E8 00 00 00 00     call        000002D5
  000002D5: 8B E5              mov         esp,ebp
  000002D7: 5D                 pop         ebp
  000002D8: C3                 ret
  000002D9: CC                 int         3
  000002DA: CC                 int         3
  000002DB: CC                 int         3
  000002DC: CC                 int         3
  000002DD: CC                 int         3
  000002DE: CC                 int         3
  000002DF: CC                 int         3
?Break@FileDownloader@@QAEXXZ (public: void __thiscall FileDownloader::Break(void)):
  000002E0: 55                 push        ebp
  000002E1: 8B EC              mov         ebp,esp
  000002E3: 51                 push        ecx
  000002E4: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  000002EB: 89 4D FC           mov         dword ptr [ebp-4],ecx
  000002EE: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000002F1: C7 00 01 00 00 00  mov         dword ptr [eax],1
  000002F7: 8B E5              mov         esp,ebp
  000002F9: 5D                 pop         ebp
  000002FA: C3                 ret
  000002FB: CC                 int         3
  000002FC: CC                 int         3
  000002FD: CC                 int         3
  000002FE: CC                 int         3
  000002FF: CC                 int         3
?DownloadFile@FileDownloader@@QAE?AVWZResult@@XZ (public: class WZResult __thiscall FileDownloader::DownloadFile(void)):
  00000300: 55                 push        ebp
  00000301: 8B EC              mov         ebp,esp
  00000303: 6A FF              push        0FFh
  00000305: 68 00 00 00 00     push        offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  0000030A: 64 A1 00 00 00 00  mov         eax,fs:[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000310: 50                 push        eax
  00000311: 51                 push        ecx
  00000312: B8 60 10 00 00     mov         eax,1060h
  00000317: E8 00 00 00 00     call        0000031C
  0000031C: 53                 push        ebx
  0000031D: 56                 push        esi
  0000031E: 57                 push        edi
  0000031F: 51                 push        ecx
  00000320: 8D BD 90 EF FF FF  lea         edi,[ebp-1070h]
  00000326: B9 18 04 00 00     mov         ecx,418h
  0000032B: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000330: F3 AB              rep stos    dword ptr [edi]
  00000332: 59                 pop         ecx
  00000333: A1 00 00 00 00     mov         eax,[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000338: 33 C5              xor         eax,ebp
  0000033A: 50                 push        eax
  0000033B: 8D 45 F4           lea         eax,[ebp-0Ch]
  0000033E: 64 A3 00 00 00 00  mov         fs:[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z],eax
  00000344: 89 65 F0           mov         dword ptr [ebp-10h],esp
  00000347: 89 4D EC           mov         dword ptr [ebp-14h],ecx
  0000034A: C7 85 C4 EF FF FF  mov         dword ptr [ebp-103Ch],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00 00 00 00
  00000354: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00
  0000035B: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  0000035E: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  00000364: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000367: C7 81 30 04 00 00  mov         dword ptr [ecx+430h],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00 00 00 00
  00000371: C7 81 34 04 00 00  mov         dword ptr [ecx+434h],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00 00 00 00
  0000037B: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  0000037E: E8 00 00 00 00     call        00000383
  00000383: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000386: E8 00 00 00 00     call        0000038B
  0000038B: 89 85 C0 EF FF FF  mov         dword ptr [ebp-1040h],eax
  00000391: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  00000394: 8B 85 C0 EF FF FF  mov         eax,dword ptr [ebp-1040h]
  0000039A: 89 82 18 04 00 00  mov         dword ptr [edx+418h],eax
  000003A0: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000003A3: 81 C1 1C 04 00 00  add         ecx,41Ch
  000003A9: 8B F4              mov         esi,esp
  000003AB: 51                 push        ecx
  000003AC: 8D 95 E0 FB FF FF  lea         edx,[ebp-420h]
  000003B2: 52                 push        edx
  000003B3: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  000003B6: 8B 88 18 04 00 00  mov         ecx,dword ptr [eax+418h]
  000003BC: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  000003BF: 8B 82 18 04 00 00  mov         eax,dword ptr [edx+418h]
  000003C5: 8B 10              mov         edx,dword ptr [eax]
  000003C7: 8B 02              mov         eax,dword ptr [edx]
  000003C9: FF D0              call        eax
  000003CB: 3B F4              cmp         esi,esp
  000003CD: E8 00 00 00 00     call        000003D2
  000003D2: 89 85 BC EF FF FF  mov         dword ptr [ebp-1044h],eax
  000003D8: 8B 8D BC EF FF FF  mov         ecx,dword ptr [ebp-1044h]
  000003DE: 89 8D B8 EF FF FF  mov         dword ptr [ebp-1048h],ecx
  000003E4: C6 45 FC 01        mov         byte ptr [ebp-4],1
  000003E8: 8B 95 B8 EF FF FF  mov         edx,dword ptr [ebp-1048h]
  000003EE: 52                 push        edx
  000003EF: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000003F2: 83 C1 04           add         ecx,4
  000003F5: E8 00 00 00 00     call        000003FA
  000003FA: C6 45 FC 00        mov         byte ptr [ebp-4],0
  000003FE: 8D 8D E0 FB FF FF  lea         ecx,[ebp-420h]
  00000404: E8 00 00 00 00     call        00000409
  00000409: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  0000040C: E8 00 00 00 00     call        00000411
  00000411: 89 85 B4 EF FF FF  mov         dword ptr [ebp-104Ch],eax
  00000417: 83 BD B4 EF FF FF  cmp         dword ptr [ebp-104Ch],0
            00
  0000041E: 75 27              jne         00000447
  00000420: 8B 75 EC           mov         esi,dword ptr [ebp-14h]
  00000423: 83 C6 04           add         esi,4
  00000426: B9 02 01 00 00     mov         ecx,102h
  0000042B: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  0000042E: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  00000430: 8B 85 C4 EF FF FF  mov         eax,dword ptr [ebp-103Ch]
  00000436: 83 C8 01           or          eax,1
  00000439: 89 85 C4 EF FF FF  mov         dword ptr [ebp-103Ch],eax
  0000043F: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000442: E9 9E 02 00 00     jmp         000006E5
  00000447: 8D 8D D8 F7 FF FF  lea         ecx,[ebp-828h]
  0000044D: 51                 push        ecx
  0000044E: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000451: E8 00 00 00 00     call        00000456
  00000456: 89 85 B0 EF FF FF  mov         dword ptr [ebp-1050h],eax
  0000045C: 8B 95 B0 EF FF FF  mov         edx,dword ptr [ebp-1050h]
  00000462: 89 95 AC EF FF FF  mov         dword ptr [ebp-1054h],edx
  00000468: C6 45 FC 02        mov         byte ptr [ebp-4],2
  0000046C: 8B 85 AC EF FF FF  mov         eax,dword ptr [ebp-1054h]
  00000472: 50                 push        eax
  00000473: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000476: 83 C1 04           add         ecx,4
  00000479: E8 00 00 00 00     call        0000047E
  0000047E: C6 45 FC 00        mov         byte ptr [ebp-4],0
  00000482: 8D 8D D8 F7 FF FF  lea         ecx,[ebp-828h]
  00000488: E8 00 00 00 00     call        0000048D
  0000048D: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000490: E8 00 00 00 00     call        00000495
  00000495: 89 85 A8 EF FF FF  mov         dword ptr [ebp-1058h],eax
  0000049B: 83 BD A8 EF FF FF  cmp         dword ptr [ebp-1058h],0
            00
  000004A2: 75 27              jne         000004CB
  000004A4: 8B 75 EC           mov         esi,dword ptr [ebp-14h]
  000004A7: 83 C6 04           add         esi,4
  000004AA: B9 02 01 00 00     mov         ecx,102h
  000004AF: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  000004B2: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  000004B4: 8B 8D C4 EF FF FF  mov         ecx,dword ptr [ebp-103Ch]
  000004BA: 83 C9 01           or          ecx,1
  000004BD: 89 8D C4 EF FF FF  mov         dword ptr [ebp-103Ch],ecx
  000004C3: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000004C6: E9 1A 02 00 00     jmp         000006E5
  000004CB: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  000004CE: 81 C2 30 04 00 00  add         edx,430h
  000004D4: 8B F4              mov         esi,esp
  000004D6: 52                 push        edx
  000004D7: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  000004DA: 05 24 04 00 00     add         eax,424h
  000004DF: 50                 push        eax
  000004E0: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000004E3: 81 C1 20 04 00 00  add         ecx,420h
  000004E9: 51                 push        ecx
  000004EA: 8D 95 D0 F3 FF FF  lea         edx,[ebp-0C30h]
  000004F0: 52                 push        edx
  000004F1: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  000004F4: 8B 88 18 04 00 00  mov         ecx,dword ptr [eax+418h]
  000004FA: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  000004FD: 8B 82 18 04 00 00  mov         eax,dword ptr [edx+418h]
  00000503: 8B 10              mov         edx,dword ptr [eax]
  00000505: 8B 42 08           mov         eax,dword ptr [edx+8]
  00000508: FF D0              call        eax
  0000050A: 3B F4              cmp         esi,esp
  0000050C: E8 00 00 00 00     call        00000511
  00000511: 89 85 A4 EF FF FF  mov         dword ptr [ebp-105Ch],eax
  00000517: 8B 8D A4 EF FF FF  mov         ecx,dword ptr [ebp-105Ch]
  0000051D: 89 8D A0 EF FF FF  mov         dword ptr [ebp-1060h],ecx
  00000523: C6 45 FC 03        mov         byte ptr [ebp-4],3
  00000527: 8B 95 A0 EF FF FF  mov         edx,dword ptr [ebp-1060h]
  0000052D: 52                 push        edx
  0000052E: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000531: 83 C1 04           add         ecx,4
  00000534: E8 00 00 00 00     call        00000539
  00000539: C6 45 FC 00        mov         byte ptr [ebp-4],0
  0000053D: 8D 8D D0 F3 FF FF  lea         ecx,[ebp-0C30h]
  00000543: E8 00 00 00 00     call        00000548
  00000548: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  0000054B: E8 00 00 00 00     call        00000550
  00000550: 89 85 9C EF FF FF  mov         dword ptr [ebp-1064h],eax
  00000556: 83 BD 9C EF FF FF  cmp         dword ptr [ebp-1064h],0
            00
  0000055D: 75 27              jne         00000586
  0000055F: 8B 75 EC           mov         esi,dword ptr [ebp-14h]
  00000562: 83 C6 04           add         esi,4
  00000565: B9 02 01 00 00     mov         ecx,102h
  0000056A: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  0000056D: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  0000056F: 8B 85 C4 EF FF FF  mov         eax,dword ptr [ebp-103Ch]
  00000575: 83 C8 01           or          eax,1
  00000578: 89 85 C4 EF FF FF  mov         dword ptr [ebp-103Ch],eax
  0000057E: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000581: E9 5F 01 00 00     jmp         000006E5
  00000586: 8D 8D C8 EF FF FF  lea         ecx,[ebp-1038h]
  0000058C: 51                 push        ecx
  0000058D: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000590: E8 00 00 00 00     call        00000595
  00000595: 89 85 98 EF FF FF  mov         dword ptr [ebp-1068h],eax
  0000059B: 8B 95 98 EF FF FF  mov         edx,dword ptr [ebp-1068h]
  000005A1: 89 95 94 EF FF FF  mov         dword ptr [ebp-106Ch],edx
  000005A7: C6 45 FC 04        mov         byte ptr [ebp-4],4
  000005AB: 8B 85 94 EF FF FF  mov         eax,dword ptr [ebp-106Ch]
  000005B1: 50                 push        eax
  000005B2: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000005B5: 83 C1 04           add         ecx,4
  000005B8: E8 00 00 00 00     call        000005BD
  000005BD: C6 45 FC 00        mov         byte ptr [ebp-4],0
  000005C1: 8D 8D C8 EF FF FF  lea         ecx,[ebp-1038h]
  000005C7: E8 00 00 00 00     call        000005CC
  000005CC: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000005CF: E8 00 00 00 00     call        000005D4
  000005D4: 89 85 90 EF FF FF  mov         dword ptr [ebp-1070h],eax
  000005DA: 83 BD 90 EF FF FF  cmp         dword ptr [ebp-1070h],0
            00
  000005E1: 75 27              jne         0000060A
  000005E3: 8B 75 EC           mov         esi,dword ptr [ebp-14h]
  000005E6: 83 C6 04           add         esi,4
  000005E9: B9 02 01 00 00     mov         ecx,102h
  000005EE: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  000005F1: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  000005F3: 8B 8D C4 EF FF FF  mov         ecx,dword ptr [ebp-103Ch]
  000005F9: 83 C9 01           or          ecx,1
  000005FC: 89 8D C4 EF FF FF  mov         dword ptr [ebp-103Ch],ecx
  00000602: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000605: E9 DB 00 00 00     jmp         000006E5
  0000060A: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  0000060D: 8B 82 34 04 00 00  mov         eax,dword ptr [edx+434h]
  00000613: 50                 push        eax
  00000614: 8B 8A 30 04 00 00  mov         ecx,dword ptr [edx+430h]
  0000061A: 51                 push        ecx
  0000061B: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  0000061E: 8B 8A 14 04 00 00  mov         ecx,dword ptr [edx+414h]
  00000624: E8 00 00 00 00     call        00000629
  00000629: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000062C: 50                 push        eax
  0000062D: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000630: E8 00 00 00 00     call        00000635
  00000635: 8B 8D C4 EF FF FF  mov         ecx,dword ptr [ebp-103Ch]
  0000063B: 83 C9 01           or          ecx,1
  0000063E: 89 8D C4 EF FF FF  mov         dword ptr [ebp-103Ch],ecx
  00000644: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000647: E9 99 00 00 00     jmp         000006E5
__catch$?DownloadFile@FileDownloader@@QAE?AVWZResult@@XZ$0:
  0000064C: 8B F4              mov         esi,esp
  0000064E: FF 15 00 00 00 00  call        dword ptr [??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000654: 3B F4              cmp         esi,esp
  00000656: E8 00 00 00 00     call        0000065B
  0000065B: 89 45 E8           mov         dword ptr [ebp-18h],eax
  0000065E: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  00000661: 8B 8A 14 04 00 00  mov         ecx,dword ptr [edx+414h]
  00000667: E8 00 00 00 00     call        0000066C
  0000066C: 50                 push        eax
  0000066D: 68 00 00 00 00     push        offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  00000672: 8B 45 E8           mov         eax,dword ptr [ebp-18h]
  00000675: 50                 push        eax
  00000676: 68 01 00 00 20     push        20000001h
  0000067B: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  0000067E: 83 C1 04           add         ecx,4
  00000681: 51                 push        ecx
  00000682: E8 00 00 00 00     call        00000687
  00000687: 83 C4 14           add         esp,14h
  0000068A: 8B 75 EC           mov         esi,dword ptr [ebp-14h]
  0000068D: 83 C6 04           add         esi,4
  00000690: 81 EC 08 04 00 00  sub         esp,408h
  00000696: B9 02 01 00 00     mov         ecx,102h
  0000069B: 8B FC              mov         edi,esp
  0000069D: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  0000069F: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000006A2: E8 00 00 00 00     call        000006A7
  000006A7: 8B 75 EC           mov         esi,dword ptr [ebp-14h]
  000006AA: 83 C6 04           add         esi,4
  000006AD: B9 02 01 00 00     mov         ecx,102h
  000006B2: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  000006B5: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  000006B7: 8B 95 C4 EF FF FF  mov         edx,dword ptr [ebp-103Ch]
  000006BD: 83 CA 01           or          edx,1
  000006C0: 89 95 C4 EF FF FF  mov         dword ptr [ebp-103Ch],edx
  000006C6: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000006CD: B8 00 00 00 00     mov         eax,offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  000006D2: C3                 ret
  000006D3: B8 00 00 00 00     mov         eax,offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  000006D8: C3                 ret
__tryend$?DownloadFile@FileDownloader@@QAE?AVWZResult@@XZ$1:
  000006D9: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000006E0: EB 03              jmp         000006E5
$LN17:
  000006E2: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000006E5: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  000006E8: 64 89 0D 00 00 00  mov         dword ptr fs:[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z],ecx
            00
  000006EF: 59                 pop         ecx
  000006F0: 5F                 pop         edi
  000006F1: 5E                 pop         esi
  000006F2: 5B                 pop         ebx
  000006F3: 81 C4 70 10 00 00  add         esp,1070h
  000006F9: 3B EC              cmp         ebp,esp
  000006FB: E8 00 00 00 00     call        00000700
  00000700: 8B E5              mov         esp,ebp
  00000702: 5D                 pop         ebp
  00000703: C2 04 00           ret         4
  00000706: CC                 int         3
  00000707: CC                 int         3
  00000708: CC                 int         3
  00000709: CC                 int         3
  0000070A: CC                 int         3
  0000070B: CC                 int         3
  0000070C: CC                 int         3
  0000070D: CC                 int         3
  0000070E: CC                 int         3
  0000070F: CC                 int         3
?CreateConnecter@FileDownloader@@AAEPAVIConnecter@@XZ (private: class IConnecter * __thiscall FileDownloader::CreateConnecter(void)):
  00000710: 55                 push        ebp
  00000711: 8B EC              mov         ebp,esp
  00000713: 6A FF              push        0FFh
  00000715: 68 00 00 00 00     push        offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  0000071A: 64 A1 00 00 00 00  mov         eax,fs:[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000720: 50                 push        eax
  00000721: 83 EC 20           sub         esp,20h
  00000724: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000729: 89 45 D4           mov         dword ptr [ebp-2Ch],eax
  0000072C: 89 45 D8           mov         dword ptr [ebp-28h],eax
  0000072F: 89 45 DC           mov         dword ptr [ebp-24h],eax
  00000732: 89 45 E0           mov         dword ptr [ebp-20h],eax
  00000735: 89 45 E4           mov         dword ptr [ebp-1Ch],eax
  00000738: 89 45 E8           mov         dword ptr [ebp-18h],eax
  0000073B: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000073E: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000741: A1 00 00 00 00     mov         eax,[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000746: 33 C5              xor         eax,ebp
  00000748: 50                 push        eax
  00000749: 8D 45 F4           lea         eax,[ebp-0Ch]
  0000074C: 64 A3 00 00 00 00  mov         fs:[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z],eax
  00000752: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  00000755: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000758: 8B 88 10 04 00 00  mov         ecx,dword ptr [eax+410h]
  0000075E: E8 00 00 00 00     call        00000763
  00000763: 89 45 DC           mov         dword ptr [ebp-24h],eax
  00000766: 83 7D DC 01        cmp         dword ptr [ebp-24h],1
  0000076A: 74 02              je          0000076E
  0000076C: EB 57              jmp         000007C5
  0000076E: 68 14 04 00 00     push        414h
  00000773: E8 00 00 00 00     call        00000778
  00000778: 83 C4 04           add         esp,4
  0000077B: 89 45 E8           mov         dword ptr [ebp-18h],eax
  0000077E: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00
  00000785: 83 7D E8 00        cmp         dword ptr [ebp-18h],0
  00000789: 74 21              je          000007AC
  0000078B: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  0000078E: 8B 91 14 04 00 00  mov         edx,dword ptr [ecx+414h]
  00000794: 52                 push        edx
  00000795: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000798: 8B 88 10 04 00 00  mov         ecx,dword ptr [eax+410h]
  0000079E: 51                 push        ecx
  0000079F: 8B 4D E8           mov         ecx,dword ptr [ebp-18h]
  000007A2: E8 00 00 00 00     call        000007A7
  000007A7: 89 45 D8           mov         dword ptr [ebp-28h],eax
  000007AA: EB 07              jmp         000007B3
  000007AC: C7 45 D8 00 00 00  mov         dword ptr [ebp-28h],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00
  000007B3: 8B 55 D8           mov         edx,dword ptr [ebp-28h]
  000007B6: 89 55 EC           mov         dword ptr [ebp-14h],edx
  000007B9: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000007C0: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  000007C3: EB 55              jmp         0000081A
  000007C5: 68 14 04 00 00     push        414h
  000007CA: E8 00 00 00 00     call        000007CF
  000007CF: 83 C4 04           add         esp,4
  000007D2: 89 45 E0           mov         dword ptr [ebp-20h],eax
  000007D5: C7 45 FC 01 00 00  mov         dword ptr [ebp-4],1
            00
  000007DC: 83 7D E0 00        cmp         dword ptr [ebp-20h],0
  000007E0: 74 21              je          00000803
  000007E2: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  000007E5: 8B 88 14 04 00 00  mov         ecx,dword ptr [eax+414h]
  000007EB: 51                 push        ecx
  000007EC: 8B 55 F0           mov         edx,dword ptr [ebp-10h]
  000007EF: 8B 82 10 04 00 00  mov         eax,dword ptr [edx+410h]
  000007F5: 50                 push        eax
  000007F6: 8B 4D E0           mov         ecx,dword ptr [ebp-20h]
  000007F9: E8 00 00 00 00     call        000007FE
  000007FE: 89 45 D4           mov         dword ptr [ebp-2Ch],eax
  00000801: EB 07              jmp         0000080A
  00000803: C7 45 D4 00 00 00  mov         dword ptr [ebp-2Ch],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00
  0000080A: 8B 4D D4           mov         ecx,dword ptr [ebp-2Ch]
  0000080D: 89 4D E4           mov         dword ptr [ebp-1Ch],ecx
  00000810: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000817: 8B 45 E4           mov         eax,dword ptr [ebp-1Ch]
  0000081A: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  0000081D: 64 89 0D 00 00 00  mov         dword ptr fs:[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z],ecx
            00
  00000824: 59                 pop         ecx
  00000825: 83 C4 2C           add         esp,2Ch
  00000828: 3B EC              cmp         ebp,esp
  0000082A: E8 00 00 00 00     call        0000082F
  0000082F: 8B E5              mov         esp,ebp
  00000831: 5D                 pop         ebp
  00000832: C3                 ret
  00000833: CC                 int         3
  00000834: CC                 int         3
  00000835: CC                 int         3
  00000836: CC                 int         3
  00000837: CC                 int         3
  00000838: CC                 int         3
  00000839: CC                 int         3
  0000083A: CC                 int         3
  0000083B: CC                 int         3
  0000083C: CC                 int         3
  0000083D: CC                 int         3
  0000083E: CC                 int         3
  0000083F: CC                 int         3
?CreateConnection@FileDownloader@@AAE?AVWZResult@@XZ (private: class WZResult __thiscall FileDownloader::CreateConnection(void)):
  00000840: 55                 push        ebp
  00000841: 8B EC              mov         ebp,esp
  00000843: 83 EC 20           sub         esp,20h
  00000846: 56                 push        esi
  00000847: 57                 push        edi
  00000848: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000084D: 89 45 E0           mov         dword ptr [ebp-20h],eax
  00000850: 89 45 E4           mov         dword ptr [ebp-1Ch],eax
  00000853: 89 45 E8           mov         dword ptr [ebp-18h],eax
  00000856: 89 45 EC           mov         dword ptr [ebp-14h],eax
  00000859: 89 45 F0           mov         dword ptr [ebp-10h],eax
  0000085C: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  0000085F: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000862: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000865: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000868: C7 45 E0 00 00 00  mov         dword ptr [ebp-20h],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00
  0000086F: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000872: 8B 88 10 04 00 00  mov         ecx,dword ptr [eax+410h]
  00000878: E8 00 00 00 00     call        0000087D
  0000087D: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000880: 83 7D F8 00        cmp         dword ptr [ebp-8],0
  00000884: 75 22              jne         000008A8
  00000886: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000889: 51                 push        ecx
  0000088A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000088D: E8 00 00 00 00     call        00000892
  00000892: 8B 55 E0           mov         edx,dword ptr [ebp-20h]
  00000895: 83 CA 01           or          edx,1
  00000898: 89 55 E0           mov         dword ptr [ebp-20h],edx
  0000089B: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000089E: E9 7D 01 00 00     jmp         00000A20
  000008A3: E9 78 01 00 00     jmp         00000A20
  000008A8: C7 45 F4 00 00 00  mov         dword ptr [ebp-0Ch],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00
  000008AF: C7 45 EC 00 00 00  mov         dword ptr [ebp-14h],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00
  000008B6: 8D 45 EC           lea         eax,[ebp-14h]
  000008B9: 50                 push        eax
  000008BA: 6A 00              push        0
  000008BC: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000008BF: 51                 push        ecx
  000008C0: 68 00 00 00 00     push        offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  000008C5: 6A 00              push        0
  000008C7: 6A 00              push        0
  000008C9: E8 00 00 00 00     call        000008CE
  000008CE: 83 C4 18           add         esp,18h
  000008D1: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  000008D4: 83 7D F4 FF        cmp         dword ptr [ebp-0Ch],0FFh
  000008D8: 75 5F              jne         00000939
  000008DA: 8B F4              mov         esi,esp
  000008DC: FF 15 00 00 00 00  call        dword ptr [??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  000008E2: 3B F4              cmp         esi,esp
  000008E4: E8 00 00 00 00     call        000008E9
  000008E9: 89 45 E4           mov         dword ptr [ebp-1Ch],eax
  000008EC: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  000008EF: 8B 8A 14 04 00 00  mov         ecx,dword ptr [edx+414h]
  000008F5: E8 00 00 00 00     call        000008FA
  000008FA: 50                 push        eax
  000008FB: 68 00 00 00 00     push        offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  00000900: 8B 45 E4           mov         eax,dword ptr [ebp-1Ch]
  00000903: 50                 push        eax
  00000904: 68 03 00 00 20     push        20000003h
  00000909: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000090C: 83 C1 04           add         ecx,4
  0000090F: 51                 push        ecx
  00000910: E8 00 00 00 00     call        00000915
  00000915: 83 C4 14           add         esp,14h
  00000918: 8B 75 FC           mov         esi,dword ptr [ebp-4]
  0000091B: 83 C6 04           add         esi,4
  0000091E: B9 02 01 00 00     mov         ecx,102h
  00000923: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  00000926: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  00000928: 8B 55 E0           mov         edx,dword ptr [ebp-20h]
  0000092B: 83 CA 01           or          edx,1
  0000092E: 89 55 E0           mov         dword ptr [ebp-20h],edx
  00000931: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000934: E9 E7 00 00 00     jmp         00000A20
  00000939: 8B F4              mov         esi,esp
  0000093B: 8B 45 F8           mov         eax,dword ptr [ebp-8]
  0000093E: 50                 push        eax
  0000093F: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000942: 51                 push        ecx
  00000943: FF 15 00 00 00 00  call        dword ptr [??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000949: 3B F4              cmp         esi,esp
  0000094B: E8 00 00 00 00     call        00000950
  00000950: 3D 02 01 00 00     cmp         eax,102h
  00000955: 0F 85 96 00 00 00  jne         000009F1
  0000095B: 8B F4              mov         esi,esp
  0000095D: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000960: 8B 82 1C 04 00 00  mov         eax,dword ptr [edx+41Ch]
  00000966: 50                 push        eax
  00000967: FF 15 00 00 00 00  call        dword ptr [??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  0000096D: 3B F4              cmp         esi,esp
  0000096F: E8 00 00 00 00     call        00000974
  00000974: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000977: C7 81 1C 04 00 00  mov         dword ptr [ecx+41Ch],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00 00 00 00
  00000981: 8B F4              mov         esi,esp
  00000983: 6A FF              push        0FFh
  00000985: 8B 55 F4           mov         edx,dword ptr [ebp-0Ch]
  00000988: 52                 push        edx
  00000989: FF 15 00 00 00 00  call        dword ptr [??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  0000098F: 3B F4              cmp         esi,esp
  00000991: E8 00 00 00 00     call        00000996
  00000996: 8B F4              mov         esi,esp
  00000998: 8B 45 F4           mov         eax,dword ptr [ebp-0Ch]
  0000099B: 50                 push        eax
  0000099C: FF 15 00 00 00 00  call        dword ptr [??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  000009A2: 3B F4              cmp         esi,esp
  000009A4: E8 00 00 00 00     call        000009A9
  000009A9: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  000009AC: 8B 89 14 04 00 00  mov         ecx,dword ptr [ecx+414h]
  000009B2: E8 00 00 00 00     call        000009B7
  000009B7: 50                 push        eax
  000009B8: 68 00 00 00 00     push        offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  000009BD: 6A 00              push        0
  000009BF: 68 04 00 00 20     push        20000004h
  000009C4: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  000009C7: 83 C2 04           add         edx,4
  000009CA: 52                 push        edx
  000009CB: E8 00 00 00 00     call        000009D0
  000009D0: 83 C4 14           add         esp,14h
  000009D3: 8B 75 FC           mov         esi,dword ptr [ebp-4]
  000009D6: 83 C6 04           add         esi,4
  000009D9: B9 02 01 00 00     mov         ecx,102h
  000009DE: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  000009E1: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  000009E3: 8B 45 E0           mov         eax,dword ptr [ebp-20h]
  000009E6: 83 C8 01           or          eax,1
  000009E9: 89 45 E0           mov         dword ptr [ebp-20h],eax
  000009EC: 8B 45 08           mov         eax,dword ptr [ebp+8]
  000009EF: EB 2F              jmp         00000A20
  000009F1: 8B F4              mov         esi,esp
  000009F3: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  000009F6: 51                 push        ecx
  000009F7: FF 15 00 00 00 00  call        dword ptr [??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  000009FD: 3B F4              cmp         esi,esp
  000009FF: E8 00 00 00 00     call        00000A04
  00000A04: 8B 75 FC           mov         esi,dword ptr [ebp-4]
  00000A07: 83 C6 04           add         esi,4
  00000A0A: B9 02 01 00 00     mov         ecx,102h
  00000A0F: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  00000A12: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  00000A14: 8B 55 E0           mov         edx,dword ptr [ebp-20h]
  00000A17: 83 CA 01           or          edx,1
  00000A1A: 89 55 E0           mov         dword ptr [ebp-20h],edx
  00000A1D: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000A20: 52                 push        edx
  00000A21: 8B CD              mov         ecx,ebp
  00000A23: 50                 push        eax
  00000A24: 8D 15 00 00 00 00  lea         edx,[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000A2A: E8 00 00 00 00     call        00000A2F
  00000A2F: 58                 pop         eax
  00000A30: 5A                 pop         edx
  00000A31: 5F                 pop         edi
  00000A32: 5E                 pop         esi
  00000A33: 83 C4 20           add         esp,20h
  00000A36: 3B EC              cmp         ebp,esp
  00000A38: E8 00 00 00 00     call        00000A3D
  00000A3D: 8B E5              mov         esp,ebp
  00000A3F: 5D                 pop         ebp
  00000A40: C2 04 00           ret         4
  00000A43: 90                 nop
$LN11:
  00000A44: 01 00              add         dword ptr [eax],eax
  00000A46: 00 00              add         byte ptr [eax],al
  00000A48: 00 00              add         byte ptr [eax],al
  00000A4A: 00 00              add         byte ptr [eax],al
$LN10:
  00000A4C: EC                 in          al,dx
  00000A4D: FF
  00000A4E: FF
  00000A4F: FF 04 00           inc         dword ptr [eax+eax]
  00000A52: 00 00              add         byte ptr [eax],al
  00000A54: 00 00              add         byte ptr [eax],al
  00000A56: 00 00              add         byte ptr [eax],al
$LN9:
  00000A58: 75 69              jne         00000AC3
  00000A5A: 54                 push        esp
  00000A5B: 68 72 65 61 64     push        64616572h
  00000A60: 49                 dec         ecx
  00000A61: 44                 inc         esp
  00000A62: 00 CC              add         ah,cl
  00000A64: CC                 int         3
  00000A65: CC                 int         3
  00000A66: CC                 int         3
  00000A67: CC                 int         3
  00000A68: CC                 int         3
  00000A69: CC                 int         3
  00000A6A: CC                 int         3
  00000A6B: CC                 int         3
  00000A6C: CC                 int         3
  00000A6D: CC                 int         3
  00000A6E: CC                 int         3
  00000A6F: CC                 int         3
?RunConnectThread@FileDownloader@@CGIPAX@Z (private: static unsigned int __stdcall FileDownloader::RunConnectThread(void *)):
  00000A70: 55                 push        ebp
  00000A71: 8B EC              mov         ebp,esp
  00000A73: 81 EC 0C 04 00 00  sub         esp,40Ch
  00000A79: 57                 push        edi
  00000A7A: 8D BD F4 FB FF FF  lea         edi,[ebp-40Ch]
  00000A80: B9 03 01 00 00     mov         ecx,103h
  00000A85: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000A8A: F3 AB              rep stos    dword ptr [edi]
  00000A8C: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000A8F: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000A92: 8D 8D F4 FB FF FF  lea         ecx,[ebp-40Ch]
  00000A98: 51                 push        ecx
  00000A99: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000A9C: E8 00 00 00 00     call        00000AA1
  00000AA1: 8D 8D F4 FB FF FF  lea         ecx,[ebp-40Ch]
  00000AA7: E8 00 00 00 00     call        00000AAC
  00000AAC: 33 C0              xor         eax,eax
  00000AAE: 5F                 pop         edi
  00000AAF: 81 C4 0C 04 00 00  add         esp,40Ch
  00000AB5: 3B EC              cmp         ebp,esp
  00000AB7: E8 00 00 00 00     call        00000ABC
  00000ABC: 8B E5              mov         esp,ebp
  00000ABE: 5D                 pop         ebp
  00000ABF: C2 04 00           ret         4
  00000AC2: CC                 int         3
  00000AC3: CC                 int         3
  00000AC4: CC                 int         3
  00000AC5: CC                 int         3
  00000AC6: CC                 int         3
  00000AC7: CC                 int         3
  00000AC8: CC                 int         3
  00000AC9: CC                 int         3
  00000ACA: CC                 int         3
  00000ACB: CC                 int         3
  00000ACC: CC                 int         3
  00000ACD: CC                 int         3
  00000ACE: CC                 int         3
  00000ACF: CC                 int         3
?Connection@FileDownloader@@AAE?AVWZResult@@XZ (private: class WZResult __thiscall FileDownloader::Connection(void)):
  00000AD0: 55                 push        ebp
  00000AD1: 8B EC              mov         ebp,esp
  00000AD3: 6A FF              push        0FFh
  00000AD5: 68 00 00 00 00     push        offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  00000ADA: 64 A1 00 00 00 00  mov         eax,fs:[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000AE0: 50                 push        eax
  00000AE1: 81 EC 18 04 00 00  sub         esp,418h
  00000AE7: 56                 push        esi
  00000AE8: 57                 push        edi
  00000AE9: 51                 push        ecx
  00000AEA: 8D BD DC FB FF FF  lea         edi,[ebp-424h]
  00000AF0: B9 06 01 00 00     mov         ecx,106h
  00000AF5: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000AFA: F3 AB              rep stos    dword ptr [edi]
  00000AFC: 59                 pop         ecx
  00000AFD: A1 00 00 00 00     mov         eax,[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000B02: 33 C5              xor         eax,ebp
  00000B04: 50                 push        eax
  00000B05: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000B08: 64 A3 00 00 00 00  mov         fs:[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z],eax
  00000B0E: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  00000B11: C7 85 E4 FB FF FF  mov         dword ptr [ebp-41Ch],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00 00 00 00
  00000B1B: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000B1E: 05 20 04 00 00     add         eax,420h
  00000B23: 8B F4              mov         esi,esp
  00000B25: 50                 push        eax
  00000B26: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000B29: 81 C1 1C 04 00 00  add         ecx,41Ch
  00000B2F: 51                 push        ecx
  00000B30: 8D 95 E8 FB FF FF  lea         edx,[ebp-418h]
  00000B36: 52                 push        edx
  00000B37: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00000B3A: 8B 88 18 04 00 00  mov         ecx,dword ptr [eax+418h]
  00000B40: 8B 55 F0           mov         edx,dword ptr [ebp-10h]
  00000B43: 8B 82 18 04 00 00  mov         eax,dword ptr [edx+418h]
  00000B49: 8B 11              mov         edx,dword ptr [ecx]
  00000B4B: 8B C8              mov         ecx,eax
  00000B4D: 8B 42 04           mov         eax,dword ptr [edx+4]
  00000B50: FF D0              call        eax
  00000B52: 3B F4              cmp         esi,esp
  00000B54: E8 00 00 00 00     call        00000B59
  00000B59: 89 85 E0 FB FF FF  mov         dword ptr [ebp-420h],eax
  00000B5F: 8B 8D E0 FB FF FF  mov         ecx,dword ptr [ebp-420h]
  00000B65: 89 8D DC FB FF FF  mov         dword ptr [ebp-424h],ecx
  00000B6B: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00
  00000B72: 8B 95 DC FB FF FF  mov         edx,dword ptr [ebp-424h]
  00000B78: 52                 push        edx
  00000B79: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000B7C: 83 C1 04           add         ecx,4
  00000B7F: E8 00 00 00 00     call        00000B84
  00000B84: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000B8B: 8D 8D E8 FB FF FF  lea         ecx,[ebp-418h]
  00000B91: E8 00 00 00 00     call        00000B96
  00000B96: 8B 75 F0           mov         esi,dword ptr [ebp-10h]
  00000B99: 83 C6 04           add         esi,4
  00000B9C: B9 02 01 00 00     mov         ecx,102h
  00000BA1: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  00000BA4: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  00000BA6: 8B 85 E4 FB FF FF  mov         eax,dword ptr [ebp-41Ch]
  00000BAC: 83 C8 01           or          eax,1
  00000BAF: 89 85 E4 FB FF FF  mov         dword ptr [ebp-41Ch],eax
  00000BB5: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000BB8: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  00000BBB: 64 89 0D 00 00 00  mov         dword ptr fs:[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z],ecx
            00
  00000BC2: 59                 pop         ecx
  00000BC3: 5F                 pop         edi
  00000BC4: 5E                 pop         esi
  00000BC5: 81 C4 24 04 00 00  add         esp,424h
  00000BCB: 3B EC              cmp         ebp,esp
  00000BCD: E8 00 00 00 00     call        00000BD2
  00000BD2: 8B E5              mov         esp,ebp
  00000BD4: 5D                 pop         ebp
  00000BD5: C2 04 00           ret         4
  00000BD8: CC                 int         3
  00000BD9: CC                 int         3
  00000BDA: CC                 int         3
  00000BDB: CC                 int         3
  00000BDC: CC                 int         3
  00000BDD: CC                 int         3
  00000BDE: CC                 int         3
  00000BDF: CC                 int         3
?CreateLocalFile@FileDownloader@@AAE?AVWZResult@@XZ (private: class WZResult __thiscall FileDownloader::CreateLocalFile(void)):
  00000BE0: 55                 push        ebp
  00000BE1: 8B EC              mov         ebp,esp
  00000BE3: 83 EC 14           sub         esp,14h
  00000BE6: 56                 push        esi
  00000BE7: 57                 push        edi
  00000BE8: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000BED: 89 45 EC           mov         dword ptr [ebp-14h],eax
  00000BF0: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000BF3: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000BF6: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000BF9: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000BFC: 89 4D FC           mov         dword ptr [ebp-4],ecx
  00000BFF: C7 45 EC 00 00 00  mov         dword ptr [ebp-14h],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00
  00000C06: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000C09: 8B 88 14 04 00 00  mov         ecx,dword ptr [eax+414h]
  00000C0F: E8 00 00 00 00     call        00000C14
  00000C14: 8B F4              mov         esi,esp
  00000C16: 50                 push        eax
  00000C17: FF 15 00 00 00 00  call        dword ptr [??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000C1D: 3B F4              cmp         esi,esp
  00000C1F: E8 00 00 00 00     call        00000C24
  00000C24: 33 C9              xor         ecx,ecx
  00000C26: 83 F8 FF           cmp         eax,0FFh
  00000C29: 0F 95 C1           setne       cl
  00000C2C: 89 4D F8           mov         dword ptr [ebp-8],ecx
  00000C2F: 83 7D F8 00        cmp         dword ptr [ebp-8],0
  00000C33: 74 5D              je          00000C92
  00000C35: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000C38: 8B 8A 10 04 00 00  mov         ecx,dword ptr [edx+410h]
  00000C3E: E8 00 00 00 00     call        00000C43
  00000C43: 85 C0              test        eax,eax
  00000C45: 75 4B              jne         00000C92
  00000C47: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000C4A: 8B 88 14 04 00 00  mov         ecx,dword ptr [eax+414h]
  00000C50: E8 00 00 00 00     call        00000C55
  00000C55: 50                 push        eax
  00000C56: 68 00 00 00 00     push        offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  00000C5B: 6A 00              push        0
  00000C5D: 68 05 00 00 20     push        20000005h
  00000C62: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000C65: 83 C1 04           add         ecx,4
  00000C68: 51                 push        ecx
  00000C69: E8 00 00 00 00     call        00000C6E
  00000C6E: 83 C4 14           add         esp,14h
  00000C71: 8B 75 FC           mov         esi,dword ptr [ebp-4]
  00000C74: 83 C6 04           add         esi,4
  00000C77: B9 02 01 00 00     mov         ecx,102h
  00000C7C: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  00000C7F: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  00000C81: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  00000C84: 83 CA 01           or          edx,1
  00000C87: 89 55 EC           mov         dword ptr [ebp-14h],edx
  00000C8A: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000C8D: E9 13 01 00 00     jmp         00000DA5
  00000C92: 6A 01              push        1
  00000C94: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000C97: 8B 88 14 04 00 00  mov         ecx,dword ptr [eax+414h]
  00000C9D: E8 00 00 00 00     call        00000CA2
  00000CA2: 50                 push        eax
  00000CA3: E8 00 00 00 00     call        00000CA8
  00000CA8: 83 C4 08           add         esp,8
  00000CAB: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000CAE: 8B 89 14 04 00 00  mov         ecx,dword ptr [ecx+414h]
  00000CB4: E8 00 00 00 00     call        00000CB9
  00000CB9: 8B F4              mov         esi,esp
  00000CBB: 50                 push        eax
  00000CBC: FF 15 00 00 00 00  call        dword ptr [??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000CC2: 3B F4              cmp         esi,esp
  00000CC4: E8 00 00 00 00     call        00000CC9
  00000CC9: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000CCC: 8B 55 F4           mov         edx,dword ptr [ebp-0Ch]
  00000CCF: 83 E2 01           and         edx,1
  00000CD2: 74 25              je          00000CF9
  00000CD4: 8B 45 F4           mov         eax,dword ptr [ebp-0Ch]
  00000CD7: 83 E0 FE           and         eax,0FEh
  00000CDA: 8B F4              mov         esi,esp
  00000CDC: 50                 push        eax
  00000CDD: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000CE0: 8B 89 14 04 00 00  mov         ecx,dword ptr [ecx+414h]
  00000CE6: E8 00 00 00 00     call        00000CEB
  00000CEB: 50                 push        eax
  00000CEC: FF 15 00 00 00 00  call        dword ptr [??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000CF2: 3B F4              cmp         esi,esp
  00000CF4: E8 00 00 00 00     call        00000CF9
  00000CF9: 8B F4              mov         esi,esp
  00000CFB: 6A 00              push        0
  00000CFD: 68 80 00 00 00     push        80h
  00000D02: 6A 02              push        2
  00000D04: 6A 00              push        0
  00000D06: 6A 00              push        0
  00000D08: 68 00 00 00 40     push        40000000h
  00000D0D: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000D10: 8B 8A 14 04 00 00  mov         ecx,dword ptr [edx+414h]
  00000D16: E8 00 00 00 00     call        00000D1B
  00000D1B: 50                 push        eax
  00000D1C: FF 15 00 00 00 00  call        dword ptr [??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000D22: 3B F4              cmp         esi,esp
  00000D24: E8 00 00 00 00     call        00000D29
  00000D29: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000D2C: 89 81 28 04 00 00  mov         dword ptr [ecx+428h],eax
  00000D32: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000D35: 83 BA 28 04 00 00  cmp         dword ptr [edx+428h],0FFh
            FF
  00000D3C: 75 40              jne         00000D7E
  00000D3E: 8B F4              mov         esi,esp
  00000D40: FF 15 00 00 00 00  call        dword ptr [??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000D46: 3B F4              cmp         esi,esp
  00000D48: E8 00 00 00 00     call        00000D4D
  00000D4D: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000D50: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000D53: 8B 88 14 04 00 00  mov         ecx,dword ptr [eax+414h]
  00000D59: E8 00 00 00 00     call        00000D5E
  00000D5E: 50                 push        eax
  00000D5F: 68 00 00 00 00     push        offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  00000D64: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000D67: 51                 push        ecx
  00000D68: 68 06 00 00 20     push        20000006h
  00000D6D: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  00000D70: 83 C2 04           add         edx,4
  00000D73: 52                 push        edx
  00000D74: E8 00 00 00 00     call        00000D79
  00000D79: 83 C4 14           add         esp,14h
  00000D7C: EB 0B              jmp         00000D89
  00000D7E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000D81: 83 C1 04           add         ecx,4
  00000D84: E8 00 00 00 00     call        00000D89
  00000D89: 8B 75 FC           mov         esi,dword ptr [ebp-4]
  00000D8C: 83 C6 04           add         esi,4
  00000D8F: B9 02 01 00 00     mov         ecx,102h
  00000D94: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  00000D97: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  00000D99: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000D9C: 83 C8 01           or          eax,1
  00000D9F: 89 45 EC           mov         dword ptr [ebp-14h],eax
  00000DA2: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000DA5: 5F                 pop         edi
  00000DA6: 5E                 pop         esi
  00000DA7: 83 C4 14           add         esp,14h
  00000DAA: 3B EC              cmp         ebp,esp
  00000DAC: E8 00 00 00 00     call        00000DB1
  00000DB1: 8B E5              mov         esp,ebp
  00000DB3: 5D                 pop         ebp
  00000DB4: C2 04 00           ret         4
  00000DB7: CC                 int         3
  00000DB8: CC                 int         3
  00000DB9: CC                 int         3
  00000DBA: CC                 int         3
  00000DBB: CC                 int         3
  00000DBC: CC                 int         3
  00000DBD: CC                 int         3
  00000DBE: CC                 int         3
  00000DBF: CC                 int         3
?TransferRemoteFile@FileDownloader@@AAE?AVWZResult@@XZ (private: class WZResult __thiscall FileDownloader::TransferRemoteFile(void)):
  00000DC0: 55                 push        ebp
  00000DC1: 8B EC              mov         ebp,esp
  00000DC3: 6A FF              push        0FFh
  00000DC5: 68 00 00 00 00     push        offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  00000DCA: 64 A1 00 00 00 00  mov         eax,fs:[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000DD0: 50                 push        eax
  00000DD1: 81 EC 5C 08 00 00  sub         esp,85Ch
  00000DD7: 56                 push        esi
  00000DD8: 57                 push        edi
  00000DD9: 51                 push        ecx
  00000DDA: 8D BD 98 F7 FF FF  lea         edi,[ebp-868h]
  00000DE0: B9 17 02 00 00     mov         ecx,217h
  00000DE5: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  00000DEA: F3 AB              rep stos    dword ptr [edi]
  00000DEC: 59                 pop         ecx
  00000DED: A1 00 00 00 00     mov         eax,[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00000DF2: 33 C5              xor         eax,ebp
  00000DF4: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000DF7: 50                 push        eax
  00000DF8: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000DFB: 64 A3 00 00 00 00  mov         fs:[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z],eax
  00000E01: 89 4D EC           mov         dword ptr [ebp-14h],ecx
  00000E04: C7 85 B8 F7 FF FF  mov         dword ptr [ebp-848h],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00 00 00 00
  00000E0E: C7 85 C0 F7 FF FF  mov         dword ptr [ebp-840h],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00 00 00 00
  00000E18: C7 45 E4 00 00 00  mov         dword ptr [ebp-1Ch],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00
  00000E1F: C7 45 D8 00 00 00  mov         dword ptr [ebp-28h],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00
  00000E26: C7 45 DC 00 00 00  mov         dword ptr [ebp-24h],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00
  00000E2D: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000E30: 8B 88 10 04 00 00  mov         ecx,dword ptr [eax+410h]
  00000E36: E8 00 00 00 00     call        00000E3B
  00000E3B: 83 C0 24           add         eax,24h
  00000E3E: 89 85 B0 F7 FF FF  mov         dword ptr [ebp-850h],eax
  00000E44: 8B 85 B0 F7 FF FF  mov         eax,dword ptr [ebp-850h]
  00000E4A: E8 00 00 00 00     call        00000E4F
  00000E4F: 89 A5 AC F7 FF FF  mov         dword ptr [ebp-854h],esp
  00000E55: 8D 8D B8 F7 FF FF  lea         ecx,[ebp-848h]
  00000E5B: 51                 push        ecx
  00000E5C: 8B 95 B0 F7 FF FF  mov         edx,dword ptr [ebp-850h]
  00000E62: 8B 8D AC F7 FF FF  mov         ecx,dword ptr [ebp-854h]
  00000E68: E8 00 00 00 00     call        00000E6D
  00000E6D: 83 85 AC F7 FF FF  add         dword ptr [ebp-854h],20h
            20
  00000E74: 8B 95 AC F7 FF FF  mov         edx,dword ptr [ebp-854h]
  00000E7A: 89 55 D4           mov         dword ptr [ebp-2Ch],edx
  00000E7D: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000E80: 8B 88 34 04 00 00  mov         ecx,dword ptr [eax+434h]
  00000E86: 51                 push        ecx
  00000E87: 8B 90 30 04 00 00  mov         edx,dword ptr [eax+430h]
  00000E8D: 52                 push        edx
  00000E8E: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000E91: E8 00 00 00 00     call        00000E96
  00000E96: C7 45 E4 00 00 00  mov         dword ptr [ebp-1Ch],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00
  00000E9D: 8B F4              mov         esi,esp
  00000E9F: 8D 45 E4           lea         eax,[ebp-1Ch]
  00000EA2: 50                 push        eax
  00000EA3: 8B 4D D4           mov         ecx,dword ptr [ebp-2Ch]
  00000EA6: 51                 push        ecx
  00000EA7: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  00000EAA: 81 C2 24 04 00 00  add         edx,424h
  00000EB0: 52                 push        edx
  00000EB1: 8D 85 CC FB FF FF  lea         eax,[ebp-434h]
  00000EB7: 50                 push        eax
  00000EB8: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000EBB: 8B 91 18 04 00 00  mov         edx,dword ptr [ecx+418h]
  00000EC1: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000EC4: 8B 88 18 04 00 00  mov         ecx,dword ptr [eax+418h]
  00000ECA: 8B 12              mov         edx,dword ptr [edx]
  00000ECC: 8B 42 0C           mov         eax,dword ptr [edx+0Ch]
  00000ECF: FF D0              call        eax
  00000ED1: 3B F4              cmp         esi,esp
  00000ED3: E8 00 00 00 00     call        00000ED8
  00000ED8: 89 85 A8 F7 FF FF  mov         dword ptr [ebp-858h],eax
  00000EDE: 8B 8D A8 F7 FF FF  mov         ecx,dword ptr [ebp-858h]
  00000EE4: 89 8D A4 F7 FF FF  mov         dword ptr [ebp-85Ch],ecx
  00000EEA: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00
  00000EF1: 8B 95 A4 F7 FF FF  mov         edx,dword ptr [ebp-85Ch]
  00000EF7: 52                 push        edx
  00000EF8: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000EFB: 83 C1 04           add         ecx,4
  00000EFE: E8 00 00 00 00     call        00000F03
  00000F03: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000F0A: 8D 8D CC FB FF FF  lea         ecx,[ebp-434h]
  00000F10: E8 00 00 00 00     call        00000F15
  00000F15: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000F18: E8 00 00 00 00     call        00000F1D
  00000F1D: 85 C0              test        eax,eax
  00000F1F: 75 44              jne         00000F65
  00000F21: 8B 75 EC           mov         esi,dword ptr [ebp-14h]
  00000F24: 83 C6 04           add         esi,4
  00000F27: 81 EC 08 04 00 00  sub         esp,408h
  00000F2D: B9 02 01 00 00     mov         ecx,102h
  00000F32: 8B FC              mov         edi,esp
  00000F34: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  00000F36: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000F39: E8 00 00 00 00     call        00000F3E
  00000F3E: 8B 75 EC           mov         esi,dword ptr [ebp-14h]
  00000F41: 83 C6 04           add         esi,4
  00000F44: B9 02 01 00 00     mov         ecx,102h
  00000F49: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  00000F4C: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  00000F4E: 8B 85 C0 F7 FF FF  mov         eax,dword ptr [ebp-840h]
  00000F54: 83 C8 01           or          eax,1
  00000F57: 89 85 C0 F7 FF FF  mov         dword ptr [ebp-840h],eax
  00000F5D: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000F60: E9 D6 01 00 00     jmp         0000113B
  00000F65: 83 7D E4 00        cmp         dword ptr [ebp-1Ch],0
  00000F69: 0F 86 C7 00 00 00  jbe         00001036
  00000F6F: 8B 4D E4           mov         ecx,dword ptr [ebp-1Ch]
  00000F72: 51                 push        ecx
  00000F73: 8B 55 D4           mov         edx,dword ptr [ebp-2Ch]
  00000F76: 52                 push        edx
  00000F77: 8D 85 C4 F7 FF FF  lea         eax,[ebp-83Ch]
  00000F7D: 50                 push        eax
  00000F7E: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000F81: E8 00 00 00 00     call        00000F86
  00000F86: 89 85 A0 F7 FF FF  mov         dword ptr [ebp-860h],eax
  00000F8C: 8B 8D A0 F7 FF FF  mov         ecx,dword ptr [ebp-860h]
  00000F92: 89 8D 9C F7 FF FF  mov         dword ptr [ebp-864h],ecx
  00000F98: C7 45 FC 01 00 00  mov         dword ptr [ebp-4],1
            00
  00000F9F: 8B 95 9C F7 FF FF  mov         edx,dword ptr [ebp-864h]
  00000FA5: 52                 push        edx
  00000FA6: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000FA9: 83 C1 04           add         ecx,4
  00000FAC: E8 00 00 00 00     call        00000FB1
  00000FB1: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  00000FB8: 8D 8D C4 F7 FF FF  lea         ecx,[ebp-83Ch]
  00000FBE: E8 00 00 00 00     call        00000FC3
  00000FC3: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000FC6: E8 00 00 00 00     call        00000FCB
  00000FCB: 85 C0              test        eax,eax
  00000FCD: 75 44              jne         00001013
  00000FCF: 8B 75 EC           mov         esi,dword ptr [ebp-14h]
  00000FD2: 83 C6 04           add         esi,4
  00000FD5: 81 EC 08 04 00 00  sub         esp,408h
  00000FDB: B9 02 01 00 00     mov         ecx,102h
  00000FE0: 8B FC              mov         edi,esp
  00000FE2: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  00000FE4: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00000FE7: E8 00 00 00 00     call        00000FEC
  00000FEC: 8B 75 EC           mov         esi,dword ptr [ebp-14h]
  00000FEF: 83 C6 04           add         esi,4
  00000FF2: B9 02 01 00 00     mov         ecx,102h
  00000FF7: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  00000FFA: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  00000FFC: 8B 85 C0 F7 FF FF  mov         eax,dword ptr [ebp-840h]
  00001002: 83 C8 01           or          eax,1
  00001005: 89 85 C0 F7 FF FF  mov         dword ptr [ebp-840h],eax
  0000100B: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000100E: E9 28 01 00 00     jmp         0000113B
  00001013: 8B 4D E4           mov         ecx,dword ptr [ebp-1Ch]
  00001016: 33 D2              xor         edx,edx
  00001018: 03 4D D8           add         ecx,dword ptr [ebp-28h]
  0000101B: 8B 45 DC           mov         eax,dword ptr [ebp-24h]
  0000101E: 13 C2              adc         eax,edx
  00001020: 89 4D D8           mov         dword ptr [ebp-28h],ecx
  00001023: 89 45 DC           mov         dword ptr [ebp-24h],eax
  00001026: 8B 4D DC           mov         ecx,dword ptr [ebp-24h]
  00001029: 51                 push        ecx
  0000102A: 8B 55 D8           mov         edx,dword ptr [ebp-28h]
  0000102D: 52                 push        edx
  0000102E: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00001031: E8 00 00 00 00     call        00001036
  00001036: 83 7D E4 00        cmp         dword ptr [ebp-1Ch],0
  0000103A: 74 0C              je          00001048
  0000103C: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  0000103F: 83 38 00           cmp         dword ptr [eax],0
  00001042: 0F 84 4E FE FF FF  je          00000E96
  00001048: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  0000104B: E8 00 00 00 00     call        00001050
  00001050: 85 C0              test        eax,eax
  00001052: 75 44              jne         00001098
  00001054: 8B 75 EC           mov         esi,dword ptr [ebp-14h]
  00001057: 83 C6 04           add         esi,4
  0000105A: 81 EC 08 04 00 00  sub         esp,408h
  00001060: B9 02 01 00 00     mov         ecx,102h
  00001065: 8B FC              mov         edi,esp
  00001067: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  00001069: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  0000106C: E8 00 00 00 00     call        00001071
  00001071: 8B 75 EC           mov         esi,dword ptr [ebp-14h]
  00001074: 83 C6 04           add         esi,4
  00001077: B9 02 01 00 00     mov         ecx,102h
  0000107C: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  0000107F: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  00001081: 8B 8D C0 F7 FF FF  mov         ecx,dword ptr [ebp-840h]
  00001087: 83 C9 01           or          ecx,1
  0000108A: 89 8D C0 F7 FF FF  mov         dword ptr [ebp-840h],ecx
  00001090: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00001093: E9 A3 00 00 00     jmp         0000113B
  00001098: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  0000109B: 89 95 98 F7 FF FF  mov         dword ptr [ebp-868h],edx
  000010A1: 8B 85 98 F7 FF FF  mov         eax,dword ptr [ebp-868h]
  000010A7: 8B 4D DC           mov         ecx,dword ptr [ebp-24h]
  000010AA: 3B 88 34 04 00 00  cmp         ecx,dword ptr [eax+434h]
  000010B0: 77 3F              ja          000010F1
  000010B2: 72 11              jb          000010C5
  000010B4: 8B 95 98 F7 FF FF  mov         edx,dword ptr [ebp-868h]
  000010BA: 8B 45 D8           mov         eax,dword ptr [ebp-28h]
  000010BD: 3B 82 30 04 00 00  cmp         eax,dword ptr [edx+430h]
  000010C3: 73 2C              jae         000010F1
  000010C5: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000010C8: 8B 89 14 04 00 00  mov         ecx,dword ptr [ecx+414h]
  000010CE: E8 00 00 00 00     call        000010D3
  000010D3: 50                 push        eax
  000010D4: 68 00 00 00 00     push        offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  000010D9: 6A 00              push        0
  000010DB: 68 07 00 00 20     push        20000007h
  000010E0: 8B 55 EC           mov         edx,dword ptr [ebp-14h]
  000010E3: 83 C2 04           add         edx,4
  000010E6: 52                 push        edx
  000010E7: E8 00 00 00 00     call        000010EC
  000010EC: 83 C4 14           add         esp,14h
  000010EF: EB 0B              jmp         000010FC
  000010F1: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  000010F4: 83 C1 04           add         ecx,4
  000010F7: E8 00 00 00 00     call        000010FC
  000010FC: 8B 75 EC           mov         esi,dword ptr [ebp-14h]
  000010FF: 83 C6 04           add         esi,4
  00001102: 81 EC 08 04 00 00  sub         esp,408h
  00001108: B9 02 01 00 00     mov         ecx,102h
  0000110D: 8B FC              mov         edi,esp
  0000110F: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  00001111: 8B 4D EC           mov         ecx,dword ptr [ebp-14h]
  00001114: E8 00 00 00 00     call        00001119
  00001119: 8B 75 EC           mov         esi,dword ptr [ebp-14h]
  0000111C: 83 C6 04           add         esi,4
  0000111F: B9 02 01 00 00     mov         ecx,102h
  00001124: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  00001127: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  00001129: 8B 85 C0 F7 FF FF  mov         eax,dword ptr [ebp-840h]
  0000112F: 83 C8 01           or          eax,1
  00001132: 89 85 C0 F7 FF FF  mov         dword ptr [ebp-840h],eax
  00001138: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000113B: 52                 push        edx
  0000113C: 8B CD              mov         ecx,ebp
  0000113E: 50                 push        eax
  0000113F: 8D 15 00 00 00 00  lea         edx,[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00001145: FF B5 B8 F7 FF FF  push        dword ptr [ebp-848h]
  0000114B: E8 00 00 00 00     call        00001150
  00001150: 58                 pop         eax
  00001151: 5A                 pop         edx
  00001152: 8D A5 8C F7 FF FF  lea         esp,[ebp-874h]
  00001158: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  0000115B: 64 89 0D 00 00 00  mov         dword ptr fs:[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z],ecx
            00
  00001162: 59                 pop         ecx
  00001163: 5F                 pop         edi
  00001164: 5E                 pop         esi
  00001165: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00001168: 33 CD              xor         ecx,ebp
  0000116A: E8 00 00 00 00     call        0000116F
  0000116F: 8B E5              mov         esp,ebp
  00001171: 5D                 pop         ebp
  00001172: C2 04 00           ret         4
  00001175: 8D 49 00           lea         ecx,[ecx]
$LN22:
  00001178: 02 00              add         al,byte ptr [eax]
  0000117A: 00 00              add         byte ptr [eax],al
  0000117C: 00 00              add         byte ptr [eax],al
  0000117E: 00 00              add         byte ptr [eax],al
$LN21:
  00001180: E4 FF              in          al,0FFh
  00001182: FF
  00001183: FF 04 00           inc         dword ptr [eax+eax]
  00001186: 00 00              add         byte ptr [eax],al
  00001188: 00 00              add         byte ptr [eax],al
  0000118A: 00 00              add         byte ptr [eax],al
  0000118C: B8 F7 FF FF 04     mov         eax,4FFFFF7h
  00001191: 00 00              add         byte ptr [eax],al
  00001193: 00 00              add         byte ptr [eax],al
  00001195: 00 00              add         byte ptr [eax],al
  00001197: 00 5F 24           add         byte ptr [edi+24h],bl
  0000119A: 41                 inc         ecx
  0000119B: 6C                 ins         byte ptr [edi],dx
  0000119C: 6C                 ins         byte ptr [edi],dx
  0000119D: 6F                 outs        dx,dword ptr [esi]
  0000119E: 63 61 50           arpl        word ptr [ecx+50h],sp
  000011A1: 61                 popad
  000011A2: 64 24 00           and         al,0
$LN18:
  000011A5: 64 77 42           ja          000011EA
  000011A8: 79 74              jns         0000121E
  000011AA: 65 73 52           jae         000011FF
  000011AD: 65 61              popad
  000011AF: 64 00 CC           add         ah,cl
  000011B2: CC                 int         3
  000011B3: CC                 int         3
  000011B4: CC                 int         3
  000011B5: CC                 int         3
  000011B6: CC                 int         3
  000011B7: CC                 int         3
  000011B8: CC                 int         3
  000011B9: CC                 int         3
  000011BA: CC                 int         3
  000011BB: CC                 int         3
  000011BC: CC                 int         3
  000011BD: CC                 int         3
  000011BE: CC                 int         3
  000011BF: CC                 int         3
?WriteLocalFile@FileDownloader@@AAE?AVWZResult@@PAEK@Z (private: class WZResult __thiscall FileDownloader::WriteLocalFile(unsigned char *,unsigned long)):
  000011C0: 55                 push        ebp
  000011C1: 8B EC              mov         ebp,esp
  000011C3: 83 EC 1C           sub         esp,1Ch
  000011C6: 56                 push        esi
  000011C7: 57                 push        edi
  000011C8: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  000011CD: 89 45 E4           mov         dword ptr [ebp-1Ch],eax
  000011D0: 89 45 E8           mov         dword ptr [ebp-18h],eax
  000011D3: 89 45 EC           mov         dword ptr [ebp-14h],eax
  000011D6: 89 45 F0           mov         dword ptr [ebp-10h],eax
  000011D9: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  000011DC: 89 45 F8           mov         dword ptr [ebp-8],eax
  000011DF: 89 45 FC           mov         dword ptr [ebp-4],eax
  000011E2: 89 4D FC           mov         dword ptr [ebp-4],ecx
  000011E5: C7 45 E4 00 00 00  mov         dword ptr [ebp-1Ch],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00
  000011EC: C7 45 F4 00 00 00  mov         dword ptr [ebp-0Ch],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00
  000011F3: 8B F4              mov         esi,esp
  000011F5: 6A 00              push        0
  000011F7: 8D 45 F4           lea         eax,[ebp-0Ch]
  000011FA: 50                 push        eax
  000011FB: 8B 4D 10           mov         ecx,dword ptr [ebp+10h]
  000011FE: 51                 push        ecx
  000011FF: 8B 55 0C           mov         edx,dword ptr [ebp+0Ch]
  00001202: 52                 push        edx
  00001203: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00001206: 8B 88 28 04 00 00  mov         ecx,dword ptr [eax+428h]
  0000120C: 51                 push        ecx
  0000120D: FF 15 00 00 00 00  call        dword ptr [??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00001213: 3B F4              cmp         esi,esp
  00001215: E8 00 00 00 00     call        0000121A
  0000121A: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000121D: 83 7D EC 00        cmp         dword ptr [ebp-14h],0
  00001221: 74 08              je          0000122B
  00001223: 8B 55 10           mov         edx,dword ptr [ebp+10h]
  00001226: 3B 55 F4           cmp         edx,dword ptr [ebp-0Ch]
  00001229: 74 40              je          0000126B
  0000122B: 8B F4              mov         esi,esp
  0000122D: FF 15 00 00 00 00  call        dword ptr [??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00001233: 3B F4              cmp         esi,esp
  00001235: E8 00 00 00 00     call        0000123A
  0000123A: 89 45 E8           mov         dword ptr [ebp-18h],eax
  0000123D: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00001240: 8B 88 14 04 00 00  mov         ecx,dword ptr [eax+414h]
  00001246: E8 00 00 00 00     call        0000124B
  0000124B: 50                 push        eax
  0000124C: 68 00 00 00 00     push        offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  00001251: 8B 4D E8           mov         ecx,dword ptr [ebp-18h]
  00001254: 51                 push        ecx
  00001255: 68 08 00 00 20     push        20000008h
  0000125A: 8B 55 FC           mov         edx,dword ptr [ebp-4]
  0000125D: 83 C2 04           add         edx,4
  00001260: 52                 push        edx
  00001261: E8 00 00 00 00     call        00001266
  00001266: 83 C4 14           add         esp,14h
  00001269: EB 0B              jmp         00001276
  0000126B: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000126E: 83 C1 04           add         ecx,4
  00001271: E8 00 00 00 00     call        00001276
  00001276: 8B 75 FC           mov         esi,dword ptr [ebp-4]
  00001279: 83 C6 04           add         esi,4
  0000127C: B9 02 01 00 00     mov         ecx,102h
  00001281: 8B 7D 08           mov         edi,dword ptr [ebp+8]
  00001284: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  00001286: 8B 45 E4           mov         eax,dword ptr [ebp-1Ch]
  00001289: 83 C8 01           or          eax,1
  0000128C: 89 45 E4           mov         dword ptr [ebp-1Ch],eax
  0000128F: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00001292: 52                 push        edx
  00001293: 8B CD              mov         ecx,ebp
  00001295: 50                 push        eax
  00001296: 8D 15 00 00 00 00  lea         edx,[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  0000129C: E8 00 00 00 00     call        000012A1
  000012A1: 58                 pop         eax
  000012A2: 5A                 pop         edx
  000012A3: 5F                 pop         edi
  000012A4: 5E                 pop         esi
  000012A5: 83 C4 1C           add         esp,1Ch
  000012A8: 3B EC              cmp         ebp,esp
  000012AA: E8 00 00 00 00     call        000012AF
  000012AF: 8B E5              mov         esp,ebp
  000012B1: 5D                 pop         ebp
  000012B2: C2 0C 00           ret         0Ch
  000012B5: 8D 49 00           lea         ecx,[ecx]
$LN10:
  000012B8: 01 00              add         dword ptr [eax],eax
  000012BA: 00 00              add         byte ptr [eax],al
  000012BC: 00 00              add         byte ptr [eax],al
  000012BE: 00 00              add         byte ptr [eax],al
$LN9:
  000012C0: F4                 hlt
  000012C1: FF
  000012C2: FF
  000012C3: FF 04 00           inc         dword ptr [eax+eax]
  000012C6: 00 00              add         byte ptr [eax],al
  000012C8: 00 00              add         byte ptr [eax],al
  000012CA: 00 00              add         byte ptr [eax],al
$LN8:
  000012CC: 64 77 57           ja          00001326
  000012CF: 72 69              jb          0000133A
  000012D1: 74 65              je          00001338
  000012D3: 6E                 outs        dx,byte ptr [esi]
  000012D4: 53                 push        ebx
  000012D5: 69 7A 65 00 CC CC  imul        edi,dword ptr [edx+65h],0CCCCCC00h
            CC
  000012DC: CC                 int         3
  000012DD: CC                 int         3
  000012DE: CC                 int         3
  000012DF: CC                 int         3
?SendStartedDownloadFileEvent@FileDownloader@@AAEX_K@Z (private: void __thiscall FileDownloader::SendStartedDownloadFileEvent(unsigned __int64)):
  000012E0: 55                 push        ebp
  000012E1: 8B EC              mov         ebp,esp
  000012E3: 51                 push        ecx
  000012E4: 56                 push        esi
  000012E5: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  000012EC: 89 4D FC           mov         dword ptr [ebp-4],ecx
  000012EF: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  000012F2: 83 B8 0C 04 00 00  cmp         dword ptr [eax+40Ch],0
            00
  000012F9: 74 39              je          00001334
  000012FB: 8B F4              mov         esi,esp
  000012FD: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00001300: 51                 push        ecx
  00001301: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00001304: 52                 push        edx
  00001305: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00001308: 8B 88 14 04 00 00  mov         ecx,dword ptr [eax+414h]
  0000130E: E8 00 00 00 00     call        00001313
  00001313: 50                 push        eax
  00001314: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00001317: 8B 91 0C 04 00 00  mov         edx,dword ptr [ecx+40Ch]
  0000131D: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00001320: 8B 88 0C 04 00 00  mov         ecx,dword ptr [eax+40Ch]
  00001326: 8B 12              mov         edx,dword ptr [edx]
  00001328: 8B 42 04           mov         eax,dword ptr [edx+4]
  0000132B: FF D0              call        eax
  0000132D: 3B F4              cmp         esi,esp
  0000132F: E8 00 00 00 00     call        00001334
  00001334: 5E                 pop         esi
  00001335: 83 C4 04           add         esp,4
  00001338: 3B EC              cmp         ebp,esp
  0000133A: E8 00 00 00 00     call        0000133F
  0000133F: 8B E5              mov         esp,ebp
  00001341: 5D                 pop         ebp
  00001342: C2 08 00           ret         8
  00001345: CC                 int         3
  00001346: CC                 int         3
  00001347: CC                 int         3
  00001348: CC                 int         3
  00001349: CC                 int         3
  0000134A: CC                 int         3
  0000134B: CC                 int         3
  0000134C: CC                 int         3
  0000134D: CC                 int         3
  0000134E: CC                 int         3
  0000134F: CC                 int         3
?SendCompletedDownloadFileEvent@FileDownloader@@AAEXVWZResult@@@Z (private: void __thiscall FileDownloader::SendCompletedDownloadFileEvent(class WZResult)):
  00001350: 55                 push        ebp
  00001351: 8B EC              mov         ebp,esp
  00001353: 6A FF              push        0FFh
  00001355: 68 00 00 00 00     push        offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
  0000135A: 64 A1 00 00 00 00  mov         eax,fs:[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  00001360: 50                 push        eax
  00001361: 83 EC 10           sub         esp,10h
  00001364: 53                 push        ebx
  00001365: 56                 push        esi
  00001366: 57                 push        edi
  00001367: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000136C: 89 45 E4           mov         dword ptr [ebp-1Ch],eax
  0000136F: 89 45 E8           mov         dword ptr [ebp-18h],eax
  00001372: 89 45 EC           mov         dword ptr [ebp-14h],eax
  00001375: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00001378: A1 00 00 00 00     mov         eax,[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  0000137D: 33 C5              xor         eax,ebp
  0000137F: 50                 push        eax
  00001380: 8D 45 F4           lea         eax,[ebp-0Ch]
  00001383: 64 A3 00 00 00 00  mov         fs:[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z],eax
  00001389: 89 4D F0           mov         dword ptr [ebp-10h],ecx
  0000138C: C7 45 FC 00 00 00  mov         dword ptr [ebp-4],offset ??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z
            00
  00001393: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  00001396: 83 B8 0C 04 00 00  cmp         dword ptr [eax+40Ch],0
            00
  0000139D: 74 34              je          000013D3
  0000139F: 8B DC              mov         ebx,esp
  000013A1: 81 EC 08 04 00 00  sub         esp,408h
  000013A7: B9 02 01 00 00     mov         ecx,102h
  000013AC: 8D 75 08           lea         esi,[ebp+8]
  000013AF: 8B FC              mov         edi,esp
  000013B1: F3 A5              rep movs    dword ptr [edi],dword ptr [esi]
  000013B3: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  000013B6: 8B 91 0C 04 00 00  mov         edx,dword ptr [ecx+40Ch]
  000013BC: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  000013BF: 8B 88 0C 04 00 00  mov         ecx,dword ptr [eax+40Ch]
  000013C5: 8B 12              mov         edx,dword ptr [edx]
  000013C7: 8B 42 0C           mov         eax,dword ptr [edx+0Ch]
  000013CA: FF D0              call        eax
  000013CC: 3B DC              cmp         ebx,esp
  000013CE: E8 00 00 00 00     call        000013D3
  000013D3: C7 45 FC FF FF FF  mov         dword ptr [ebp-4],0FFFFFFFFh
            FF
  000013DA: 8D 4D 08           lea         ecx,[ebp+8]
  000013DD: E8 00 00 00 00     call        000013E2
  000013E2: 52                 push        edx
  000013E3: 8B CD              mov         ecx,ebp
  000013E5: 50                 push        eax
  000013E6: 8D 15 00 00 00 00  lea         edx,[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z]
  000013EC: E8 00 00 00 00     call        000013F1
  000013F1: 58                 pop         eax
  000013F2: 5A                 pop         edx
  000013F3: 8B 4D F4           mov         ecx,dword ptr [ebp-0Ch]
  000013F6: 64 89 0D 00 00 00  mov         dword ptr fs:[??0FileDownloader@@QAE@PAVIDownloaderStateEvent@@PAVDownloadServerInfo@@PAVDownloadFileInfo@@@Z],ecx
            00
  000013FD: 59                 pop         ecx
  000013FE: 5F                 pop         edi
  000013FF: 5E                 pop         esi
  00001400: 5B                 pop         ebx
  00001401: 83 C4 1C           add         esp,1Ch
  00001404: 3B EC              cmp         ebp,esp
  00001406: E8 00 00 00 00     call        0000140B
  0000140B: 8B E5              mov         esp,ebp
  0000140D: 5D                 pop         ebp
  0000140E: C2 08 04           ret         408h
  00001411: 8D 49 00           lea         ecx,[ecx]
$LN8:
  00001414: 01 00              add         dword ptr [eax],eax
  00001416: 00 00              add         byte ptr [eax],al
  00001418: 00 00              add         byte ptr [eax],al
  0000141A: 00 00              add         byte ptr [eax],al
$LN7:
  0000141C: E8 FF FF FF 04     call        05001420
  00001421: 00 00              add         byte ptr [eax],al
  00001423: 00 00              add         byte ptr [eax],al
  00001425: 00 00              add         byte ptr [eax],al
  00001427: 00 5F 24           add         byte ptr [edi+24h],bl
  0000142A: 41                 inc         ecx
  0000142B: 72 72              jb          0000149F
  0000142D: 61                 popad
  0000142E: 79 50              jns         00001480
  00001430: 61                 popad
  00001431: 64 00 CC           add         ah,cl
  00001434: CC                 int         3
  00001435: CC                 int         3
  00001436: CC                 int         3
  00001437: CC                 int         3
  00001438: CC                 int         3
  00001439: CC                 int         3
  0000143A: CC                 int         3
  0000143B: CC                 int         3
  0000143C: CC                 int         3
  0000143D: CC                 int         3
  0000143E: CC                 int         3
  0000143F: CC                 int         3
?SendProgressDownloadFileEvent@FileDownloader@@AAEX_K@Z (private: void __thiscall FileDownloader::SendProgressDownloadFileEvent(unsigned __int64)):
  00001440: 55                 push        ebp
  00001441: 8B EC              mov         ebp,esp
  00001443: 51                 push        ecx
  00001444: 56                 push        esi
  00001445: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000144C: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000144F: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00001452: 83 B8 0C 04 00 00  cmp         dword ptr [eax+40Ch],0
            00
  00001459: 74 39              je          00001494
  0000145B: 8B F4              mov         esi,esp
  0000145D: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  00001460: 51                 push        ecx
  00001461: 8B 55 08           mov         edx,dword ptr [ebp+8]
  00001464: 52                 push        edx
  00001465: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00001468: 8B 88 14 04 00 00  mov         ecx,dword ptr [eax+414h]
  0000146E: E8 00 00 00 00     call        00001473
  00001473: 50                 push        eax
  00001474: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00001477: 8B 91 0C 04 00 00  mov         edx,dword ptr [ecx+40Ch]
  0000147D: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00001480: 8B 88 0C 04 00 00  mov         ecx,dword ptr [eax+40Ch]
  00001486: 8B 12              mov         edx,dword ptr [edx]
  00001488: 8B 42 08           mov         eax,dword ptr [edx+8]
  0000148B: FF D0              call        eax
  0000148D: 3B F4              cmp         esi,esp
  0000148F: E8 00 00 00 00     call        00001494
  00001494: 5E                 pop         esi
  00001495: 83 C4 04           add         esp,4
  00001498: 3B EC              cmp         ebp,esp
  0000149A: E8 00 00 00 00     call        0000149F
  0000149F: 8B E5              mov         esp,ebp
  000014A1: 5D                 pop         ebp
  000014A2: C2 08 00           ret         8

__unwindfunclet$??1FileDownloader@@QAE@XZ$0:
  00000000: 8B 4D F0           mov         ecx,dword ptr [ebp-10h]
  00000003: 83 C1 04           add         ecx,4
  00000006: E9 00 00 00 00     jmp         __ehhandler$??1FileDownloader@@QAE@XZ
__ehhandler$??1FileDownloader@@QAE@XZ:
  0000000B: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000000F: 8D 42 0C           lea         eax,[edx+0Ch]
  00000012: 8B 4A F8           mov         ecx,dword ptr [edx-8]
  00000015: 33 C8              xor         ecx,eax
  00000017: E8 00 00 00 00     call        0000001C
  0000001C: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??1FileDownloader@@QAE@XZ$0
  00000021: E9 00 00 00 00     jmp         __unwindfunclet$?DownloadFile@FileDownloader@@QAE?AVWZResult@@XZ$2
__unwindfunclet$?DownloadFile@FileDownloader@@QAE?AVWZResult@@XZ$2:
  00000026: 8D 8D E0 FB FF FF  lea         ecx,[ebp-420h]
  0000002C: E9 00 00 00 00     jmp         __unwindfunclet$?DownloadFile@FileDownloader@@QAE?AVWZResult@@XZ$4
__unwindfunclet$?DownloadFile@FileDownloader@@QAE?AVWZResult@@XZ$4:
  00000031: 8D 8D D8 F7 FF FF  lea         ecx,[ebp-828h]
  00000037: E9 00 00 00 00     jmp         __unwindfunclet$?DownloadFile@FileDownloader@@QAE?AVWZResult@@XZ$5
__unwindfunclet$?DownloadFile@FileDownloader@@QAE?AVWZResult@@XZ$5:
  0000003C: 8D 8D D0 F3 FF FF  lea         ecx,[ebp-0C30h]
  00000042: E9 00 00 00 00     jmp         __unwindfunclet$?DownloadFile@FileDownloader@@QAE?AVWZResult@@XZ$6
__unwindfunclet$?DownloadFile@FileDownloader@@QAE?AVWZResult@@XZ$6:
  00000047: 8D 8D C8 EF FF FF  lea         ecx,[ebp-1038h]
  0000004D: E9 00 00 00 00     jmp         __ehhandler$?DownloadFile@FileDownloader@@QAE?AVWZResult@@XZ
__ehhandler$?DownloadFile@FileDownloader@@QAE?AVWZResult@@XZ:
  00000052: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  00000056: 8D 42 0C           lea         eax,[edx+0Ch]
  00000059: 8B 8A 8C EF FF FF  mov         ecx,dword ptr [edx-1074h]
  0000005F: 33 C8              xor         ecx,eax
  00000061: E8 00 00 00 00     call        00000066
  00000066: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??1FileDownloader@@QAE@XZ$0
  0000006B: E9 00 00 00 00     jmp         __unwindfunclet$?CreateConnecter@FileDownloader@@AAEPAVIConnecter@@XZ$0
__unwindfunclet$?CreateConnecter@FileDownloader@@AAEPAVIConnecter@@XZ$0:
  00000070: 8B 45 E8           mov         eax,dword ptr [ebp-18h]
  00000073: 50                 push        eax
  00000074: E8 00 00 00 00     call        00000079
  00000079: 59                 pop         ecx
  0000007A: C3                 ret
__unwindfunclet$?CreateConnecter@FileDownloader@@AAEPAVIConnecter@@XZ$1:
  0000007B: 8B 45 E0           mov         eax,dword ptr [ebp-20h]
  0000007E: 50                 push        eax
  0000007F: E8 00 00 00 00     call        00000084
  00000084: 59                 pop         ecx
  00000085: C3                 ret
__ehhandler$?CreateConnecter@FileDownloader@@AAEPAVIConnecter@@XZ:
  00000086: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  0000008A: 8D 42 0C           lea         eax,[edx+0Ch]
  0000008D: 8B 4A DC           mov         ecx,dword ptr [edx-24h]
  00000090: 33 C8              xor         ecx,eax
  00000092: E8 00 00 00 00     call        00000097
  00000097: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??1FileDownloader@@QAE@XZ$0
  0000009C: E9 00 00 00 00     jmp         __unwindfunclet$?Connection@FileDownloader@@AAE?AVWZResult@@XZ$0
__unwindfunclet$?Connection@FileDownloader@@AAE?AVWZResult@@XZ$0:
  000000A1: 8D 8D E8 FB FF FF  lea         ecx,[ebp-418h]
  000000A7: E9 00 00 00 00     jmp         __ehhandler$?Connection@FileDownloader@@AAE?AVWZResult@@XZ
__ehhandler$?Connection@FileDownloader@@AAE?AVWZResult@@XZ:
  000000AC: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  000000B0: 8D 42 0C           lea         eax,[edx+0Ch]
  000000B3: 8B 8A DC FB FF FF  mov         ecx,dword ptr [edx-424h]
  000000B9: 33 C8              xor         ecx,eax
  000000BB: E8 00 00 00 00     call        000000C0
  000000C0: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??1FileDownloader@@QAE@XZ$0
  000000C5: E9 00 00 00 00     jmp         __unwindfunclet$?TransferRemoteFile@FileDownloader@@AAE?AVWZResult@@XZ$0
__unwindfunclet$?TransferRemoteFile@FileDownloader@@AAE?AVWZResult@@XZ$0:
  000000CA: 8D 8D CC FB FF FF  lea         ecx,[ebp-434h]
  000000D0: E9 00 00 00 00     jmp         __unwindfunclet$?TransferRemoteFile@FileDownloader@@AAE?AVWZResult@@XZ$2
__unwindfunclet$?TransferRemoteFile@FileDownloader@@AAE?AVWZResult@@XZ$2:
  000000D5: 8D 8D C4 F7 FF FF  lea         ecx,[ebp-83Ch]
  000000DB: E9 00 00 00 00     jmp         __ehhandler$?TransferRemoteFile@FileDownloader@@AAE?AVWZResult@@XZ
__ehhandler$?TransferRemoteFile@FileDownloader@@AAE?AVWZResult@@XZ:
  000000E0: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  000000E4: 8D 42 0C           lea         eax,[edx+0Ch]
  000000E7: 8B 8A 98 F7 FF FF  mov         ecx,dword ptr [edx-868h]
  000000ED: 33 C8              xor         ecx,eax
  000000EF: E8 00 00 00 00     call        000000F4
  000000F4: 8B 4A FC           mov         ecx,dword ptr [edx-4]
  000000F7: 33 C8              xor         ecx,eax
  000000F9: E8 00 00 00 00     call        000000FE
  000000FE: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??1FileDownloader@@QAE@XZ$0
  00000103: E9 00 00 00 00     jmp         __unwindfunclet$?SendCompletedDownloadFileEvent@FileDownloader@@AAEXVWZResult@@@Z$0
__unwindfunclet$?SendCompletedDownloadFileEvent@FileDownloader@@AAEXVWZResult@@@Z$0:
  00000108: 8D 4D 08           lea         ecx,[ebp+8]
  0000010B: E9 00 00 00 00     jmp         __ehhandler$?SendCompletedDownloadFileEvent@FileDownloader@@AAEXVWZResult@@@Z
__ehhandler$?SendCompletedDownloadFileEvent@FileDownloader@@AAEXVWZResult@@@Z:
  00000110: 8B 54 24 08        mov         edx,dword ptr [esp+8]
  00000114: 8D 42 0C           lea         eax,[edx+0Ch]
  00000117: 8B 4A E0           mov         ecx,dword ptr [edx-20h]
  0000011A: 33 C8              xor         ecx,eax
  0000011C: E8 00 00 00 00     call        00000121
  00000121: B8 00 00 00 00     mov         eax,offset __unwindfunclet$??1FileDownloader@@QAE@XZ$0
  00000126: E9 00 00 00 00     jmp         0000012B

??_GIConnecter@@QAEPAXI@Z (public: void * __thiscall IConnecter::`scalar deleting destructor'(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000019: 83 E0 01           and         eax,1
  0000001C: 74 0C              je          0000002A
  0000001E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000021: 51                 push        ecx
  00000022: E8 00 00 00 00     call        00000027
  00000027: 83 C4 04           add         esp,4
  0000002A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002D: 83 C4 04           add         esp,4
  00000030: 3B EC              cmp         ebp,esp
  00000032: E8 00 00 00 00     call        00000037
  00000037: 8B E5              mov         esp,ebp
  00000039: 5D                 pop         ebp
  0000003A: C2 04 00           ret         4

??1IConnecter@@QAE@XZ (public: __thiscall IConnecter::~IConnecter(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??1IConnecter@@QAE@XZ
  00000017: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001A: 83 C1 04           add         ecx,4
  0000001D: E8 00 00 00 00     call        00000022
  00000022: 83 C4 04           add         esp,4
  00000025: 3B EC              cmp         ebp,esp
  00000027: E8 00 00 00 00     call        0000002C
  0000002C: 8B E5              mov         esp,ebp
  0000002E: 5D                 pop         ebp
  0000002F: C3                 ret

?allocate@?$_DebugHeapAllocator@D@std@@QAAPADIPBX@Z (public: char * __cdecl std::_DebugHeapAllocator<char>::allocate(unsigned int,void const *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 10           sub         esp,10h
  00000006: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000B: 89 45 F0           mov         dword ptr [ebp-10h],eax
  0000000E: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000011: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000014: 89 45 FC           mov         dword ptr [ebp-4],eax
  00000017: 83 7D 0C 00        cmp         dword ptr [ebp+0Ch],0
  0000001B: 77 09              ja          00000026
  0000001D: C7 45 0C 00 00 00  mov         dword ptr [ebp+0Ch],offset ?allocate@?$_DebugHeapAllocator@D@std@@QAAPADIPBX@Z
            00
  00000024: EB 25              jmp         0000004B
  00000026: 83 C8 FF           or          eax,0FFh
  00000029: 33 D2              xor         edx,edx
  0000002B: F7 75 0C           div         eax,dword ptr [ebp+0Ch]
  0000002E: 83 F8 01           cmp         eax,1
  00000031: 73 18              jae         0000004B
  00000033: 6A 00              push        0
  00000035: 8D 4D F4           lea         ecx,[ebp-0Ch]
  00000038: E8 00 00 00 00     call        0000003D
  0000003D: 68 00 00 00 00     push        offset ?allocate@?$_DebugHeapAllocator@D@std@@QAAPADIPBX@Z
  00000042: 8D 45 F4           lea         eax,[ebp-0Ch]
  00000045: 50                 push        eax
  00000046: E8 00 00 00 00     call        0000004B
  0000004B: 6A 56              push        56h
  0000004D: 68 00 00 00 00     push        offset ?allocate@?$_DebugHeapAllocator@D@std@@QAAPADIPBX@Z
  00000052: E8 00 00 00 00     call        00000057
  00000057: 50                 push        eax
  00000058: 8B 4D 0C           mov         ecx,dword ptr [ebp+0Ch]
  0000005B: 51                 push        ecx
  0000005C: E8 00 00 00 00     call        00000061
  00000061: 83 C4 10           add         esp,10h
  00000064: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000067: 8B 45 F0           mov         eax,dword ptr [ebp-10h]
  0000006A: 83 C4 10           add         esp,10h
  0000006D: 3B EC              cmp         ebp,esp
  0000006F: E8 00 00 00 00     call        00000074
  00000074: 8B E5              mov         esp,ebp
  00000076: 5D                 pop         ebp
  00000077: C3                 ret

??0bad_alloc@std@@QAE@PBD@Z (public: __thiscall std::bad_alloc::bad_alloc(char const *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8D 45 08           lea         eax,[ebp+8]
  00000011: 50                 push        eax
  00000012: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000015: E8 00 00 00 00     call        0000001A
  0000001A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001D: C7 01 00 00 00 00  mov         dword ptr [ecx],offset ??0bad_alloc@std@@QAE@PBD@Z
  00000023: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000026: 83 C4 04           add         esp,4
  00000029: 3B EC              cmp         ebp,esp
  0000002B: E8 00 00 00 00     call        00000030
  00000030: 8B E5              mov         esp,ebp
  00000032: 5D                 pop         ebp
  00000033: C2 04 00           ret         4

??1bad_alloc@std@@UAE@XZ (public: virtual __thiscall std::bad_alloc::~bad_alloc(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: C7 00 00 00 00 00  mov         dword ptr [eax],offset ??1bad_alloc@std@@UAE@XZ
  00000017: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001A: E8 00 00 00 00     call        0000001F
  0000001F: 83 C4 04           add         esp,4
  00000022: 3B EC              cmp         ebp,esp
  00000024: E8 00 00 00 00     call        00000029
  00000029: 8B E5              mov         esp,ebp
  0000002B: 5D                 pop         ebp
  0000002C: C3                 ret

??_Gbad_alloc@std@@UAEPAXI@Z (public: virtual void * __thiscall std::bad_alloc::`scalar deleting destructor'(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000019: 83 E0 01           and         eax,1
  0000001C: 74 0C              je          0000002A
  0000001E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000021: 51                 push        ecx
  00000022: E8 00 00 00 00     call        00000027
  00000027: 83 C4 04           add         esp,4
  0000002A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000002D: 83 C4 04           add         esp,4
  00000030: 3B EC              cmp         ebp,esp
  00000032: E8 00 00 00 00     call        00000037
  00000037: 8B E5              mov         esp,ebp
  00000039: 5D                 pop         ebp
  0000003A: C2 04 00           ret         4

?allocate@?$_DebugHeapAllocator@D@std@@QAEPADI@Z (public: char * __thiscall std::_DebugHeapAllocator<char>::allocate(unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 EC 14           sub         esp,14h
  00000006: B8 CC CC CC CC     mov         eax,0CCCCCCCCh
  0000000B: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000000E: 89 45 F0           mov         dword ptr [ebp-10h],eax
  00000011: 89 45 F4           mov         dword ptr [ebp-0Ch],eax
  00000014: 89 45 F8           mov         dword ptr [ebp-8],eax
  00000017: 89 45 FC           mov         dword ptr [ebp-4],eax
  0000001A: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000001D: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  00000021: 77 09              ja          0000002C
  00000023: C7 45 08 00 00 00  mov         dword ptr [ebp+8],offset ?allocate@?$_DebugHeapAllocator@D@std@@QAEPADI@Z
            00
  0000002A: EB 25              jmp         00000051
  0000002C: 83 C8 FF           or          eax,0FFh
  0000002F: 33 D2              xor         edx,edx
  00000031: F7 75 08           div         eax,dword ptr [ebp+8]
  00000034: 83 F8 01           cmp         eax,1
  00000037: 73 18              jae         00000051
  00000039: 6A 00              push        0
  0000003B: 8D 4D F0           lea         ecx,[ebp-10h]
  0000003E: E8 00 00 00 00     call        00000043
  00000043: 68 00 00 00 00     push        offset ?allocate@?$_DebugHeapAllocator@D@std@@QAEPADI@Z
  00000048: 8D 45 F0           lea         eax,[ebp-10h]
  0000004B: 50                 push        eax
  0000004C: E8 00 00 00 00     call        00000051
  00000051: 6A 61              push        61h
  00000053: 68 00 00 00 00     push        offset ?allocate@?$_DebugHeapAllocator@D@std@@QAEPADI@Z
  00000058: E8 00 00 00 00     call        0000005D
  0000005D: 50                 push        eax
  0000005E: 8B 4D 08           mov         ecx,dword ptr [ebp+8]
  00000061: 51                 push        ecx
  00000062: E8 00 00 00 00     call        00000067
  00000067: 83 C4 10           add         esp,10h
  0000006A: 89 45 EC           mov         dword ptr [ebp-14h],eax
  0000006D: 8B 45 EC           mov         eax,dword ptr [ebp-14h]
  00000070: 83 C4 14           add         esp,14h
  00000073: 3B EC              cmp         ebp,esp
  00000075: E8 00 00 00 00     call        0000007A
  0000007A: 8B E5              mov         esp,ebp
  0000007C: 5D                 pop         ebp
  0000007D: C2 04 00           ret         4

?deallocate@?$_DebugHeapAllocator@D@std@@QAEXPADI@Z (public: void __thiscall std::_DebugHeapAllocator<char>::deallocate(char *,unsigned int)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000011: 50                 push        eax
  00000012: E8 00 00 00 00     call        00000017
  00000017: 83 C4 04           add         esp,4
  0000001A: 83 C4 04           add         esp,4
  0000001D: 3B EC              cmp         ebp,esp
  0000001F: E8 00 00 00 00     call        00000024
  00000024: 8B E5              mov         esp,ebp
  00000026: 5D                 pop         ebp
  00000027: C2 08 00           ret         8

??0bad_alloc@std@@QAE@ABV01@@Z (public: __thiscall std::bad_alloc::bad_alloc(class std::bad_alloc const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000011: 50                 push        eax
  00000012: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000015: E8 00 00 00 00     call        0000001A
  0000001A: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  0000001D: C7 01 00 00 00 00  mov         dword ptr [ecx],offset ??0bad_alloc@std@@QAE@ABV01@@Z
  00000023: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000026: 83 C4 04           add         esp,4
  00000029: 3B EC              cmp         ebp,esp
  0000002B: E8 00 00 00 00     call        00000030
  00000030: 8B E5              mov         esp,ebp
  00000032: 5D                 pop         ebp
  00000033: C2 04 00           ret         4

??0?$_DebugHeapAllocator@D@std@@QAE@XZ (public: __thiscall std::_DebugHeapAllocator<char>::_DebugHeapAllocator<char>(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000011: E8 00 00 00 00     call        00000016
  00000016: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000019: 83 C4 04           add         esp,4
  0000001C: 3B EC              cmp         ebp,esp
  0000001E: E8 00 00 00 00     call        00000023
  00000023: 8B E5              mov         esp,ebp
  00000025: 5D                 pop         ebp
  00000026: C3                 ret

??0?$allocator@D@std@@QAE@XZ (public: __thiscall std::allocator<char>::allocator<char>(void)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B E5              mov         esp,ebp
  00000013: 5D                 pop         ebp
  00000014: C3                 ret

??0?$_DebugHeapAllocator@D@std@@QAE@ABV01@@Z (public: __thiscall std::_DebugHeapAllocator<char>::_DebugHeapAllocator<char>(class std::_DebugHeapAllocator<char> const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 08           mov         eax,dword ptr [ebp+8]
  00000011: 50                 push        eax
  00000012: 8B 4D FC           mov         ecx,dword ptr [ebp-4]
  00000015: E8 00 00 00 00     call        0000001A
  0000001A: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  0000001D: 83 C4 04           add         esp,4
  00000020: 3B EC              cmp         ebp,esp
  00000022: E8 00 00 00 00     call        00000027
  00000027: 8B E5              mov         esp,ebp
  00000029: 5D                 pop         ebp
  0000002A: C2 04 00           ret         4

??0?$allocator@D@std@@QAE@ABV01@@Z (public: __thiscall std::allocator<char>::allocator<char>(class std::allocator<char> const &)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 51                 push        ecx
  00000004: C7 45 FC CC CC CC  mov         dword ptr [ebp-4],0CCCCCCCCh
            CC
  0000000B: 89 4D FC           mov         dword ptr [ebp-4],ecx
  0000000E: 8B 45 FC           mov         eax,dword ptr [ebp-4]
  00000011: 8B E5              mov         esp,ebp
  00000013: 5D                 pop         ebp
  00000014: C2 04 00           ret         4

??$_DebugHeapDelete@X@std@@YAXPAX@Z (void __cdecl std::_DebugHeapDelete<void>(void *)):
  00000000: 55                 push        ebp
  00000001: 8B EC              mov         ebp,esp
  00000003: 83 7D 08 00        cmp         dword ptr [ebp+8],0
  00000007: 74 0C              je          00000015
  00000009: 8B 45 08           mov         eax,dword ptr [ebp+8]
  0000000C: 50                 push        eax
  0000000D: E8 00 00 00 00     call        00000012
  00000012: 83 C4 04           add         esp,4
  00000015: 3B EC              cmp         ebp,esp
  00000017: E8 00 00 00 00     call        0000001C
  0000001C: 5D                 pop         ebp
  0000001D: C3                 ret

  Summary

           4 .CRT$XCU
          10 .bss
         434 .data
       4ABA4 .debug$S
         270 .debug$T
         30C .drectve
        198F .rdata
         861 .rdata$r
          18 .rtc$IMZ
          18 .rtc$TMZ
          D8 .sxdata
        BE6E .text
         ABD .text$x
          18 .text$yc
         DDC .xdata$x
